#!/bin/bash
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
set -e
export TUNNEL_FORCE_PROVISIONING_DNS=true
cloudflared -v
args=("$@")
TUNNEL_PROTOCOL=${args[1]}
if [ -z "$TUNNEL_PROTOCOL" ]; then
    TUNNEL_PROTOCOL="tcp"
fi
TUNNEL_HOSTNAME=${args[2]}
if [ -z "$TUNNEL_HOSTNAME" ]; then
    TUNNEL_HOSTNAME="172.17.0.1"
fi
TUNNEL_NICE_HOSTNAME=$(echo $TUNNEL_HOSTNAME | sed 's/\./-/g')
TUNNEL_PORT=${args[3]}
if [ -z "$TUNNEL_PORT" ]; then
    TUNNEL_PORT="22"
fi
if [ -z "$TUNNEL_NAMESPACE" ]; then
    TUNNEL_NAMESPACE="picloud-cloudflared"
fi
CNAME_RECORD="$TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT"
if [ -z "$TUNNEL_NAME" ]; then
    TUNNEL_NAME="picloud-$CNAME_RECORD"
fi
cloudflared tunnel login
cloudflared tunnel create $TUNNEL_NAME || true
FQDN_RECORD="$CNAME_RECORD.$DOMAIN"
cloudflared tunnel route dns $TUNNEL_NAME $FQDN_RECORD
mkdir -p ~/.picloud/cloudflared
CONFIG_YAML_FILE="$HOME/.picloud/cloudflared/$FQDN_RECORD.yml"
echo "" >$CONFIG_YAML_FILE
echo "tunnel: $TUNNEL_NAME" >>$CONFIG_YAML_FILE
echo "credentials-file: /etc/cloudflared/creds/credentials.json" >>$CONFIG_YAML_FILE
echo "metrics: 0.0.0.0:2000" >>$CONFIG_YAML_FILE
echo "no-autoupdate: true" >>$CONFIG_YAML_FILE
echo "ingress:" >>$CONFIG_YAML_FILE
echo "  - hostname: $FQDN_RECORD" >>$CONFIG_YAML_FILE
echo "    service: $TUNNEL_PROTOCOL://$TUNNEL_HOSTNAME:$TUNNEL_PORT" >>$CONFIG_YAML_FILE
echo "  - service: http_status:404" >>$CONFIG_YAML_FILE
echo "Created cloudflared config"
cat $CONFIG_YAML_FILE
echo "Starting cloudflared"
CONTAINER_TUNNEL_NAME="cloudflared-$TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT"
(docker inspect $CONTAINER_TUNNEL_NAME >/dev/null 2>&1 && docker rm -f $CONTAINER_TUNNEL_NAME) || true
TUNNEL_ID=$(cloudflared tunnel info $TUNNEL_NAME | grep -oE "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" | head -n 1)
echo "Tunnel ID: $TUNNEL_ID"
chmod -R 0777 ~/.cloudflared/$TUNNEL_ID.json

kubectl get secret tunnel-credentials -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete secret tunnel-credentials -n $TUNNEL_NAMESPACE || true
kubectl get configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE || true

kubectl create secret generic tunnel-credentials --from-file=credentials.json=$HOME/.cloudflared/$TUNNEL_ID.json -n $TUNNEL_NAMESPACE
kubectl create configmap $CONTAINER_TUNNEL_NAME --from-file=config.yaml=$CONFIG_YAML_FILE -n $TUNNEL_NAMESPACE
echo "---"                                                  > cloudflared-deployment.yaml
echo "apiVersion: apps/v1"                                  >>cloudflared-deployment.yaml
echo "kind: Deployment"                                     >>cloudflared-deployment.yaml
echo "metadata:"                                            >>cloudflared-deployment.yaml
echo "  name: $CONTAINER_TUNNEL_NAME"                       >>cloudflared-deployment.yaml
echo "spec:"                                                >>cloudflared-deployment.yaml
echo "  selector:"                                          >>cloudflared-deployment.yaml
echo "    matchLabels:"                                     >>cloudflared-deployment.yaml
echo "      app: cloudflared"                               >>cloudflared-deployment.yaml
echo "  replicas: 2"                                        >>cloudflared-deployment.yaml
echo "  template:"                                          >>cloudflared-deployment.yaml
echo "    metadata:"                                        >>cloudflared-deployment.yaml
echo "      labels:"                                        >>cloudflared-deployment.yaml
echo "        app: cloudflared"                             >>cloudflared-deployment.yaml
echo "    spec:"                                            >>cloudflared-deployment.yaml
echo "      containers:"                                    >>cloudflared-deployment.yaml
echo "        - name: cloudflared"                          >>cloudflared-deployment.yaml
echo "          image: cloudflare/cloudflared"              >>cloudflared-deployment.yaml
echo "          args:"                                      >>cloudflared-deployment.yaml
echo "            - tunnel"                                 >>cloudflared-deployment.yaml
echo "            - --no-autoupdate"                        >>cloudflared-deployment.yaml
echo "            - --config"                               >>cloudflared-deployment.yaml
echo "            - /etc/cloudflared/config/config.yaml"    >>cloudflared-deployment.yaml
echo "            - run"                                    >>cloudflared-deployment.yaml
echo "          livenessProbe:"                             >>cloudflared-deployment.yaml
echo "            httpGet:"                                 >>cloudflared-deployment.yaml
echo "              path: /ready"                           >>cloudflared-deployment.yaml
echo "              port: 2000"                             >>cloudflared-deployment.yaml
echo "            failureThreshold: 1"                      >>cloudflared-deployment.yaml
echo "            initialDelaySeconds: 10"                  >>cloudflared-deployment.yaml
echo "            periodSeconds: 10"                        >>cloudflared-deployment.yaml
echo "          volumeMounts:"                              >>cloudflared-deployment.yaml
echo "            - name: config"                           >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/config"     >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "            - name: creds"                            >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/creds"      >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "      volumes:"                                       >>cloudflared-deployment.yaml
echo "        - name: creds"                                >>cloudflared-deployment.yaml
echo "          secret:"                                    >>cloudflared-deployment.yaml
echo "            secretName: tunnel-credentials"           >>cloudflared-deployment.yaml
echo "        - name: config"                               >>cloudflared-deployment.yaml
echo "          configMap:"                                 >>cloudflared-deployment.yaml
echo "            name: $CONTAINER_TUNNEL_NAME"             >>cloudflared-deployment.yaml
echo "            items:"                                   >>cloudflared-deployment.yaml
echo "              - key: config.yaml"                     >>cloudflared-deployment.yaml
echo "                path: config.yaml"                    >>cloudflared-deployment.yaml

kubectl get namespace $TUNNEL_NAMESPACE >/dev/null 2>&1 || kubectl create namespace $TUNNEL_NAMESPACE
kubectl apply -f cloudflared-deployment.yaml -n $TUNNEL_NAMESPACE
kubectl rollout restart deployment/$CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE
# rm cloudflared-deployment.yaml
#
while true; do
    status_code=$(curl -s -o /dev/null -w "%{http_code}" https://$FQDN_RECORD/ || true)
    if [ "$status_code" == "200" ]; then
        break
    fi
    if [ "$status_code" == "302" ]; then
        break
    fi
    echo "Waiting for $FQDN_RECORD to be ready. Status code: $status_code"
    sleep 5
done
echo
echo "Tunnel exposed at $FQDN_RECORD"
if [ "tcp" == "$TUNNEL_PROTOCOL" ]; then
    if [ "22" == "$TUNNEL_PORT" ]; then
        grep -c "Host $FQDN_RECORD" ~/.ssh/config >/dev/null 2>&1 ||
            (echo "Host $FQDN_RECORD" >>~/.ssh/config && echo "  ProxyCommand cloudflared access ssh --hostname %h" >>~/.ssh/config)
        echo
        echo
        echo "To connect to your PiCloud, run:"
        echo "ssh $FQDN_RECORD"
        echo
        echo
        echo "To connect to your PiCloud from other devices, add the following to your ~/.ssh/config:"
        echo "Host $FQDN_RECORD"
        echo "  ProxyCommand cloudflared access ssh --hostname %h"
        echo
    fi
fi
