#!/bin/bash
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
set -e
export TUNNEL_FORCE_PROVISIONING_DNS=true
cloudflared -v
args=("$@")
TUNNEL_PROTOCOL=${args[0]}
if [ -z "$TUNNEL_PROTOCOL" ]; then
    TUNNEL_PROTOCOL="tcp"
fi
TUNNEL_HOSTNAME=${args[1]}
if [ -z "$TUNNEL_HOSTNAME" ]; then
    TUNNEL_HOSTNAME=$(hostname -I | awk '{print $1}')
fi
TUNNEL_NICE_HOSTNAME=$(echo $TUNNEL_HOSTNAME | sed 's/\./-/g')
TUNNEL_PORT=${args[2]}
if [ -z "$TUNNEL_PORT" ]; then
    TUNNEL_PORT="22"
fi
EXPECTED_STATUS_CODE=${args[3]}
if [ -z "$EXPECTED_STATUS_CODE" ]; then
    EXPECTED_STATUS_CODE="200"
fi
if [ -z "$TUNNEL_NAMESPACE" ]; then
    TUNNEL_NAMESPACE="picloud-cloudflared"
fi
CNAME_RECORD="$TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT"
if [ -z "$TUNNEL_NAME" ]; then
    TUNNEL_NAME="picloud-$CNAME_RECORD"
fi
EXPOSE_ITEMS_JSON="expose-items.json"
stat $EXPOSE_ITEMS_JSON > /dev/null 2>&1 || \
    echo "{}" >"$EXPOSE_ITEMS_JSON"
MAP_KEY="$CNAME_RECORD-$TUNNEL_NAMESPACE"

cat "$EXPOSE_ITEMS_JSON" | \
    jq -rM \
        --arg CNAME_RECORD "$CNAME_RECORD" \
        --arg TUNNEL_PROTOCOL "$TUNNEL_PROTOCOL" \
        --arg TUNNEL_HOSTNAME "$TUNNEL_HOSTNAME" \
        --arg TUNNEL_PORT "$TUNNEL_PORT" \
        --arg TUNNEL_NAMESPACE "$TUNNEL_NAMESPACE" \
        --arg TUNNEL_NICE_HOSTNAME "$TUNNEL_NICE_HOSTNAME" \
        --arg EXPECTED_STATUS_CODE "$EXPECTED_STATUS_CODE" \
        --arg MAP_KEY "$MAP_KEY" \
        '.[$MAP_KEY] = {
            "CNAME_RECORD": $CNAME_RECORD,
            "TUNNEL_PROTOCOL": $TUNNEL_PROTOCOL,
            "TUNNEL_HOSTNAME": $TUNNEL_HOSTNAME,
            "TUNNEL_PORT": $TUNNEL_PORT,
            "TUNNEL_NAMESPACE": $TUNNEL_NAMESPACE,
            "TUNNEL_NICE_HOSTNAME": $TUNNEL_NICE_HOSTNAME,
            "EXPECTED_STATUS_CODE": $EXPECTED_STATUS_CODE
        }' >"$EXPOSE_ITEMS_JSON".tmp
mv "$EXPOSE_ITEMS_JSON".tmp "$EXPOSE_ITEMS_JSON"
cloudflared tunnel login
cloudflared tunnel create $TUNNEL_NAME || true
CONFIG_YAML_FILE="$HOME/.picloud/cloudflared-$TUNNEL_NAMESPACE.yml"
echo "" >$CONFIG_YAML_FILE
echo "tunnel: $TUNNEL_NAME" >>$CONFIG_YAML_FILE
echo "credentials-file: /etc/cloudflared/creds/credentials.json" >>$CONFIG_YAML_FILE
echo "metrics: 0.0.0.0:2000" >>$CONFIG_YAML_FILE
echo "no-autoupdate: true" >>$CONFIG_YAML_FILE
echo "ingress:" >>$CONFIG_YAML_FILE
mkdir -p ~/.picloud/cloudflared
RECORDS_KEYS=$(cat "$EXPOSE_ITEMS_JSON" | jq -rM 'keys[]')
for RECORD_KEY in $RECORDS_KEYS; do
    echo "RECORD_KEY: $RECORD_KEY"
    RECORD=$(cat "$EXPOSE_ITEMS_JSON" | jq -rM ".[\"$RECORD_KEY\"]")
    # echo "RECORD: $RECORD"
    CNAME_RECORD=$(echo $RECORD | jq -rM '.CNAME_RECORD')
    FQDN_RECORD="$CNAME_RECORD.$DOMAIN"
    cloudflared tunnel route dns $TUNNEL_NAME $FQDN_RECORD
    TUNNEL_PROTOCOL=$(echo $RECORD | jq -rM '.TUNNEL_PROTOCOL')
    TUNNEL_HOSTNAME=$(echo $RECORD | jq -rM '.TUNNEL_HOSTNAME')
    TUNNEL_PORT=$(echo $RECORD | jq -rM '.TUNNEL_PORT')
    TUNNEL_NAMESPACE=$(echo $RECORD | jq -rM '.TUNNEL_NAMESPACE')
    TUNNEL_NICE_HOSTNAME=$(echo $RECORD | jq -rM '.TUNNEL_NICE_HOSTNAME')
    EXPECTED_STATUS_CODE=$(echo $RECORD | jq -rM '.EXPECTED_STATUS_CODE')
    echo "  - hostname: $TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT.$DOMAIN" >>$CONFIG_YAML_FILE
    echo "    service: $TUNNEL_PROTOCOL://$TUNNEL_HOSTNAME:$TUNNEL_PORT" >>$CONFIG_YAML_FILE
done
echo "  - hostname: $FQDN_RECORD" >>$CONFIG_YAML_FILE
echo "    service: $TUNNEL_PROTOCOL://$TUNNEL_HOSTNAME:$TUNNEL_PORT" >>$CONFIG_YAML_FILE
echo "  - service: http_status:404" >>$CONFIG_YAML_FILE
echo "Created cloudflared config"
# cat $CONFIG_YAML_FILE
echo "Starting cloudflared"
CONTAINER_TUNNEL_NAME="cloudflared-$TUNNEL_NAMESPACE"
(docker inspect $CONTAINER_TUNNEL_NAME >/dev/null 2>&1 && docker rm -f $CONTAINER_TUNNEL_NAME) || true
TUNNEL_ID=$(cloudflared tunnel info $TUNNEL_NAME | grep -oE "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" | head -n 1)
echo "Tunnel ID: $TUNNEL_ID"
TUNNEL_FILE="$HOME/.cloudflared/$TUNNEL_ID.json"
if [ ! -f "$TUNNEL_FILE" ]; then
    # remove old tunnel
    echo "Deleting old tunnel $TUNNEL_NAME"
    cloudflared tunnel delete $TUNNEL_NAME
    echo "Tunnel $TUNNEL_NAME deleted because it was not found in $TUNNEL_FILE"
    ./pic expose $TUNNEL_PROTOCOL $TUNNEL_HOSTNAME $TUNNEL_PORT
    exit 0
fi
chmod -R 0777 $TUNNEL_FILE

kubectl get namespace $TUNNEL_NAMESPACE >/dev/null 2>&1 || kubectl create namespace $TUNNEL_NAMESPACE
kubectl get secret tunnel-credentials -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete secret tunnel-credentials -n $TUNNEL_NAMESPACE || true
kubectl get configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE || true

kubectl create secret generic tunnel-credentials --from-file=credentials.json=$HOME/.cloudflared/$TUNNEL_ID.json -n $TUNNEL_NAMESPACE
kubectl create configmap $CONTAINER_TUNNEL_NAME --from-file=config.yaml=$CONFIG_YAML_FILE -n $TUNNEL_NAMESPACE
echo "---"                                                  > cloudflared-deployment.yaml
echo "apiVersion: apps/v1"                                  >>cloudflared-deployment.yaml
echo "kind: Deployment"                                     >>cloudflared-deployment.yaml
echo "metadata:"                                            >>cloudflared-deployment.yaml
echo "  name: $CONTAINER_TUNNEL_NAME"                       >>cloudflared-deployment.yaml
echo "spec:"                                                >>cloudflared-deployment.yaml
echo "  selector:"                                          >>cloudflared-deployment.yaml
echo "    matchLabels:"                                     >>cloudflared-deployment.yaml
echo "      app: cloudflared-$CONTAINER_TUNNEL_NAME"        >>cloudflared-deployment.yaml
echo "  replicas: 1"                                        >>cloudflared-deployment.yaml
echo "  template:"                                          >>cloudflared-deployment.yaml
echo "    metadata:"                                        >>cloudflared-deployment.yaml
echo "      labels:"                                        >>cloudflared-deployment.yaml
echo "        app: cloudflared-$CONTAINER_TUNNEL_NAME"      >>cloudflared-deployment.yaml
echo "    spec:"                                            >>cloudflared-deployment.yaml
echo "      containers:"                                    >>cloudflared-deployment.yaml
echo "        - name: cloudflared"                          >>cloudflared-deployment.yaml
echo "          image: cloudflare/cloudflared"              >>cloudflared-deployment.yaml
echo "          args:"                                      >>cloudflared-deployment.yaml
echo "            - tunnel"                                 >>cloudflared-deployment.yaml
echo "            - --no-autoupdate"                        >>cloudflared-deployment.yaml
echo "            - --config"                               >>cloudflared-deployment.yaml
echo "            - /etc/cloudflared/config/config.yaml"    >>cloudflared-deployment.yaml
echo "            - run"                                    >>cloudflared-deployment.yaml
echo "          livenessProbe:"                             >>cloudflared-deployment.yaml
echo "            httpGet:"                                 >>cloudflared-deployment.yaml
echo "              path: /ready"                           >>cloudflared-deployment.yaml
echo "              port: 2000"                             >>cloudflared-deployment.yaml
echo "            failureThreshold: 1"                      >>cloudflared-deployment.yaml
echo "            initialDelaySeconds: 10"                  >>cloudflared-deployment.yaml
echo "            periodSeconds: 10"                        >>cloudflared-deployment.yaml
echo "          volumeMounts:"                              >>cloudflared-deployment.yaml
echo "            - name: config"                           >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/config"     >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "            - name: creds"                            >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/creds"      >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "      volumes:"                                       >>cloudflared-deployment.yaml
echo "        - name: creds"                                >>cloudflared-deployment.yaml
echo "          secret:"                                    >>cloudflared-deployment.yaml
echo "            secretName: tunnel-credentials"           >>cloudflared-deployment.yaml
echo "        - name: config"                               >>cloudflared-deployment.yaml
echo "          configMap:"                                 >>cloudflared-deployment.yaml
echo "            name: $CONTAINER_TUNNEL_NAME"             >>cloudflared-deployment.yaml
echo "            items:"                                   >>cloudflared-deployment.yaml
echo "              - key: config.yaml"                     >>cloudflared-deployment.yaml
echo "                path: config.yaml"                    >>cloudflared-deployment.yaml

kubectl apply -f cloudflared-deployment.yaml -n $TUNNEL_NAMESPACE
kubectl rollout restart deployment/$CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE
# cat $CONFIG_YAML_FILE;exit 0
# rm cloudflared-deployment.yaml
#
while true; do
    if [ "tcp" == "$TUNNEL_PROTOCOL" ]; then
        break;
    fi
    status_code=$(curl -s -o /dev/null -w "%{http_code}" https://$FQDN_RECORD/ || true)
    if [ "$status_code" == "200" ]; then
        break
    fi
    if [ "$status_code" == "302" ]; then
        break
    fi
    if [ "$status_code" == "403" ]; then
        break
    fi
    if [ "$EXPECTED_STATUS_CODE" == "$status_code" ]; then
        break
    fi
    echo "Waiting for $FQDN_RECORD to be ready. Status code: $status_code. Expected status code: $EXPECTED_STATUS_CODE"
    sleep 5
done
echo
echo "Tunnel exposed at $FQDN_RECORD"
if [ "tcp" == "$TUNNEL_PROTOCOL" ]; then
    if [ "22" == "$TUNNEL_PORT" ]; then
        grep -c "Host $FQDN_RECORD" ~/.ssh/config >/dev/null 2>&1 ||
            (echo "Host $FQDN_RECORD" >>~/.ssh/config && echo "  ProxyCommand cloudflared access ssh --hostname %h" >>~/.ssh/config)
        echo
        echo
        echo "To connect to your PiCloud, run:"
        echo "ssh $FQDN_RECORD"
        echo
        echo
        echo "To connect to your PiCloud from other devices, add the following to your ~/.ssh/config:"
        echo "Host $FQDN_RECORD"
        echo "  ProxyCommand cloudflared access ssh --hostname %h"
        echo
    fi
fi
