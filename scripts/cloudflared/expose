#!/bin/bash
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
if [ ! -z "$DOMAIN_ALT" ]; then
    DOMAIN="$DOMAIN_ALT"
fi
set -xe -o pipefail
export TUNNEL_FORCE_PROVISIONING_DNS=true
docker pull cloudflare/cloudflared
args=("$@")
TUNNEL_PROTOCOL=${args[0]}
if [ -z "$TUNNEL_PROTOCOL" ]; then
    # echo "TUNNEL_PROTOCOL is empty. Specify a protocol for the tunnel."
    # exit 1
    TUNNEL_PROTOCOL="tcp"
fi
RESERVED_TUNNEL_PROTOCOL=$TUNNEL_PROTOCOL
TUNNEL_HOSTNAME=${args[1]}
if [ -z "$TUNNEL_HOSTNAME" ]; then
    TUNNEL_HOSTNAME=$(./pic hostname)
fi
TUNNEL_NICE_HOSTNAME=$(echo $TUNNEL_HOSTNAME | sed 's/\./-/g')
RESERVED_TUNNEL_HOSTNAME=$TUNNEL_HOSTNAME
TUNNEL_PORT=${args[2]}
if [ -z "$TUNNEL_PORT" ]; then
    TUNNEL_PORT="22"
fi
RESERVED_TUNNEL_PORT=$TUNNEL_PORT
EXPECTED_STATUS_CODE=${args[3]}
if [ -z "$EXPECTED_STATUS_CODE" ]; then
    EXPECTED_STATUS_CODE="200"
fi
# RESERVED_EXPECTED_STATUS_CODE=$EXPECTED_STATUS_CODE
if [ -z "$TUNNEL_NAMESPACE" ]; then
    DOMAIN_NAMESPACE=$(echo $DOMAIN | sed 's/\./-/g')
    TUNNEL_NAMESPACE="default-$DOMAIN_NAMESPACE"
fi
NODE_NUMBERTH=${args[4]}
echo "NODE_NUMBERTH: $NODE_NUMBERTH"
RE_ROUTE_ALL=${args[5]}
if [ -z "$RE_ROUTE_ALL" ]; then
    RE_ROUTE_ALL="false"
fi
CNAME_RECORD="$TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT"
if [ -z "$TUNNEL_NAME" ]; then
    TUNNEL_NAME="picloud-$TUNNEL_NAMESPACE"
fi
echo "TUNNEL_NAME: $TUNNEL_NAME"
EXPOSE_ITEMS_JSON="$HOME/.pic/expose-$TUNNEL_NAME.json"
stat $EXPOSE_ITEMS_JSON > /dev/null 2>&1 || \
    echo "{}" >"$EXPOSE_ITEMS_JSON"
MAP_KEY="$CNAME_RECORD-$TUNNEL_NAMESPACE"
status_code=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" https://$CNAME_RECORD.$DOMAIN/ || true)
#if [ "$status_code" == "404" ]; then
#    echo "Tunnel already exposed at $CNAME_RECORD.$DOMAIN with status code $status_code"
#    exit 0
#fi
if [ "$status_code" == "$EXPECTED_STATUS_CODE" ]; then
    echo "Tunnel already exposed at $CNAME_RECORD.$DOMAIN with status code $status_code"
    exit 0
fi
if [ "$status_code" == "200" ]; then
    echo "Tunnel already exposed at $CNAME_RECORD.$DOMAIN with status code $status_code"
    exit 0
fi
echo "Exposing tunnel at $CNAME_RECORD.$DOMAIN"
cat "$EXPOSE_ITEMS_JSON" | \
    jq -rM \
        --arg CNAME_RECORD "$CNAME_RECORD" \
        --arg TUNNEL_PROTOCOL "$TUNNEL_PROTOCOL" \
        --arg TUNNEL_HOSTNAME "$TUNNEL_HOSTNAME" \
        --arg TUNNEL_PORT "$TUNNEL_PORT" \
        --arg TUNNEL_NAMESPACE "$TUNNEL_NAMESPACE" \
        --arg TUNNEL_NICE_HOSTNAME "$TUNNEL_NICE_HOSTNAME" \
        --arg MAP_KEY "$MAP_KEY" \
        '.[$MAP_KEY] = {
            "CNAME_RECORD": $CNAME_RECORD,
            "TUNNEL_PROTOCOL": $TUNNEL_PROTOCOL,
            "TUNNEL_HOSTNAME": $TUNNEL_HOSTNAME,
            "TUNNEL_PORT": $TUNNEL_PORT,
            "TUNNEL_NAMESPACE": $TUNNEL_NAMESPACE,
            "TUNNEL_NICE_HOSTNAME": $TUNNEL_NICE_HOSTNAME
        }' > "$EXPOSE_ITEMS_JSON".tmp
echo "Moving $EXPOSE_ITEMS_JSON.tmp to $EXPOSE_ITEMS_JSON"
mv "$EXPOSE_ITEMS_JSON".tmp "$EXPOSE_ITEMS_JSON"
CERT_FILE="$HOME/.cloudflared/cert-$DOMAIN.pem"
stat $CERT_FILE > /dev/null 2>&1 || \
    (docker run \
        --user root \
        -v $HOME/.cloudflared/:$HOME/.cloudflared/ \
        cloudflare/cloudflared:latest tunnel --no-autoupdate login && mv $HOME/.cloudflared/cert.pem $CERT_FILE)

stat $CERT_FILE > /dev/null 2>&1 || exit 1
docker run --user root \
        -v $HOME/.cloudflared/:$HOME/.cloudflared/ \
        cloudflare/cloudflared:latest tunnel --no-autoupdate --origincert $CERT_FILE create $TUNNEL_NAME || true
stat "$HOME/.picloud/" > /dev/null 2>&1 || mkdir -p "$HOME/.picloud/"
CONFIG_YAML_FILE="$HOME/.picloud/cloudflared-$TUNNEL_NAMESPACE.yml"
echo "" >$CONFIG_YAML_FILE
echo "tunnel: $TUNNEL_NAME" >>$CONFIG_YAML_FILE
echo "credentials-file: /etc/cloudflared/creds/credentials.json" >>$CONFIG_YAML_FILE
echo "metrics: 0.0.0.0:2000" >>$CONFIG_YAML_FILE
echo "no-autoupdate: true" >>$CONFIG_YAML_FILE
echo "ingress:" >>$CONFIG_YAML_FILE
mkdir -p ~/.picloud/cloudflared
RECORDS_KEYS=$(cat "$EXPOSE_ITEMS_JSON" | jq -rM 'keys[]')
for RECORD_KEY in $RECORDS_KEYS; do
    # echo "RECORD_KEY: $RECORD_KEY"
    RECORD=$(cat "$EXPOSE_ITEMS_JSON" | jq -rM ".[\"$RECORD_KEY\"]")
    # echo "RECORD: $RECORD"
    CNAME_RECORD=$(echo $RECORD | jq -rM '.CNAME_RECORD')
    FQDN_RECORD="$CNAME_RECORD.$DOMAIN"
    # 
    if [ "true" == "$RE_ROUTE_ALL" ]; then
        echo "Tunnel route dns $TUNNEL_NAME $FQDN_RECORD"
        # cloudflared tunnel route dns $TUNNEL_NAME $FQDN_RECORD
    fi
    TUNNEL_PROTOCOL=$(echo $RECORD | jq -rM '.TUNNEL_PROTOCOL')
    TUNNEL_HOSTNAME=$(echo $RECORD | jq -rM '.TUNNEL_HOSTNAME')
    TUNNEL_PORT=$(echo $RECORD | jq -rM '.TUNNEL_PORT')
    TUNNEL_NAMESPACE=$(echo $RECORD | jq -rM '.TUNNEL_NAMESPACE')
    TUNNEL_NICE_HOSTNAME=$(echo $RECORD | jq -rM '.TUNNEL_NICE_HOSTNAME')
    if [ "gitlab-kas-gitlab-ns" == "$TUNNEL_NICE_HOSTNAME" ]; then
        CNAME_RECORD="tcp-gitlab-kas-gitlab-ns-8150"
    fi
    echo "  - hostname: $CNAME_RECORD.$DOMAIN"                          >>$CONFIG_YAML_FILE
    if [ "gitlab-kas-gitlab-ns" == "$TUNNEL_NICE_HOSTNAME" ]; then
        if [ "8150" == "$TUNNEL_PORT" ]; then
            echo "    path: /$"                                         >>$CONFIG_YAML_FILE
        fi
        if [ "8154" == "$TUNNEL_PORT" ]; then
            echo "    path: /k8s-proxy"                                 >>$CONFIG_YAML_FILE
        fi
    fi
    echo "    service: $TUNNEL_PROTOCOL://$TUNNEL_HOSTNAME:$TUNNEL_PORT">>$CONFIG_YAML_FILE
    echo "    originRequest:"                                          >>$CONFIG_YAML_FILE
    echo "        connectTimeout: 10s"                                 >>$CONFIG_YAML_FILE
    echo "        noTLSVerify: true"                                   >>$CONFIG_YAML_FILE
done
echo "  - service: http_status:404" >>$CONFIG_YAML_FILE
echo "Created cloudflared config"
# cat $CONFIG_YAML_FILE
echo "Starting cloudflared"
CONTAINER_TUNNEL_NAME="cloudflared-$TUNNEL_NAMESPACE"
while true; do
    TUNNEL_ID=$(docker run --user root \
        -v $HOME/.cloudflared/:$HOME/.cloudflared/ \
        cloudflare/cloudflared:latest --origincert $CERT_FILE tunnel --no-autoupdate info $TUNNEL_NAME | grep -oE "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" | head -n 1) && break || true
    echo "Tunnel ID: $TUNNEL_ID"
    sleep 12
done
TUNNEL_FILE="$HOME/.cloudflared/$TUNNEL_ID.json"
if [ ! -f "$TUNNEL_FILE" ]; then
    # remove old tunnel
    echo "Deleting old tunnel $TUNNEL_NAME"
    kubectl delete deploy -n $TUNNEL_NAMESPACE $CONTAINER_TUNNEL_NAME || true
    docker run --user root \
        -v $HOME/.cloudflared/:$HOME/.cloudflared/ \
        cloudflare/cloudflared:latest --origincert $CERT_FILE tunnel --no-autoupdate delete $TUNNEL_NAME
    echo "Tunnel $TUNNEL_NAME deleted because it was not found in $TUNNEL_FILE"
    DOMAIN_ALT=$DOMAIN_ALT ./pic expose $TUNNEL_PROTOCOL $TUNNEL_HOSTNAME $TUNNEL_PORT
    exit 0
fi
chmod -R 0777 $TUNNEL_FILE

kubectl get namespace $TUNNEL_NAMESPACE >/dev/null 2>&1 || kubectl create namespace $TUNNEL_NAMESPACE
kubectl get secret tunnel-credentials -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete secret tunnel-credentials -n $TUNNEL_NAMESPACE || true
kubectl get configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE >/dev/null 2>&1 && kubectl delete configmap $CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE || true

kubectl create secret generic tunnel-credentials --from-file=credentials.json=$HOME/.cloudflared/$TUNNEL_ID.json -n $TUNNEL_NAMESPACE
kubectl create configmap $CONTAINER_TUNNEL_NAME --from-file=config.yaml=$CONFIG_YAML_FILE -n $TUNNEL_NAMESPACE
if [ -z "$NODE_NUMBERTH" ]; then
    # NODE_NUMBERTH=$(kubectl get nodes -o json | jq -r '.items | length')
    # pic-rn: tunnel
    # PODS_NAME=$(kubectl get pods -A -o json | jq -r '[.items[].metadata.labels | select(.["pic-rn"] == "tunnel")]')
    # PODS_COUNT=$(kubectl get pods -A -o json | jq -r '[.items[].metadata.labels | select(.["pic-rn"] == "tunnel")] | length') # return non-running pods
    # PODS_COUNT=$(kubectl get pods -A -o json | jq -r 'select(.status.phase == "Running") | [.items[].metadata.labels | select(.["pic-rn"] == "tunnel")] | length')
    PODS_COUNT=$(kubectl get deploy -A -o json | jq -r '.items[0] | select(.metadata.labels["pic-rn"] == "tunnel-deploy")' | jq -s "length")
    # echo "PODS_COUNT: $PODS_COUNT"
    TOTAL_NODES=$(kubectl get nodes -o json | jq -r '.items | length')
    
    echo "TOTAL_NODES: $TOTAL_NODES"
    # echo "PODS_NAME: $PODS_NAME"
    echo "PODS_COUNT: $PODS_COUNT"
    EXIST_NODE_NUMBERTH=$(kubectl get deploy -n default -o json | jq -r ".items[0].spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].values[0]")
    if [ "null" == "$EXIST_NODE_NUMBERTH" ]; then
        NODE_NUMBERTH="add-$(($TOTAL_NODES - $PODS_COUNT - 1))"
    else
        NODE_NUMBERTH="$EXIST_NODE_NUMBERTH"
    fi
fi

echo "---"                                                  > cloudflared-deployment.yaml
echo "apiVersion: apps/v1"                                  >>cloudflared-deployment.yaml
echo "kind: Deployment"                                     >>cloudflared-deployment.yaml
echo "metadata:"                                            >>cloudflared-deployment.yaml
echo "  name: $CONTAINER_TUNNEL_NAME"                       >>cloudflared-deployment.yaml
echo "  labels:"                                            >>cloudflared-deployment.yaml
echo "    pic-rn: tunnel-deploy"                            >>cloudflared-deployment.yaml
echo "spec:"                                                >>cloudflared-deployment.yaml
echo "  selector:"                                          >>cloudflared-deployment.yaml
echo "    matchLabels:"                                     >>cloudflared-deployment.yaml
echo "      app: cloudflared-$CONTAINER_TUNNEL_NAME"        >>cloudflared-deployment.yaml
echo "  replicas: 1"                                        >>cloudflared-deployment.yaml
echo "  template:"                                          >>cloudflared-deployment.yaml
echo "    metadata:"                                        >>cloudflared-deployment.yaml
echo "      labels:"                                        >>cloudflared-deployment.yaml
echo "        app: cloudflared-$CONTAINER_TUNNEL_NAME"      >>cloudflared-deployment.yaml
echo "        pic-rn: tunnel-pod"                           >>cloudflared-deployment.yaml
echo "    spec:"                                            >>cloudflared-deployment.yaml
echo "      affinity:"                                      >>cloudflared-deployment.yaml
echo "        nodeAffinity:"                                >>cloudflared-deployment.yaml
echo "          preferredDuringSchedulingIgnoredDuringExecution:" >>cloudflared-deployment.yaml
echo "          - weight: 1"                                >>cloudflared-deployment.yaml
echo "            preference:"                              >>cloudflared-deployment.yaml
echo "              matchExpressions:"                      >>cloudflared-deployment.yaml
echo "              - key: added-numberth"                  >>cloudflared-deployment.yaml
echo "                operator: In"                         >>cloudflared-deployment.yaml
echo "                values:"                              >>cloudflared-deployment.yaml
echo "                - $NODE_NUMBERTH"                     >>cloudflared-deployment.yaml
echo "      containers:"                                    >>cloudflared-deployment.yaml
echo "        - name: cloudflared"                          >>cloudflared-deployment.yaml
echo "          image: cloudflare/cloudflared:2024.6.0"    >>cloudflared-deployment.yaml
echo "          args:"                                      >>cloudflared-deployment.yaml
echo "            - tunnel"                                 >>cloudflared-deployment.yaml
echo "            - --no-autoupdate"                        >>cloudflared-deployment.yaml
echo "            - --config"                               >>cloudflared-deployment.yaml
echo "            - /etc/cloudflared/config/config.yaml"    >>cloudflared-deployment.yaml
echo "            - run"                                    >>cloudflared-deployment.yaml
echo "          livenessProbe:"                             >>cloudflared-deployment.yaml
echo "            httpGet:"                                 >>cloudflared-deployment.yaml
echo "              path: /ready"                           >>cloudflared-deployment.yaml
echo "              port: 2000"                             >>cloudflared-deployment.yaml
echo "            failureThreshold: 1"                      >>cloudflared-deployment.yaml
echo "            initialDelaySeconds: 10"                  >>cloudflared-deployment.yaml
echo "            periodSeconds: 10"                        >>cloudflared-deployment.yaml
echo "          volumeMounts:"                              >>cloudflared-deployment.yaml
echo "            - name: config"                           >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/config"     >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "            - name: creds"                            >>cloudflared-deployment.yaml
echo "              mountPath: /etc/cloudflared/creds"      >>cloudflared-deployment.yaml
echo "              readOnly: true"                         >>cloudflared-deployment.yaml
echo "      volumes:"                                       >>cloudflared-deployment.yaml
echo "        - name: creds"                                >>cloudflared-deployment.yaml
echo "          secret:"                                    >>cloudflared-deployment.yaml
echo "            secretName: tunnel-credentials"           >>cloudflared-deployment.yaml
echo "        - name: config"                               >>cloudflared-deployment.yaml
echo "          configMap:"                                 >>cloudflared-deployment.yaml
echo "            name: $CONTAINER_TUNNEL_NAME"             >>cloudflared-deployment.yaml
echo "            items:"                                   >>cloudflared-deployment.yaml
echo "              - key: config.yaml"                     >>cloudflared-deployment.yaml
echo "                path: config.yaml"                    >>cloudflared-deployment.yaml

kubectl apply -f cloudflared-deployment.yaml -n $TUNNEL_NAMESPACE
kubectl rollout restart deployment/$CONTAINER_TUNNEL_NAME -n $TUNNEL_NAMESPACE
#
# EXPECTED_STATUS_CODE=$RESERVED_EXPECTED_STATUS_CODE
TUNNEL_PROTOCOL=$RESERVED_TUNNEL_PROTOCOL
TUNNEL_HOSTNAME=$RESERVED_TUNNEL_HOSTNAME
TUNNEL_PORT=$RESERVED_TUNNEL_PORT
TUNNEL_NICE_HOSTNAME=$(echo $TUNNEL_HOSTNAME | sed 's/\./-/g')
CNAME_RECORD="$TUNNEL_PROTOCOL-$TUNNEL_NICE_HOSTNAME-$TUNNEL_PORT"
FQDN_RECORD="$CNAME_RECORD.$DOMAIN"
while true; do
    docker run --user root \
        -v $HOME/.cloudflared/:$HOME/.cloudflared/ \
        cloudflare/cloudflared:latest --origincert $CERT_FILE tunnel --no-autoupdate route dns --overwrite-dns $TUNNEL_NAME $FQDN_RECORD && break || sleep 5
done
while true; do
    if [ "tcp" == "$TUNNEL_PROTOCOL" ]; then
        break;
    fi
    status_code=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" https://$FQDN_RECORD/ || true)
    echo "Status code: $status_code"
    if [ "$status_code" == "200" ]; then
        break
    fi
    if [ "$status_code" == "302" ]; then
        break
    fi
    if [ "$status_code" == "403" ]; then
        break
    fi
    if [ "$status_code" == "404" ]; then
        break
    fi
    if [ "$EXPECTED_STATUS_CODE" == "$status_code" ]; then
        break
    fi
    echo "Waiting for $FQDN_RECORD to be ready. Status code: $status_code. Expected status code: $EXPECTED_STATUS_CODE"
    sleep 5
done
echo
echo "Tunnel exposed at $FQDN_RECORD on node $NODE_NUMBERTH"
if [ "tcp" == "$TUNNEL_PROTOCOL" ]; then
    if [ "22" == "$TUNNEL_PORT" ]; then
        grep -c "Host $FQDN_RECORD" ~/.ssh/config >/dev/null 2>&1 ||
            (echo "Host $FQDN_RECORD" >>~/.ssh/config && echo "  ProxyCommand cloudflared access ssh --hostname %h" >>~/.ssh/config)
        echo
        echo
        echo "To connect to your PiCloud, run:"
        echo "ssh -o ProxyCommand=\"cloudflared access ssh --hostname %h\" root@$FQDN_RECORD"
        echo
        echo
        echo "To connect to your PiCloud from other devices, add the following to your ~/.ssh/config:"
        echo "Host $FQDN_RECORD"
        echo "  ProxyCommand cloudflared access ssh --hostname %h"
        echo
    fi
else
    echo "https://$FQDN_RECORD/"
fi
