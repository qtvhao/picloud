#!/bin/bash

set -e -o pipefail
args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "IDENTIFY_FILE is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic Registry-as-a-pull-through-cache IDENTIFY_FILE NODE_IP REGISTRY_PROXY_REMOTEURL CONTAINER_NAME IP_ADDRESS MIRROR_NAME"
    exit 1
fi
NODE_IP=${args[1]}
if [ -z "$NODE_IP" ]; then
    nodes=$(./pic list-nodename "$IDENTIFY_FILE" | awk '{print $1}')
    # loop through lines in $nodes, echo
    for line in $nodes; do
        if [ -z "$line" ]; then
            continue
        fi
        # echo "line: $line"
        echo "Registry-as-a-pull-through-cache $IDENTIFY_FILE $line"
        ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$line"
        echo "Done"
    done
    # echo "NODE_IP is empty. Specify a node ip for the new machine."
    # echo "Usage: ./pic Registry-as-a-pull-through-cache IDENTIFY_FILE NODE_IP REGISTRY_PROXY_REMOTEURL CONTAINER_NAME IP_ADDRESS MIRROR_NAME"
    exit 0
fi
source .env
REGISTRY_PROXY_REMOTEURL=${args[2]}
if [ -z "$REGISTRY_PROXY_REMOTEURL" ]; then
    DOMAIN_SED=$(echo $DOMAIN | sed 's/\./\-/g')
    echo "mirrors:"                             >  $HOME/registries.yaml
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://registry-1.docker.io"                              "registry-1-docker-io"                              "203.0.113.2" "docker.io"                                           | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://quay.io"                                           "quay-io"                                           "203.0.113.3" "quay.io"                                             | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://registry.gitlab.com"                               "registry-gitlab-com"                               "203.0.113.4" "registry.gitlab.com"                                 | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://registry.k8s.io"                                   "registry-k8s-io"                                   "203.0.113.5" "registry.k8s.io"                                     | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://gcr.io"                                            "gcr-io"                                            "203.0.113.6" "gcr.io"                                              | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://http-harbor-registry-harbor-ns-5000.$DOMAIN"       "http-harbor-registry-harbor-ns-5000-$DOMAIN_SED"   "203.0.113.7" "http-harbor-registry-harbor-ns-5000.$DOMAIN"         | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP" "https://ghcr.io"                                           "ghcr-io"                                           "203.0.113.8" "ghcr.io"                                             | tee $LOGS_DIR/Registry-as-a-pull-through-cache.log
    # 
    ssh -i $IDENTIFY_FILE \
        -o PasswordAuthentication=no \
        "$NODE_IP" "mkdir -p /etc/rancher/k3s/"
    scp -i $IDENTIFY_FILE \
        $HOME/registries.yaml $NODE_IP:/etc/rancher/k3s/registries.yaml
    exit 0
fi
CONTAINER_NAME=${args[3]}
IP_ADDRESS=${args[4]}
MIRROR_NAME=${args[5]}
# create a new bridge network with your subnet and gateway for your ip block
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "curl -fsSL https://get.docker.com -o install-docker.sh; \
    docker ps >/dev/null 2>&1 || sh install-docker.sh;
    docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic; \
    docker rm -f $CONTAINER_NAME ; docker run -d \
    -e REGISTRY_PROXY_REMOTEURL=$REGISTRY_PROXY_REMOTEURL \
    --restart=always \
    -v /var/lib/registry-proxy/remote-vendor-$CONTAINER_NAME/:/var/lib/registry \
    --name $CONTAINER_NAME \
    --net iptastic --ip $IP_ADDRESS registry:2"
# curl the ip from any other place (assuming this is a public ip block duh)
# while true; do
#     ssh -i $IDENTIFY_FILE \
#         -o PasswordAuthentication=no \
#         "$NODE_IP" "curl -fL http://$IP_ADDRESS:5000/v2/_catalog || exit 1" && break
#     sleep 1
# done
echo "  $MIRROR_NAME:"                          >> $HOME/registries.yaml
echo "    endpoint:"                            >> $HOME/registries.yaml
echo "      - \"http://$IP_ADDRESS:5000\""      >> $HOME/registries.yaml

echo "Exposed successfully. Use $IP_ADDRESS:5000 to access the registry"
