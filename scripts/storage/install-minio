#!/bin/bash
set -e -o pipefail
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
echo "Installing S3"
VERSION="5.0.11"
curl -O https://raw.githubusercontent.com/minio/operator/master/helm-releases/operator-$VERSION.tgz
curl -O https://raw.githubusercontent.com/minio/operator/master/helm-releases/tenant-$VERSION.tgz
# helm uninstall minio-operator -n minio-operator || true
helm upgrade --install \
    --namespace minio-operator \
    --create-namespace \
    minio-operator operator-$VERSION.tgz
rm operator-$VERSION.tgz
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: console-sa-secret
  namespace: minio-operator
  annotations:
    kubernetes.io/service-account.name: console-sa
type: kubernetes.io/service-account-token
EOF
kubectl -n minio-operator  get secret console-sa-secret -o jsonpath="{.data.token}" | base64 --decode;echo
# 
PIC_DIR="$HOME/.pic"
helm uninstall tenant-picloud -n tenant-ns || true
kubectl get pvc --namespace tenant-ns -o name | xargs kubectl delete --namespace tenant-ns || true
kubectl get pods -n tenant-ns -o json | jq -r '.items[].metadata.name' | xargs kubectl delete pod -n tenant-ns || true
kubectl get jobs -n tenant-ns -o json | jq -r '.items[].metadata.name' | xargs kubectl delete job -n tenant-ns || true
kubectl get secrets --namespace tenant-ns -o name | xargs kubectl delete --namespace tenant-ns || true

stat $PIC_DIR/s3.json > /dev/null 2>&1 || \
    ACCESS_KEY_ID=$(openssl rand -hex 32)
stat $PIC_DIR/s3.json > /dev/null 2>&1 || \
    SECRET_ACCESS_KEY=$(openssl rand -hex 32)

stat $PIC_DIR/s3.json > /dev/null 2>&1 || \
    jq -n --arg ACCESS_KEY_ID "$ACCESS_KEY_ID" --arg SECRET_ACCESS_KEY "$SECRET_ACCESS_KEY" '{"ACCESS_KEY_ID":$ACCESS_KEY_ID,"SECRET_ACCESS_KEY":$SECRET_ACCESS_KEY}' > $PIC_DIR/s3.json
ACCESS_KEY_ID=$(jq -r '.ACCESS_KEY_ID' $PIC_DIR/s3.json)
SECRET_ACCESS_KEY=$(jq -r '.SECRET_ACCESS_KEY' $PIC_DIR/s3.json)

helm upgrade --install \
    --namespace tenant-ns \
    --create-namespace \
    --set 'tenant.buckets[0].name=gitlab-registry,tenant.buckets[1].name=gitlab-lfs-storage,tenant.buckets[2].name=gitlab-artifacts-storage,tenant.buckets[3].name=gitlab-uploads-storage,tenant.buckets[4].name=gitlab-packages-storage,tenant.buckets[5].name=gitlab-external-diffs,tenant.buckets[6].name=gitlab-terraform-state,tenant.buckets[7].name=gitlab-dependency-proxy,tenant.buckets[8].name=gitlab-backup-upload,tenant.buckets[9].name=gitlab-tmp-storage,tenant.buckets[10].name=gitlab-cache' \
    --set "tenant.pools[0].storageClassName=local-path,tenant.pools[0].servers=1,tenant.name=tenant-picloud" \
    --set "tenant.certificate.requestAutoCert=false" \
    --set "secrets.accessKey=$ACCESS_KEY_ID" \
    --set "secrets.secretKey=$SECRET_ACCESS_KEY" \
    tenant-picloud tenant-$VERSION.tgz
rm tenant-$VERSION.tgz
while true; do
    kubectl -n tenant-ns get svc tenant-picloud-hl && break || sleep 5
done

echo "Minio console: https://http-console-minio-operator-9090.$DOMAIN/"
