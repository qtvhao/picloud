#!/bin/bash
set -e -o pipefail
source .env
args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "Please provide the identify file"
    exit 1
fi
NODES=$(kubectl get nodes -o json | jq -r "[.items[] | .metadata.annotations.\"k3s.io/internal-ip\"]")
NODES_IP=$(echo $NODES | jq -r '.[]')
for node in $NODES_IP; do
   if [ -z "$node" ]; then
      continue
   fi
   echo "node: $node"
   DISKS=$(ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "lsblk -f | grep ceph_bluestore | awk '{print \$1}'")
   if [ -z "$DISKS" ]; then
      continue
   fi
   for DISKNAME in $DISKS; do
      disk=$DISKNAME
      # Zap the disk to a fresh, usable state (zap-all is important, b/c MBR has to be clean)
      ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo sgdisk --zap-all /dev/$disk"
      # Wipe a large portion of the beginning of the disk to remove more LVM metadata that may be present
      ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo dd if=/dev/zero of=/dev/$disk bs=1M count=100 oflag=direct,dsync"
      # Inform the OS of partition table changes
      ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo partprobe /dev/$disk"
   done
done

helm repo add rook-release https://charts.rook.io/release
helm upgrade --install --create-namespace --namespace rook-ceph rook-ceph rook-release/rook-ceph # -f values.yaml
#

echo "cephBlockPools:" >values-rook-ceph-cluster.yaml
echo "  - name: ceph-blockpool" >>values-rook-ceph-cluster.yaml
echo "    spec:" >>values-rook-ceph-cluster.yaml
echo "      failureDomain: host" >>values-rook-ceph-cluster.yaml
echo "      replicated:" >>values-rook-ceph-cluster.yaml
echo "        size: 3" >>values-rook-ceph-cluster.yaml
echo "    storageClass:" >>values-rook-ceph-cluster.yaml
echo "      allowVolumeExpansion: true" >>values-rook-ceph-cluster.yaml
echo "      allowedTopologies: []" >>values-rook-ceph-cluster.yaml
echo "      enabled: true" >>values-rook-ceph-cluster.yaml
echo "      isDefault: false" >>values-rook-ceph-cluster.yaml
echo "      mountOptions: []" >>values-rook-ceph-cluster.yaml
echo "      name: ceph-block" >>values-rook-ceph-cluster.yaml
echo "      parameters:" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/fstype: ext4" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner" >>values-rook-ceph-cluster.yaml
echo "        csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph" >>values-rook-ceph-cluster.yaml
echo "        imageFeatures: layering" >>values-rook-ceph-cluster.yaml
echo "        imageFormat: \"2\"" >>values-rook-ceph-cluster.yaml
echo "      reclaimPolicy: Delete" >>values-rook-ceph-cluster.yaml
echo "      volumeBindingMode: Immediate" >>values-rook-ceph-cluster.yaml
echo "toolbox:" >>values-rook-ceph-cluster.yaml
echo "  enabled: true" >>values-rook-ceph-cluster.yaml

helm upgrade --install --create-namespace --namespace rook-ceph rook-ceph-cluster \
   --set operatorNamespace=rook-ceph rook-release/rook-ceph-cluster -f values-rook-ceph-cluster.yaml
rm values-rook-ceph-cluster.yaml
kubectl -n rook-ceph get pod
./pic wait deploy rook-ceph-operator rook-ceph Available
./pic wait deploy rook-ceph-tools rook-ceph Available
./pic wait deploy rook-ceph-mon-a rook-ceph Available
./pic wait deploy csi-rbdplugin-provisioner rook-ceph Available
./pic wait deploy csi-cephfsplugin-provisioner rook-ceph Available
./pic wait deploy rook-ceph-mgr-a rook-ceph Available
# ./pic wait deploy rook-ceph-osd-0 rook-ceph Available
# ./pic wait deploy rook-ceph-mds-ceph-filesystem-a rook-ceph Available
kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo
# 
# apiVersion: apps/v1
echo "apiVersion: apps/v1" > rook-ceph-pvc-claim-test.yaml
# kind: Deployment
echo "kind: Deployment" >> rook-ceph-pvc-claim-test.yaml
# metadata:
echo "metadata:" >> rook-ceph-pvc-claim-test.yaml
#   name: pic-test-csi-s3
echo "  name: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
# spec:
echo "spec:" >> rook-ceph-pvc-claim-test.yaml
#   replicas: 1
echo "  replicas: 1" >> rook-ceph-pvc-claim-test.yaml
#   selector:
echo "  selector:" >> rook-ceph-pvc-claim-test.yaml
#     matchLabels:
echo "    matchLabels:" >> rook-ceph-pvc-claim-test.yaml
#       app: pic-test-csi-s3
echo "      app: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
#   template:
echo "  template:" >> rook-ceph-pvc-claim-test.yaml
#     metadata:
echo "    metadata:" >> rook-ceph-pvc-claim-test.yaml
#       creationTimestamp: null
echo "      creationTimestamp: null" >> rook-ceph-pvc-claim-test.yaml
#       labels:
echo "      labels:" >> rook-ceph-pvc-claim-test.yaml
#         app: pic-test-csi-s3
echo "        app: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
#     spec:
echo "    spec:" >> rook-ceph-pvc-claim-test.yaml
#       containers:
echo "      containers:" >> rook-ceph-pvc-claim-test.yaml
#       - command:
echo "      - command:" >> rook-ceph-pvc-claim-test.yaml
#         - sh
echo "        - sh" >> rook-ceph-pvc-claim-test.yaml
#         - -c
echo "        - -c" >> rook-ceph-pvc-claim-test.yaml
#         - |
echo "        - |" >> rook-ceph-pvc-claim-test.yaml
#           for i in 1 2 3 4 5 6 7 8 9 10 ; do
echo "          for i in 1 2 3 4 5 6 7 8 9 10 ; do" >> rook-ceph-pvc-claim-test.yaml
#             echo $i
echo "            echo \$i" >> rook-ceph-pvc-claim-test.yaml
#             wget "https://raw.githubusercontent.com/qtvhao/picloud/main/tests/steffen-b-qDZ-Xd8dX6w-unsplash.jpg" -O "/tmp/dir/$i.png"
echo "            wget \"https://raw.githubusercontent.com/qtvhao/picloud/main/tests/steffen-b-qDZ-Xd8dX6w-unsplash.jpg\" -O \"/tmp/dir/\$i.png\"" >> rook-ceph-pvc-claim-test.yaml
#           done
echo "          done" >> rook-ceph-pvc-claim-test.yaml
#           sleep 1000
echo "          sleep 1000" >> rook-ceph-pvc-claim-test.yaml
#         image: busybox
echo "        image: busybox" >> rook-ceph-pvc-claim-test.yaml
#         name: pic-test-csi-s3
echo "        name: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
#             # touch "/tmp/dir/$i.png"
#         volumeMounts:
echo "        volumeMounts:" >> rook-ceph-pvc-claim-test.yaml
#         - mountPath: /tmp/dir/
echo "        - mountPath: /tmp/dir/" >> rook-ceph-pvc-claim-test.yaml
#           name: tmp-data
echo "          name: tmp-data" >> rook-ceph-pvc-claim-test.yaml
#       volumes:
echo "      volumes:" >> rook-ceph-pvc-claim-test.yaml
#       - name: tmp-data
echo "      - name: tmp-data" >> rook-ceph-pvc-claim-test.yaml
#         persistentVolumeClaim:
echo "        persistentVolumeClaim:" >> rook-ceph-pvc-claim-test.yaml
#           claimName: pic-test-pvc
echo "          claimName: pic-test-pvc" >> rook-ceph-pvc-claim-test.yaml
#           readOnly: false
echo "          readOnly: false" >> rook-ceph-pvc-claim-test.yaml

echo "" >> rook-ceph-pvc-claim-test.yaml
# ---
echo "---" >> rook-ceph-pvc-claim-test.yaml
echo "" >> rook-ceph-pvc-claim-test.yaml

# apiVersion: v1
echo "apiVersion: v1" >> rook-ceph-pvc-claim-test.yaml
# kind: PersistentVolumeClaim
echo "kind: PersistentVolumeClaim" >> rook-ceph-pvc-claim-test.yaml
# metadata:
echo "metadata:" >> rook-ceph-pvc-claim-test.yaml
#   name: pic-test-pvc
echo "  name: pic-test-pvc" >> rook-ceph-pvc-claim-test.yaml
# spec:
echo "spec:" >> rook-ceph-pvc-claim-test.yaml
#   accessModes:
echo "  accessModes:" >> rook-ceph-pvc-claim-test.yaml
#   - ReadWriteOnce
echo "  - ReadWriteOnce" >> rook-ceph-pvc-claim-test.yaml
#   resources:
echo "  resources:" >> rook-ceph-pvc-claim-test.yaml
#     requests:
echo "    requests:" >> rook-ceph-pvc-claim-test.yaml
#       storage: 100Gi
echo "      storage: 100Gi" >> rook-ceph-pvc-claim-test.yaml
#   storageClassName: ceph-filesystem
echo "  storageClassName: ceph-filesystem" >> rook-ceph-pvc-claim-test.yaml

# kubectl delete pvc pic-test-pvc
# kubectl apply -f ./tests/csi-s3.yaml
kubectl apply -f rook-ceph-pvc-claim-test.yaml
rm rook-ceph-pvc-claim-test.yaml
./pic wait deploy pic-test-csi-s3 default Available
kubectl logs deployment/pic-test-csi-s3

./pic expose https rook-ceph-mgr-dashboard.rook-ceph 8443 400 "" "true"
