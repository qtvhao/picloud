#!/bin/bash
set -e -o pipefail
source .env
args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "Please provide the identify file"
    exit 1
fi
# kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml
helm repo add openebs https://openebs.github.io/charts
helm repo update
# helm install openebs --namespace openebs openebs/openebs --set mayastor.enabled=true --create-namespace
# helm repo add mayastor https://openebs.github.io/mayastor-extensions/ 
# helm install mayastor mayastor/mayastor -n mayastor --create-namespace --version 2.4.0
kubectl apply -f https://openebs.github.io/charts/examples/local-hostpath/local-hostpath-pvc.yaml
kubectl apply -f https://openebs.github.io/charts/examples/local-hostpath/local-hostpath-pod.yaml
# 
echo "apiVersion: storage.k8s.io/v1" > local-hostpath-sc.yaml
echo "kind: StorageClass" >> local-hostpath-sc.yaml
echo "metadata:" >> local-hostpath-sc.yaml
echo "  name: openebs-hostpath" >> local-hostpath-sc.yaml
echo "  annotations:" >> local-hostpath-sc.yaml
echo "    openebs.io/cas-type: local" >> local-hostpath-sc.yaml
echo "    cas.openebs.io/config: |" >> local-hostpath-sc.yaml
echo "      - name: StorageType" >> local-hostpath-sc.yaml
echo "        value: hostpath" >> local-hostpath-sc.yaml
echo "      - name: BasePath" >> local-hostpath-sc.yaml
echo "        value: /var/local-hostpath" >> local-hostpath-sc.yaml
echo "provisioner: openebs.io/local" >> local-hostpath-sc.yaml
echo "reclaimPolicy: Delete" >> local-hostpath-sc.yaml
echo "volumeBindingMode: WaitForFirstConsumer" >> local-hostpath-sc.yaml
kubectl apply -f local-hostpath-sc.yaml
# 
kubectl apply -f  https://openebs.github.io/charts/hostpath-operator.yaml
kubectl apply -f https://openebs.github.io/charts/jiva-operator.yaml
# 
echo "apiVersion: openebs.io/v1alpha1" > openebs-hostpath.yaml
echo "kind: JivaVolumePolicy" >> openebs-hostpath.yaml
echo "metadata:" >> openebs-hostpath.yaml
echo "  name: example-jivavolumepolicy" >> openebs-hostpath.yaml
echo "  namespace: openebs" >> openebs-hostpath.yaml
echo "spec:" >> openebs-hostpath.yaml
echo "  replicaSC: openebs-hostpath" >> openebs-hostpath.yaml
echo "  target:" >> openebs-hostpath.yaml
echo "    replicationFactor: 3" >> openebs-hostpath.yaml
kubectl apply -f openebs-hostpath.yaml
# 
echo "apiVersion: storage.k8s.io/v1" > openebs-hostpath-sc.yaml
echo "kind: StorageClass" >> openebs-hostpath-sc.yaml
echo "metadata:" >> openebs-hostpath-sc.yaml
echo "  name: openebs-jiva-csi-sc" >> openebs-hostpath-sc.yaml
echo "provisioner: jiva.csi.openebs.io" >> openebs-hostpath-sc.yaml
echo "allowVolumeExpansion: true" >> openebs-hostpath-sc.yaml
echo "parameters:" >> openebs-hostpath-sc.yaml
echo "  cas-type: \"jiva\"" >> openebs-hostpath-sc.yaml
echo "  policy: \"example-jivavolumepolicy\"" >> openebs-hostpath-sc.yaml
kubectl apply -f openebs-hostpath-sc.yaml


echo "apiVersion: apps/v1" > rook-ceph-pvc-claim-test.yaml
echo "kind: Deployment" >> rook-ceph-pvc-claim-test.yaml
echo "metadata:" >> rook-ceph-pvc-claim-test.yaml
echo "  name: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
echo "spec:" >> rook-ceph-pvc-claim-test.yaml
echo "  replicas: 2" >> rook-ceph-pvc-claim-test.yaml
echo "  selector:" >> rook-ceph-pvc-claim-test.yaml
echo "    matchLabels:" >> rook-ceph-pvc-claim-test.yaml
echo "      app: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
echo "  template:" >> rook-ceph-pvc-claim-test.yaml
echo "    metadata:" >> rook-ceph-pvc-claim-test.yaml
echo "      creationTimestamp: null" >> rook-ceph-pvc-claim-test.yaml
echo "      labels:" >> rook-ceph-pvc-claim-test.yaml
echo "        app: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
echo "    spec:" >> rook-ceph-pvc-claim-test.yaml
echo "      containers:" >> rook-ceph-pvc-claim-test.yaml
echo "      - command:" >> rook-ceph-pvc-claim-test.yaml
echo "        - sh" >> rook-ceph-pvc-claim-test.yaml
echo "        - -c" >> rook-ceph-pvc-claim-test.yaml
echo "        - |" >> rook-ceph-pvc-claim-test.yaml
echo "          for i in 1 2 3 4 5 6 7 8 9 10 ; do" >> rook-ceph-pvc-claim-test.yaml
echo "            echo \$i" >> rook-ceph-pvc-claim-test.yaml
echo "            wget \"https://raw.githubusercontent.com/qtvhao/picloud/main/tests/steffen-b-qDZ-Xd8dX6w-unsplash.jpg\" -O \"/tmp/dir/\$i.png\"" >> rook-ceph-pvc-claim-test.yaml
echo "          done" >> rook-ceph-pvc-claim-test.yaml
echo "          sleep 1000" >> rook-ceph-pvc-claim-test.yaml
echo "        image: busybox" >> rook-ceph-pvc-claim-test.yaml
echo "        name: pic-test-csi-s3" >> rook-ceph-pvc-claim-test.yaml
echo "        volumeMounts:" >> rook-ceph-pvc-claim-test.yaml
echo "        - mountPath: /tmp/dir/" >> rook-ceph-pvc-claim-test.yaml
echo "          name: tmp-data" >> rook-ceph-pvc-claim-test.yaml
echo "      volumes:" >> rook-ceph-pvc-claim-test.yaml
echo "      - name: tmp-data" >> rook-ceph-pvc-claim-test.yaml
echo "        persistentVolumeClaim:" >> rook-ceph-pvc-claim-test.yaml
echo "          claimName: pic-test-pvc" >> rook-ceph-pvc-claim-test.yaml
echo "          readOnly: false" >> rook-ceph-pvc-claim-test.yaml
echo "" >> rook-ceph-pvc-claim-test.yaml
echo "---" >> rook-ceph-pvc-claim-test.yaml
echo "" >> rook-ceph-pvc-claim-test.yaml
echo "apiVersion: v1" >> rook-ceph-pvc-claim-test.yaml
echo "kind: PersistentVolumeClaim" >> rook-ceph-pvc-claim-test.yaml
echo "metadata:" >> rook-ceph-pvc-claim-test.yaml
echo "  name: pic-test-pvc" >> rook-ceph-pvc-claim-test.yaml
echo "spec:" >> rook-ceph-pvc-claim-test.yaml
echo "  accessModes:" >> rook-ceph-pvc-claim-test.yaml
echo "  - ReadWriteMany" >> rook-ceph-pvc-claim-test.yaml
echo "  resources:" >> rook-ceph-pvc-claim-test.yaml
echo "    requests:" >> rook-ceph-pvc-claim-test.yaml
echo "      storage: 1Gi" >> rook-ceph-pvc-claim-test.yaml
echo "  storageClassName: openebs-jiva-csi-sc" >> rook-ceph-pvc-claim-test.yaml

# kubectl delete pvc pic-test-pvc
# kubectl apply -f ./tests/csi-s3.yaml
kubectl apply -f rook-ceph-pvc-claim-test.yaml
# rm rook-ceph-pvc-claim-test.yaml

# kubectl get dsp -n mayastor
# timeout 600 ./pic wait deploy pic-test-csi-s3 default Available
exit 0
# # kubectl -n rook-ceph patch cephcluster rook-ceph --type merge -p '{"spec":{"cleanupPolicy":{"confirmation":"yes-really-destroy-data"}}}'
# # kubectl -n rook-ceph delete cephcluster rook-ceph
# # kubectl -n rook-ceph get cephcluster && echo "Deleted rook-ceph" || true
# NODES=$(kubectl get nodes -o json | jq -r "[.items[] | .metadata.annotations.\"k3s.io/internal-ip\"]")
# NODES_IP=$(echo $NODES | jq -r '.[]')
# for node in $NODES_IP; do
#    if [ -z "$node" ]; then
#       continue
#    fi
#    echo "node: $node"
#    DISKS=$(ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "lsblk -f | grep ceph_bluestore | awk '{print \$1}'")
#    if [ -z "$DISKS" ]; then
#       continue
#    fi
#    for DISKNAME in $DISKS; do
#       disk=$DISKNAME
#       # Zap the disk to a fresh, usable state (zap-all is important, b/c MBR has to be clean)
#       ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo sgdisk --zap-all /dev/$disk"
#       # Wipe a large portion of the beginning of the disk to remove more LVM metadata that may be present
#       ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo dd if=/dev/zero of=/dev/$disk bs=1M count=100 oflag=direct,dsync"
#       # Inform the OS of partition table changes
#       ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $node "sudo partprobe /dev/$disk"
#    done
# done

# # helm repo add rook-release https://charts.rook.io/release
# # helm upgrade --install --create-namespace --namespace rook-ceph rook-ceph rook-release/rook-ceph # -f values.yaml
# kubectl create \
#    -f https://raw.githubusercontent.com/rook/rook/master/deploy/examples/crds.yaml \
#    -f https://raw.githubusercontent.com/rook/rook/master/deploy/examples/common.yaml \
#    -f https://raw.githubusercontent.com/rook/rook/master/deploy/examples/operator.yaml
# # 

# # helm upgrade --install --create-namespace --namespace rook-ceph rook-ceph-cluster \
# #    --set operatorNamespace=rook-ceph rook-release/rook-ceph-cluster -f values-rook-ceph-cluster.yaml
# # rm values-rook-ceph-cluster.yaml

# echo "kind: ConfigMap" > rook-ceph-config-override.yaml
# echo "apiVersion: v1" >> rook-ceph-config-override.yaml
# echo "metadata:" >> rook-ceph-config-override.yaml
# echo "  name: rook-config-override" >> rook-ceph-config-override.yaml
# echo "  namespace: rook-ceph" >> rook-ceph-config-override.yaml
# echo "data:" >> rook-ceph-config-override.yaml
# echo "  config: |" >> rook-ceph-config-override.yaml
# echo "    [global]" >> rook-ceph-config-override.yaml
# echo "      osd_pool_default_size = 1" >> rook-ceph-config-override.yaml
# echo "      mon_warn_on_pool_no_redundancy = false" >> rook-ceph-config-override.yaml
# echo "      bdev_flock_retry = 20" >> rook-ceph-config-override.yaml
# echo "      bluefs_buffered_io = false" >> rook-ceph-config-override.yaml
# echo "      mon_data_avail_warn = 10" >> rook-ceph-config-override.yaml
# echo "---" >> rook-ceph-config-override.yaml
# echo "apiVersion: ceph.rook.io/v1" >> rook-ceph-config-override.yaml
# echo "kind: CephCluster" >> rook-ceph-config-override.yaml
# echo "metadata:" >> rook-ceph-config-override.yaml
# echo "  name: my-cluster" >> rook-ceph-config-override.yaml
# echo "  namespace: rook-ceph" >> rook-ceph-config-override.yaml
# echo "spec:" >> rook-ceph-config-override.yaml
# echo "  dataDirHostPath: /var/lib/rook" >> rook-ceph-config-override.yaml
# echo "  cephVersion:" >> rook-ceph-config-override.yaml
# echo "    image: quay.io/ceph/ceph:v18" >> rook-ceph-config-override.yaml
# echo "    allowUnsupported: true" >> rook-ceph-config-override.yaml
# echo "  mon:" >> rook-ceph-config-override.yaml
# echo "    count: 1" >> rook-ceph-config-override.yaml
# echo "    allowMultiplePerNode: true" >> rook-ceph-config-override.yaml
# echo "  mgr:" >> rook-ceph-config-override.yaml
# echo "    count: 1" >> rook-ceph-config-override.yaml
# echo "    allowMultiplePerNode: true" >> rook-ceph-config-override.yaml
# echo "  dashboard:" >> rook-ceph-config-override.yaml
# echo "    enabled: true" >> rook-ceph-config-override.yaml
# echo "  crashCollector:" >> rook-ceph-config-override.yaml
# echo "    disable: true" >> rook-ceph-config-override.yaml
# echo "  storage:" >> rook-ceph-config-override.yaml
# echo "    useAllNodes: true" >> rook-ceph-config-override.yaml
# echo "    useAllDevices: true" >> rook-ceph-config-override.yaml
# echo "    #deviceFilter:" >> rook-ceph-config-override.yaml
# echo "  monitoring:" >> rook-ceph-config-override.yaml
# echo "    enabled: false" >> rook-ceph-config-override.yaml
# echo "  healthCheck:" >> rook-ceph-config-override.yaml
# echo "    daemonHealth:" >> rook-ceph-config-override.yaml
# echo "      mon:" >> rook-ceph-config-override.yaml
# echo "        interval: 45s" >> rook-ceph-config-override.yaml
# echo "        timeout: 600s" >> rook-ceph-config-override.yaml
# echo "  priorityClassNames:" >> rook-ceph-config-override.yaml
# echo "    all: system-node-critical" >> rook-ceph-config-override.yaml
# echo "    mgr: system-cluster-critical" >> rook-ceph-config-override.yaml
# echo "  disruptionManagement:" >> rook-ceph-config-override.yaml
# echo "    managePodBudgets: true" >> rook-ceph-config-override.yaml
# echo "---" >> rook-ceph-config-override.yaml
# echo "apiVersion: ceph.rook.io/v1" >> rook-ceph-config-override.yaml
# echo "kind: CephBlockPool" >> rook-ceph-config-override.yaml
# echo "metadata:" >> rook-ceph-config-override.yaml
# echo "  name: builtin-mgr" >> rook-ceph-config-override.yaml
# echo "  namespace: rook-ceph" >> rook-ceph-config-override.yaml
# echo "spec:" >> rook-ceph-config-override.yaml
# echo "  name: .mgr" >> rook-ceph-config-override.yaml
# echo "  replicated:" >> rook-ceph-config-override.yaml
# echo "    size: 1" >> rook-ceph-config-override.yaml
# echo "    requireSafeReplicaSize: false" >> rook-ceph-config-override.yaml

# # echo "apiVersion: ceph.rook.io/v1" > rook-ceph-fs-test.yaml
# # echo "kind: CephFilesystem" >> rook-ceph-fs-test.yaml
# # echo "metadata:" >> rook-ceph-fs-test.yaml
# # echo "  name: myfs" >> rook-ceph-fs-test.yaml
# # echo "  namespace: rook-ceph" >> rook-ceph-fs-test.yaml
# # echo "spec:" >> rook-ceph-fs-test.yaml
# # echo "  metadataPool:" >> rook-ceph-fs-test.yaml
# # echo "    replicated:" >> rook-ceph-fs-test.yaml
# # echo "      size: 1" >> rook-ceph-fs-test.yaml
# # echo "      requireSafeReplicaSize: false" >> rook-ceph-fs-test.yaml
# # echo "  dataPools:" >> rook-ceph-fs-test.yaml
# # echo "    - name: replicated" >> rook-ceph-fs-test.yaml
# # echo "      failureDomain: osd" >> rook-ceph-fs-test.yaml
# # echo "      replicated:" >> rook-ceph-fs-test.yaml
# # echo "        size: 1" >> rook-ceph-fs-test.yaml
# # echo "        requireSafeReplicaSize: false" >> rook-ceph-fs-test.yaml
# # echo "  preserveFilesystemOnDelete: false" >> rook-ceph-fs-test.yaml
# # echo "  metadataServer:" >> rook-ceph-fs-test.yaml
# # echo "    activeCount: 1" >> rook-ceph-fs-test.yaml
# # echo "    activeStandby: true" >> rook-ceph-fs-test.yaml
# # 
# kubectl create -f https://raw.githubusercontent.com/rook/rook/master/deploy/examples/csi/rbd/storageclass-test.yaml
# kubectl apply -f rook-ceph-config-override.yaml
# rm rook-ceph-config-override.yaml
# # kubectl apply -f rook-ceph-fs-test.yaml
# # rm rook-ceph-fs-test.yaml
# # 
# kubectl -n rook-ceph get pod
# ./pic wait deploy rook-ceph-operator rook-ceph Available
# # ./pic wait deploy rook-ceph-tools rook-ceph Available
# ./pic wait deploy rook-ceph-mon-a rook-ceph Available
# ./pic wait deploy csi-rbdplugin-provisioner rook-ceph Available
# ./pic wait deploy csi-cephfsplugin-provisioner rook-ceph Available
# ./pic wait deploy rook-ceph-mgr-a rook-ceph Available
# # ./pic wait deploy rook-ceph-osd-0 rook-ceph Available
# # ./pic wait deploy rook-ceph-mds-ceph-filesystem-a rook-ceph Available
# kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo
# # 
# # 
# kubectl -n rook-ceph rollout restart deploy rook-ceph-operator
# kubectl logs deployment/pic-test-csi-s3

# ./pic expose http rook-ceph-mgr-dashboard.rook-ceph 7000 400 "" "true"
