#!/bin/bash

set -eo pipefail
args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "Please provide the identify file"
    exit 1
fi
if [ ! -f $IDENTIFY_FILE ]; then
    echo "If you've already booted machines use ./pic FAI (Fully Automatic Installation), please upload $IDENTIFY_FILE in your github account"
    exit 1
fi
chmod 0400 $IDENTIFY_FILE
./pic alias-kubectl
#
PIC_DIR="$HOME/.pic"

echo "Uninstalling k3s"

NODES_JSON=$(kubectl get nodes -o json || echo "")
NODES=$(echo $NODES_JSON | jq -r "[.items[] | .metadata.annotations.\"k3s.io/internal-ip\"]")
NODES_IP=$(echo $NODES | jq -r '.[]')
for node in $NODES_IP; do
    if [ -z "$node" ]; then
        continue
    fi
    echo "Uninstalling k3s from $node"
    FIRST_IP_OF_NODE=$(echo $node | cut -d, -f1)
    (ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $FIRST_IP_OF_NODE "timeout 120 k3s-uninstall.sh" || true)
    # reboot node, except the current node
    if [ "$FIRST_IP_OF_NODE" != `./pic hostname` ]; then
        (ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $FIRST_IP_OF_NODE "reboot" || true)
    fi
done
for node in $NODES_IP; do
    if [ -z "$node" ]; then
        continue
    fi
    FIRST_IP_OF_NODE=$(echo $node | cut -d, -f1)
    echo "Waiting for $node to reboot"
    while true; do
        # check if the node is up
        ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $FIRST_IP_OF_NODE "uptime" && break
        sleep 10
    done
done
#
set -xeo pipefail
K8S_MASTER_NODE_IP=$(hostname -I | cut -d' ' -f1)
echo "K8S_MASTER_NODE_IP: $K8S_MASTER_NODE_IP"
echo "Installing k3s"
curl -fsSL https://get.docker.com -o install-docker.sh
docker ps >/dev/null 2>&1 || sh install-docker.sh
rm install-docker.sh || true

helm version >/dev/null 2>&1 ||
    (curl https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz -o helm-v3.13.1-linux-amd64.tar.gz && tar -xvf helm-v3.13.1-linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 linux-amd64/helm)
rm helm-v3.13.1-linux-amd64.tar.gz || true
cloudflared version ||
    (curl https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared-linux-amd64.deb && dpkg -i cloudflared-linux-amd64.deb)
k9s info >/dev/null 2>&1 ||
    (wget -nc https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz -O k9s_Linux_amd64.tar.gz && tar -xvf k9s_Linux_amd64.tar.gz k9s && mv k9s /usr/local/bin/ && chmod +x /usr/local/bin/k9s)
rm k9s_Linux_amd64.tar.gz || true
( stat $HOME/k3s || wget "https://github.com/k3s-io/k3s/releases/download/v1.29.1+k3s2/k3s" -O $HOME/k3s) || (echo "Cannot download k3s. Please check your internet connection" && exit 1)
export NODE_IP=$(hostname -I | cut -d' ' -f1)
export K3S_NODE_NAME="ip-"$(echo "$NODE_IP" | tr . -)
# 
ssh-keygen -R $NODE_IP || true
ssh-keyscan -H $NODE_IP >> ~/.ssh/known_hosts
( time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP")
#
echo "Installing k3s"
echo "K3S_NODE_NAME: $K3S_NODE_NAME"
rm -rf /var/lib/rancher/ || true
k3s-killall.sh || true
k3s-uninstall.sh || true
cp $HOME/k3s /usr/local/bin/ && chmod +x /usr/local/bin/k3s
NEW_INOTIFY_MAX_USER_WATCHES=95956992
NEW_INOTIFY_MAX_USER_INSTANCES=32768
NEW_INOTIFY_MAX_QUEUED_EVENTS=4194304
LOCAL_CONF="/etc/sysctl.d/local.conf"
echo "" > $LOCAL_CONF
echo "fs.inotify.max_user_watches=$NEW_INOTIFY_MAX_USER_WATCHES" >> $LOCAL_CONF
echo "fs.inotify.max_user_instances=$NEW_INOTIFY_MAX_USER_INSTANCES" >> $LOCAL_CONF
echo "fs.inotify.max_queued_events=$NEW_INOTIFY_MAX_QUEUED_EVENTS" >> $LOCAL_CONF
service procps force-reload

time (curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_DOWNLOAD=true K3S_NODE_NAME=$K3S_NODE_NAME sh -s - server --cluster-init --embedded-registry && time systemctl restart k3s)
K3S_URL="https://$K8S_MASTER_NODE_IP:6443"
while ! cat /var/lib/rancher/k3s/server/token >/dev/null 2>&1; do
    echo "Waiting for K3S token"
    sleep 1
done
K3S_TOKEN=$(cat /var/lib/rancher/k3s/server/token)

mkdir -p ~/.kube
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
while true; do
    kubectl label node $K3S_NODE_NAME added-numberth=add-0 && break || echo "Retrying to label node"
    sleep 10
done

kubectl get node -o wide

jq -n --arg k3s_url "$K3S_URL" --arg k3s_token "$K3S_TOKEN" '{"k3s_url":$k3s_url,"k3s_token":$k3s_token}' >"$PIC_DIR/k3s.json"
./pic status
stat ~/picloud/.git || git clone https://github.com/qtvhao/picloud/ ~/picloud/
cd ~/picloud/ && ./pic setup-static-IP

echo
echo "To join a worker node to this cluster, run the following command:"
echo "./pic join-k3s <node-ip> <identify-file>"
