NODES=$(kubectl get nodes -o json | jq -r '.items[].metadata.name')
echo "Found nodes: $NODES"
# loop through nodes and k3s-agent-uninstall
for NODE in $NODES; do
    match="192.168."
    NODE_IP=$(kubectl get node $NODE -o json | jq -r '.status.addresses[] | select(.type == "InternalIP") | .address' | head -n1)
    if [[ $NODE_IP == $match* ]]; then
        echo "Uninstalling k3s from $NODE"
        ssh $NODE_IP "k3s-agent-uninstall.sh" > /dev/null 2>&1 || true
        kubectl delete node $NODE
    fi
done
set -e
args=("$@")
K8S_MASTER_NODE_IP=$(hostname -I | cut -d' ' -f1)
echo "K8S_MASTER_NODE_IP: $K8S_MASTER_NODE_IP"
echo "Installing k3s"
curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
rm install-docker.sh || true
kubectl version > /dev/null 2>&1 || \
    (curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl)
helm version > /dev/null 2>&1 || \
    (curl https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz -o helm-v3.13.1-linux-amd64.tar.gz && tar -xvf helm-v3.13.1-linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 linux-amd64/helm)
cloudflared  version || \
    (curl https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared-linux-amd64.deb && dpkg -i cloudflared-linux-amd64.deb)
./k9s info > /dev/null 2>&1 || \
    (wget -nc https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz -O k9s_Linux_amd64.tar.gz && tar -xvf k9s_Linux_amd64.tar.gz k9s)
rm k9s_Linux_amd64.tar.gz || true
docker network inspect picloud >/dev/null 2>&1 || docker network create picloud
docker inspect picloud-k3s-server >/dev/null 2>&1 && docker rm -f picloud-k3s-server || echo "picloud-k3s-server not found"
docker run -d --restart=unless-stopped \
    --privileged \
    --name picloud-k3s-server \
    --network picloud \
    -p 6448:6443 \
    -e INSTALL_K3S_EXEC="--flannel-backend=none --no-flannel" \
    rancher/k3s:v1.27.6-k3s1 \
    server --tls-san k3s-server-1 --tls-san $K8S_MASTER_NODE_IP --advertise-address $K8S_MASTER_NODE_IP --advertise-port 6448 \
    --node-name control-plane-master --disable-network-policy

K3S_URL="https://$K8S_MASTER_NODE_IP:6448"
while ! docker exec picloud-k3s-server /bin/sh -c "cat /var/lib/rancher/k3s/server/token" >/dev/null 2>&1; do
    echo "Waiting for K3S token"
    sleep 5
done
K3S_TOKEN=$(docker exec picloud-k3s-server /bin/sh -c "cat /var/lib/rancher/k3s/server/token")
docker cp picloud-k3s-server:/var/lib/rancher/k3s/server/tls/server-ca.crt /usr/local/share/ca-certificates/kubernetes.crt
update-ca-certificates
mkdir -p ~/.kube
docker cp picloud-k3s-server:/etc/rancher/k3s/k3s.yaml ~/.kube/config
sed -i "s/127.0.0.1:6443/127.0.0.1:6448/g" ~/.kube/config

./pic expose
# kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
echo write json $K3S_URL and $K3S_TOKEN to k3s.json
jq -n --arg k3s_url "$K3S_URL" --arg k3s_token "$K3S_TOKEN" '{"k3s_url":$k3s_url,"k3s_token":$k3s_token}' >k3s.json
./pic status
# loop through $args
for arg in $args; do
    ./pic join-k3s $arg
done
nodes=$(./pic list-nodename | awk '{print $1}' | tr '\n' ' ')
for node in $nodes; do
    if [ -z "$node" ]; then
        continue
    fi
    ./pic join-k3s "$node"
done

echo
echo "To join a worker node to this cluster, run the following command:"
echo "./pic join-k3s <node-ip>"
