args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "Please provide the identify file"
    exit 1
fi
if [ ! -f $IDENTIFY_FILE ]; then
    echo "If you've already booted machines use ./pic FAI (Fully Automatic Installation), please upload $IDENTIFY_FILE in your github account"
    exit 1
fi
# 
nodesOnLan=$(./pic list-nodename $IDENTIFY_FILE | awk '{print $1}' | tr '\n' ' ')
for node in $nodesOnLan; do
    if [ -z "$nodesOnLan" ]; then
        continue
    fi
    ssh -t -i $IDENTIFY_FILE \
        -o PasswordAuthentication=no \
        "$node" "warp-cli register"
    ssh -t -i $IDENTIFY_FILE \
        -o PasswordAuthentication=no \
        "$node" "warp-cli connect"
done

# 
echo "IDENTIFY_FILE: $IDENTIFY_FILE"
NODES=$(kubectl get nodes -o json | jq -r '.items[].metadata.name')
echo "Found nodes: $NODES"
# loop through nodes and k3s-agent-uninstall
for NODE in $NODES; do
    match="192.168."
    echo "NODE: $NODE"
    NODE_IP=$(kubectl get node $NODE -o json | jq -r '.status.addresses[] | select(.type == "InternalIP") | .address' | head -n1)
    if [[ $NODE_IP == $match* ]]; then
        echo "Uninstalling k3s from $NODE"
        ssh $NODE_IP "k3s-agent-uninstall.sh" || true
        ssh $NODE_IP "k3s-uninstall.sh" || true
        kubectl delete node $NODE
    fi
done
# k3s server uninstall
echo "Uninstalling k3s from master node"
k3s-killall.sh
echo "k3s-agent-uninstall.sh"
k3s-agent-uninstall.sh
echo "k3s-uninstall.sh"
k3s-uninstall.sh
echo "systemctl disable k3s-agent"
systemctl disable k3s-agent
echo "systemctl disable k3s"
systemctl disable k3s
set -e
K8S_MASTER_NODE_IP=$(hostname -I | cut -d' ' -f1)
echo "K8S_MASTER_NODE_IP: $K8S_MASTER_NODE_IP"
echo "Installing k3s"
curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
rm install-docker.sh || true
kubectl > /dev/null 2>&1 || \
    (curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl)
helm version > /dev/null 2>&1 || \
    (curl https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz -o helm-v3.13.1-linux-amd64.tar.gz && tar -xvf helm-v3.13.1-linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 linux-amd64/helm)
cloudflared  version || \
    (curl https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared-linux-amd64.deb && dpkg -i cloudflared-linux-amd64.deb)
./k9s info > /dev/null 2>&1 || \
    (wget -nc https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz -O k9s_Linux_amd64.tar.gz && tar -xvf k9s_Linux_amd64.tar.gz k9s)
rm k9s_Linux_amd64.tar.gz || true
docker network inspect picloud >/dev/null 2>&1 || docker network create picloud
systemctl status nm-cloud-setup.service || apt install -y network-manager

curl -sfL https://get.k3s.io | sh -s - server --cluster-init
# /etc/systemd/system/k3s.service
systemctl restart k3s
K3S_URL="https://$K8S_MASTER_NODE_IP:6443"
while ! cat /var/lib/rancher/k3s/server/token >/dev/null 2>&1; do
    echo "Waiting for K3S token"
    sleep 5
done
K3S_TOKEN=$(cat /var/lib/rancher/k3s/server/token)
cp /var/lib/rancher/k3s/server/tls/server-ca.crt /usr/local/share/ca-certificates/kubernetes.crt
update-ca-certificates
mkdir -p ~/.kube
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
kubectl get node -o wide

./pic expose
echo write json $K3S_URL and $K3S_TOKEN to k3s.json
jq -n --arg k3s_url "$K3S_URL" --arg k3s_token "$K3S_TOKEN" '{"k3s_url":$k3s_url,"k3s_token":$k3s_token}' >k3s.json
./pic status

nodes=$(./pic list-nodename $IDENTIFY_FILE | awk '{print $1}' | tr '\n' ' ')
for node in $nodes; do
    if [ "$K8S_MASTER_NODE_IP" == "$node" ]; then
        continue
    fi
    if [ -z "$node" ]; then
        continue
    fi
    ./pic join-k3s "$node" $IDENTIFY_FILE
done
kubectl get node -o wide

echo
echo "To join a worker node to this cluster, run the following command:"
echo "./pic join-k3s <node-ip> <identify-file>"
