#!/bin/bash

set -xeo pipefail
args=("$@")
IDENTIFY_FILE=${args[0]}
if [ -z "$IDENTIFY_FILE" ]; then
    echo "Please provide the identify file"
    exit 1
fi
if [ ! -f $IDENTIFY_FILE ]; then
    echo "If you've already booted machines use ./pic FAI (Fully Automatic Installation), please upload $IDENTIFY_FILE in your github account"
    exit 1
fi
chmod 0400 $IDENTIFY_FILE
./pic alias-kubectl
#
PIC_DIR="$HOME/.pic"

echo "Uninstalling k3s"
echo "- Uninstalling longhorn"
if kubectl get ns;then 
namespaces=$(kubectl get ns -o json | jq -r '.items[].metadata.name')
echo "namespaces: $namespaces"
removable_namespaces=$(echo "$namespaces" | grep -v "kube-system\|longhorn-system\|kube-public\|kube-node-lease")
echo "removable_namespaces: $removable_namespaces"
MATCHING="No resources found in"
for namespace in $removable_namespaces; do
    RNs="deployment statefulset daemonset job cronjob pvc service secret configmap ingress"
    for RN in $RNs; do
        MATCHING="No resources found in"
        if [ "x0" == "x$(kubectl get $RN -n $namespace | grep "$MATCHING" | wc -l)" ]; then
            echo "No $RN in $namespace"
        else
            echo "Deleting $RN in $namespace"
            kubectl get $RN -n $namespace -o json | jq -r '.items[].metadata.name' | xargs -I {} kubectl delete $RN -n $namespace {}
        fi
    done
done

while true; do
    if [ "x0" == "x$(kubectl get pv | grep "No resources found" | wc -l)" ]; then
        echo "All pv are released"
        break
    else
        echo "Waiting for all pv to be released"
        sleep 2
    fi
done
kubectl -n longhorn-system patch -p '{"value": "true"}' --type=merge lhs deleting-confirmation-flag || true

echo "1. Deleting longhorn"
timeout 120 kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.2/deploy/longhorn.yaml || true

echo "2. Uninstalling longhorn"
kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.2/uninstall/uninstall.yaml || true

kubectl delete -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.2/deploy/longhorn.yaml || true

echo "3. Waiting for longhorn to be uninstalled"
(kubectl get job longhorn-uninstall -n longhorn-system && \
    ./pic wait job longhorn-uninstall longhorn-system Complete) || true
fi

NODES_JSON=$(kubectl get nodes -o json || echo "")
NODES=$(echo $NODES_JSON | jq -r "[.items[] | .metadata.annotations.\"k3s.io/internal-ip\"]")
NODES_IP=$(echo $NODES | jq -r '.[]')
for node in $NODES_IP; do
    if [ -z "$node" ]; then
        continue
    fi
    echo "Uninstalling k3s from $node"
    FIRST_IP_OF_NODE=$(echo $node | cut -d, -f1)
    (ssh -o StrictHostKeyChecking=no -i $IDENTIFY_FILE $FIRST_IP_OF_NODE "timeout 120 k3s-uninstall.sh" || true) &
done
wait
#
set -xeo pipefail
K8S_MASTER_NODE_IP=$(hostname -I | cut -d' ' -f1)
echo "K8S_MASTER_NODE_IP: $K8S_MASTER_NODE_IP"
echo "Installing k3s"
curl -fsSL https://get.docker.com -o install-docker.sh
docker ps >/dev/null 2>&1 || sh install-docker.sh
rm install-docker.sh || true
# kubectl >/dev/null 2>&1 ||
    # (curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" >/usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl)
helm version >/dev/null 2>&1 ||
    (curl https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz -o helm-v3.13.1-linux-amd64.tar.gz && tar -xvf helm-v3.13.1-linux-amd64.tar.gz -C /usr/local/bin/ --strip-components=1 linux-amd64/helm)
rm helm-v3.13.1-linux-amd64.tar.gz || true
cloudflared version ||
    (curl https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared-linux-amd64.deb && dpkg -i cloudflared-linux-amd64.deb)
k9s info >/dev/null 2>&1 ||
    (wget -nc https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz -O k9s_Linux_amd64.tar.gz && tar -xvf k9s_Linux_amd64.tar.gz k9s && mv k9s /usr/local/bin/ && chmod +x /usr/local/bin/k9s)
rm k9s_Linux_amd64.tar.gz || true
( stat $HOME/k3s || wget "https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s1/k3s" -O $HOME/k3s) || (echo "Cannot download k3s. Please check your internet connection" && exit 1)
cp $HOME/k3s /usr/local/bin/ && chmod +x /usr/local/bin/k3s
export NODE_IP=$(hostname -I | cut -d' ' -f1)
export K3S_NODE_NAME="ip-"$(echo "$NODE_IP" | tr . -)
# 
ssh-keygen -R $NODE_IP || true
ssh-keyscan -H $NODE_IP >> ~/.ssh/known_hosts
( time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP")
#
echo "Installing k3s"
echo "K3S_NODE_NAME: $K3S_NODE_NAME"
rm -rf /var/lib/rancher/ || true
k3s-killall.sh || true
k3s-uninstall.sh || true
time (curl -sfL https://get.k3s.io | INSTALL_K3S_SKIP_DOWNLOAD=true K3S_NODE_NAME=$K3S_NODE_NAME sh -s - server --cluster-init && time systemctl restart k3s) &
K3S_URL="https://$K8S_MASTER_NODE_IP:6443"
while ! cat /var/lib/rancher/k3s/server/token >/dev/null 2>&1; do
    echo "Waiting for K3S token"
    sleep 1
done
K3S_TOKEN=$(cat /var/lib/rancher/k3s/server/token)

mkdir -p ~/.kube
cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
while true; do
    kubectl label node $K3S_NODE_NAME added-numberth=add-0 && break || echo "Retrying to label node"
    sleep 10
done

kubectl get node -o wide

jq -n --arg k3s_url "$K3S_URL" --arg k3s_token "$K3S_TOKEN" '{"k3s_url":$k3s_url,"k3s_token":$k3s_token}' >"$PIC_DIR/k3s.json"
./pic status

echo
echo "To join a worker node to this cluster, run the following command:"
echo "./pic join-k3s <node-ip> <identify-file>"
