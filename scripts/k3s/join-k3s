args=("$@")
NODE_IP=${args[0]}
IDENTIFY_FILE=${args[1]}
echo "Connecting to $NODE_IP"
if [ -z "$NODE_IP" ]; then
    echo "NODE_IP is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
if [ -z "$IDENTIFY_FILE" ]; then
    echo "IDENTIFY_FILE is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
if [ ! -f $IDENTIFY_FILE ]; then
    echo "$IDENTIFY_FILE does not exist. Please create a ssh key pair in order to connect to the new machine."
    echo "If you've already booted machines use ./pic FAI (Fully Automatic Installation), please upload ./id_rsa in your github account into the current directory"
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
set -e
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "hostname" || exit 1
echo "Connected to $NODE_IP"
cp /var/lib/rancher/k3s/server/tls/server-ca.crt /usr/local/share/ca-certificates/kubernetes.crt

# ssh -i $IDENTIFY_FILE \
#     -o PasswordAuthentication=no \
#     "$NODE_IP" "apt update && apt-get install ca-certificates curl -y"
scp  \
    -i $IDENTIFY_FILE \
    /etc/resolv.conf $NODE_IP:/etc/resolv.conf
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "warp-cli connect || true"
scp \
    -i $IDENTIFY_FILE \
    /usr/local/share/ca-certificates/kubernetes.crt "$NODE_IP":/usr/local/share/ca-certificates/kubernetes.crt
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "update-ca-certificates"
K3S_URL=$(jq -r '.k3s_url' k3s.json)
K3S_TOKEN=$(jq -r '.k3s_token' k3s.json)
echo "K3S_URL: $K3S_URL"
echo "K3S_TOKEN: $K3S_TOKEN"
export K3S_NODE_NAME="ip-"$(echo "$NODE_IP" | tr . -)
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "sudo systemctl restart k3s" || true
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "k3s-killall.sh;k3s-agent-uninstall.sh;k3s-uninstall.sh;systemctl disable k3s-agent;systemctl disable k3s-agent" || true
# 
NODE_COMMAND="curl -fL https://get.k3s.io | K3S_NODE_NAME=$K3S_NODE_NAME sh -s - server --server $K3S_URL --token $K3S_TOKEN"
echo "Joining worker node to this cluster"
echo "NODE_IP: $NODE_IP"
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "$NODE_COMMAND"
echo "K3S_NODE_NAME: $K3S_NODE_NAME"
COUNT_NODES=$(kubectl get nodes -o json | jq -r '.items | length')
echo "COUNT_NODES: $COUNT_NODES"
kubectl label node $K3S_NODE_NAME added-numberth=$COUNT_NODES
# ssh -i $IDENTIFY_FILE \
#     -o PasswordAuthentication=no \
#     "$NODE_IP" "sudo systemctl restart k3s-agent"
echo "Joined worker node to this cluster"
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "(iptables -h >/dev/null 2>&1 && iptables -w -P FORWARD ACCEPT) || true"
NODE_NAME=$(ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "hostname")

kubectl get pod/test-connectivity && kubectl delete pod/test-connectivity || echo "" ; \
kubectl run test-connectivity --image=rancher/curl \
    --restart=OnFailure \
    --overrides='{"spec": { "nodeSelector": {"kubernetes.io/hostname": "'$NODE_NAME'"}}}' \
    http://example.com

while true; do
    kubectl -n kube-system rollout restart deployment coredns && break || echo "Retrying to restart coredns"
    sleep 5
done

waitPodToSucceeded() {
    kubectl get pod -l run=test-connectivity -o json | jq -r ".items[0].status.containerStatuses[0].state.terminated.reason"
}
while [ "$(waitPodToSucceeded)" != "Completed" ]; do
    echo "Waiting for test-connectivity pod to complete. Status: ""$(waitPodToSucceeded)"
    if [ "Error" == "$(waitPodToSucceeded)" ]; then
        echo "Error running test-connectivity pod"
    fi
    sleep 5
done
echo "Node $NODE_NAME is ready"
