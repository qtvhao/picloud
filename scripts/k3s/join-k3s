PIC_DIR="$HOME/.pic"
args=("$@")
NODE_IP=${args[0]}
IDENTIFY_FILE=${args[1]}
echo "Connecting to $NODE_IP"
if [ -z "$NODE_IP" ]; then
    echo "NODE_IP is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
if [ -z "$IDENTIFY_FILE" ]; then
    echo "IDENTIFY_FILE is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
if [ ! -f $IDENTIFY_FILE ]; then
    echo "$IDENTIFY_FILE does not exist. Please create a ssh key pair in order to connect to the new machine."
    echo "If you've already booted machines use ./pic FAI (Fully Automatic Installation), please upload ./id_rsa in your github account into the current directory"
    echo "Usage: ./pic join-k3s NODE_IP IDENTIFY_FILE"
    exit 1
fi
set -xeo pipefail
REGISTRY_FOLDER="/var/lib/registry/"
# if $REGISTRY_FOLDER exists
if [ -d "$REGISTRY_FOLDER" ]; then
    ssh -i $IDENTIFY_FILE $NODE_IP "rm -rf $REGISTRY_FOLDER" || true
    ssh -i $IDENTIFY_FILE $NODE_IP "mkdir -p $REGISTRY_FOLDER" || true
    time rsync -avz -q -e "ssh -i $IDENTIFY_FILE" $REGISTRY_FOLDER $NODE_IP:$REGISTRY_FOLDER
    # set quite mode, set -q
fi

cp /var/lib/rancher/k3s/server/tls/server-ca.crt /usr/local/share/ca-certificates/kubernetes.crt

ssh -i $IDENTIFY_FILE \
    "$NODE_IP" "rm -rf /var/lib/rook/ || true"
echo "Connected to $NODE_IP"
# 
scp  \
    -i $IDENTIFY_FILE \
    /etc/resolv.conf $NODE_IP:/etc/resolv.conf &
scp \
    -i $IDENTIFY_FILE \
    /usr/local/share/ca-certificates/kubernetes.crt "$NODE_IP":/usr/local/share/ca-certificates/kubernetes.crt
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "update-ca-certificates"
K3S_URL=$(jq -r '.k3s_url' "$PIC_DIR/k3s.json")
K3S_TOKEN=$(jq -r '.k3s_token' "$PIC_DIR/k3s.json")
echo "K3S_URL: $K3S_URL"
echo "K3S_TOKEN: $K3S_TOKEN"
export K3S_NODE_NAME="ip-"$(echo "$NODE_IP" | tr . -)
# 

ssh -i $IDENTIFY_FILE -o PasswordAuthentication=no "$NODE_IP" "systemctl enable --now iscsid"

ssh -i $IDENTIFY_FILE -o PasswordAuthentication=no "$NODE_IP" "modprobe iscsi_tcp"

ssh -i $IDENTIFY_FILE -o PasswordAuthentication=no "$NODE_IP" "echo iscsi_tcp >/etc/modules-load.d/iscsi-tcp.conf"
ssh -i $IDENTIFY_FILE \
    "$NODE_IP" "reboot"
while true; do
    sleep 10
    ssh -i $IDENTIFY_FILE \
        -o PasswordAuthentication=no \
        "$NODE_IP" "hostname" && break || echo "Retrying to connect to $NODE_IP"
done
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "k3s-uninstall.sh;systemctl stop k3s;systemctl disable k3s" || true
# 
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "stat \$HOME/k3s || \
    (wget "https://github.com/k3s-io/k3s/releases/download/v1.27.7+k3s1/k3s" -O \$HOME/k3s) || (echo "Cannot download k3s. Please check your internet connection" && exit 1);
    cp \$HOME/k3s /usr/local/bin/ && chmod +x /usr/local/bin/k3s;" || exit 1

( time ./pic Registry-as-a-pull-through-cache "$IDENTIFY_FILE" "$NODE_IP")
NODE_COMMAND="curl -fL https://get.k3s.io | INSTALL_K3S_SKIP_DOWNLOAD=true K3S_NODE_NAME=$K3S_NODE_NAME sh -s - server --server $K3S_URL --token $K3S_TOKEN"
echo "Joining worker node to this cluster"
echo "NODE_IP: $NODE_IP"
ssh -i $IDENTIFY_FILE \
    -o PasswordAuthentication=no \
    "$NODE_IP" "$NODE_COMMAND"
echo "K3S_NODE_NAME: $K3S_NODE_NAME"
COUNT_NODES=$(kubectl get nodes -o json | jq -r '.items | length')
echo "COUNT_NODES: $COUNT_NODES"
while true; do
    sleep 10
    kubectl label node $K3S_NODE_NAME --overwrite added-numberth=add-$COUNT_NODES && break || echo "Retrying to label node"
done

echo "Node $K3S_NODE_NAME is ready"
