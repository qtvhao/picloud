#!/bin/bash
docker ps > /dev/null 2>&1 || curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
stat ~/.ssh/id_rsa.pub || ssh-keygen
set -xeo pipefail
rm time.log > /dev/null 2>&1 || true
rm fai-cd.log > /dev/null 2>&1 || true
rm fai-mirror.log > /dev/null 2>&1 || true
rm fai-setup.log > /dev/null 2>&1 || true
args=("$@")
HOSTNAME=${args[0]}
GITHUB_USERNAME=${args[1]}
IDENTITY_FILE=${args[2]}

if [ -z "$GITHUB_USERNAME" ]; then
    echo "In order to connect to machines, you need to add your public ssh key to github."
    echo "Visit https://github.com/settings/keys to add your public ssh key."
    echo "GITHUB_USERNAME is empty. Specify a github username for the new machine."
    echo "Usage: ./pic fai HOSTNAME GITHUB_USERNAME"
    exit 1
fi
if [ -z "$HOSTNAME" ]; then
    echo "HOSTNAME is empty. Specify a hostname for the new machine."
    echo "Usage: ./pic fai HOSTNAME"
    exit 1
fi
echo "HOSTNAME: $HOSTNAME"
#
export cl="DEBIAN,DHCPC,DEMO,FAIBASE,BOOKWORM,ONE,FAIME,GRUB_PC,GRUB_EFI,AMD64"
docker build -t install-fai-packages -f ./fai/Dockerfile.install-fai-packages .
if [ -d "/srv/fai/nfsroot/" ]; then
    rm -rf /srv/fai/nfsroot/*
fi
if [ -d "/srv/fai/config/" ]; then
    rm -rf /srv/fai/config/*
fi
# Create the nfsroot
docker rm -f fai-setup || true
docker run \
    --privileged \
    -v ./var-log-fai/:/var/log/fai/ \
    -v /srv/fai/config:/srv/fai/config/ \
    -v /srv/fai/nfsroot/:/srv/fai/nfsroot/ \
    --network host \
    --name fai-setup \
    install-fai-packages \
    bash -c "fai-setup -vf"
wget https://github.com/$GITHUB_USERNAME.keys -O /srv/fai/config/files/root-ssh-key/DEBIAN
# /var/log/fai/remote-logs/.ssh/id_rsa.pub is the public key of the machine
# fai-setup has created the LOGUSER, the nfsroot and has added additional lines to /etc/exports. The subdirectories added to /etc/exports are exported via NFS v3, so all install clients in the same subnet can mount them via NFS.
docker commit fai-setup fai-setup
docker rm -f fai-setup || true

docker rm -f fai-mk-configspace || true
docker run \
    --privileged \
    -v ./var-log-fai/:/var/log/fai/ \
    -v /srv/fai/config:/srv/fai/config/ \
    -v /srv/fai/nfsroot/:/srv/fai/nfsroot/ \
    --network host \
    --name fai-mk-configspace \
    fai-setup \
    bash -c "fai-mk-configspace"

APTPROXY=http://192.168.1.3:3142
echo "APTPROXY=$APTPROXY" >> /srv/fai/config/class/DEBIAN.var
curl http://192.168.1.3:3142 > /dev/null
sed -i 's/LOGUSER=/#LOGUSER=/g' /srv/fai/nfsroot/etc/fai/fai.conf
sed -i 's/LOGUSER=/#LOGUSER=/g' /srv/fai/config/files/etc/fai/fai.conf/FAISERVER
# Set FAI_LOGPROTO=none
echo "FAI_LOGPROTO=none" >> /srv/fai/nfsroot/etc/fai/fai.conf
echo "FAI_LOGPROTO=none" >> /srv/fai/config/files/etc/fai/fai.conf/FAISERVER


docker commit fai-mk-configspace fai-mk-configspace
docker rm -f fai-mk-configspace || true

# ========== Configure the network daemons
# For booting the install client via PXE, the install server needs a DHCP and a TFTP daemon running. The package fai-quickstart has already installed the software packages for those daemons. Additionally the package of the NFS server for exporting the nfsroot and the config space was installed.
# - Configuration of the DHCP daemon
# An example for dhcpd.conf(5) is provided with the fai-doc package. Start using this example and look at all options used therein.
# The only FAI specific information inside this configuration file is to set filename (DHCP option 67) to fai/pxelinux.0 and to set next-server (DHCP option 66, also called TFTP server name) and server-name to the name of your install server. All other information is only network related data, which is used in almost all DHCP configurations. Adjust these network parameters to your local needs.
docker rm -f configure-network-daemons || true
docker run \
    --privileged \
    -v ./var-log-fai/:/var/log/fai/ \
    -v /srv/fai/config:/srv/fai/config/ \
    -v /srv/fai/nfsroot/:/srv/fai/nfsroot/ \
    --network host \
    --name configure-network-daemons \
    fai-mk-configspace \
    bash -c "cp /usr/share/doc/fai-doc/examples/etc/dhcpd.conf /etc/dhcp/;sed -i 's/server-name faiserver/server-name `hostname`/g' /etc/dhcp/dhcpd.conf; sed -i 's/next-server faiserver/next-server 192.168.1.3/g' /etc/dhcp/dhcpd.conf; cat /etc/dhcp/dhcpd.conf"
# sed -i 's/next-server .*;/next-server 192.168.1.3;/g' /etc/dhcp/dhcpd.conf
docker commit configure-network-daemons configure-network-daemons
docker rm -f configure-network-daemons || true

# - Adding a host entry to DHCP
docker rm -f add-host-entry-to-dhcp || true
CLIENT_HOST=demohost2
docker run \
    --privileged \
    -v ./var-log-fai/:/var/log/fai/ \
    -v /srv/fai/config:/srv/fai/config/ \
    -v /srv/fai/nfsroot/:/srv/fai/nfsroot/ \
    --network host \
    --name add-host-entry-to-dhcp \
    configure-network-daemons \
    bash -c "export RUNLEVEL=1; echo '192.168.1.101 "$CLIENT_HOST"' >> /etc/hosts; dhcp-edit $CLIENT_HOST 01:02:03:ab:cd:ef"

# Update /etc/hosts whether demohost not exists
cat /etc/hosts | grep "$CLIENT_HOST" || echo '192.168.1.101 '$CLIENT_HOST'' >> /etc/hosts
# The MAC address is given by the hardware of the network card. For each install client you collect its MAC address and to map it to an IP address and to a host name. First, we add the IP address and the hostname to /etc/hosts
# The mapping from the MAC address to the IP address is done in the dhcpd.conf file. Here, we add a host entry using the command dhcp-edit(8). Here you have to replace 01:02:03:AB:CD:EF ith the MAC you have found.
docker commit add-host-entry-to-dhcp add-host-entry-to-dhcp
docker rm -f add-host-entry-to-dhcp || true

# ======== Creating the PXELINUX configuration
# The last step before booting your client for the first time is to specify what configuration the client should boot when doing PXE boot. We use the command fai-chboot(8) to create a pxelinux configuration for each install client. This includes information about the kernel, the initrd, the config space and some boot parameters. You should read the manual page, which gives you some good examples. Hereâ€™s the command for starting the installation for the host demohost.
# fai-chboot -IFv -u nfs://faiserver/srv/fai/config demohost
docker rm -f create-pxelinux-configuration || true ; docker run -d \
    --cap-add SYS_ADMIN \
    --privileged \
    -v /var/cache/apt-cacher-ng:/var/cache/apt-cacher-ng \
    -v ./var-log-fai/:/var/log/fai/ \
    -v /srv/fai/config:/srv/fai/config/ \
    -v /srv/fai/nfsroot/:/srv/fai/nfsroot/ \
    --network host \
    --name create-pxelinux-configuration \
    add-host-entry-to-dhcp \
    bash -c "fai-chboot -IFv -u nfs://`hostname -I | tr ' ' '\n' | head -n1`/srv/fai/config $CLIENT_HOST ; sleep 86400"

modprobe {nfs,nfsd}
apt install -y nfs-kernel-server
# 
chmod 0777 /var/cache/apt-cacher-ng/
docker exec -it create-pxelinux-configuration bash -c "sed -i 's/subnet 192.168.*.* netmask/subnet 192.168.1.0 netmask/g' /etc/dhcp/dhcpd.conf ; cat /etc/dhcp/dhcpd.conf"
docker exec -it create-pxelinux-configuration bash -c "sed -i 's/option routers 192.168.*.*;/option routers 192.168.1.1;/g' /etc/dhcp/dhcpd.conf ; cat /etc/dhcp/dhcpd.conf"
docker exec -it create-pxelinux-configuration bash -c "sed -i 's/TFTP_ADDRESS=\".*\"/TFTP_ADDRESS=\"0.0.0.0:69\"/g' /etc/default/tftpd-hpa ; cat /etc/default/tftpd-hpa"
docker exec -it create-pxelinux-configuration bash -c "sed -i 's/INTERFACESv4=\"\"/INTERFACESv4=\"eno1\"/g' /etc/default/isc-dhcp-server ; cat /etc/default/isc-dhcp-server"
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; invoke-rc.d isc-dhcp-server restart"
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; /etc/init.d/tftpd-hpa restart"
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; service rpcbind restart"
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; service nfs-kernel-server restart"
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; service apt-cacher-ng start"
# At this point, you should have a working faiserver setup and your clients should boot into FAI and be able to install one of the examples.
# In the following section, you can read about planning your installation, tailoring your configuration space to your particular needs and extending FAI using hooks.

cat <<EOF > /etc/exports
/srv/fai/config 192.168.1.3/24(async,ro,no_subtree_check)
/srv/fai/nfsroot 192.168.1.3/24(async,ro,no_subtree_check,no_root_squash)
EOF
docker cp /etc/exports create-pxelinux-configuration:/etc/exports
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; service nfs-kernel-server restart"
service nfs-kernel-server restart
cat ./var-log-fai/remote-logs/.ssh/authorized_keys > ~/.ssh/authorized_keys
exit 0
# docker exec -it fai-cd bash -c "fai-cd -C /etc/fai-bookworm -g /srv/fai/config/grub.cfg.install-only -m/tmp/mirror -n/srv/fai/nfsroot /dvd/$HOSTNAME-fai-cd.iso || exit 1" | tee fai-cd.log

echo "Fai-cd started"
docker rm -f fai-nginx || true
docker run -d -p 8080:80 --name fai-nginx -v ./dvd/:/usr/share/nginx/html:ro nginx
docker rm -f tryc-fai || true;
ADDRESS_8080="ADDRESS=172.17.0.1:8080"
VOLUME_DOCKER_SOCK="/var/run/docker.sock:/var/run/docker.sock"
docker network create tryc_default || true
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
docker rm -f tryc-fai
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
TUNNEL=$(docker logs tryc-fai -f | head -n1 | tr -d '\r')
echo

echo
echo
echo "This image will do an unattended installation of Debian and the selected applications. No network connection is needed, since all packages are on the installation media. You can write this image to an USB stick or CD. Legacy BIOS and UEFI are supported."
echo "All data on the first disk will be overridden without any further confirmation."
echo "Ready to burn."
echo "Run following command to start PXE server and boot the machine from network."
echo "    ./pic pxe \$IDENTITY_FILE \$MAC_ADDRESS [\$IP_ADDRESS]"
if [ ! -z "$IDENTITY_FILE" ]; then
    ./pic list-nodename $IDENTITY_FILE | while read -r NODE; do
        if [ -z "$NODE" ]; then
            continue;
        fi
        IP_ADDRESS=$(echo $NODE | awk '{print $1}')
        PRODUCT_NAME=$(echo $NODE | awk '{print $3}')
        NETWORK_INTERFACES=$(ssh -i $IDENTITY_FILE $IP_ADDRESS "ip address | grep -E '^[0-9]+: ' | awk '{print \$2}' | sed 's/://g' | grep -v veth | grep -v lo | grep -v docker | grep -v br- | grep -v vnet | grep -v flannel | grep -v cni | grep -v tun")
        MAC_ADDRESS=$(./pic get-mac-address "$IP_ADDRESS" "$IDENTITY_FILE")
        echo "  - To start PXE server and boot the \"$PRODUCT_NAME\" ($IP_ADDRESS)."
        echo "      ./pic pxe \"$MAC_ADDRESS\" \"$IDENTITY_FILE\" \"$IP_ADDRESS\""
    done
fi
echo
echo "Download the iso file at:"
echo "    https://$TUNNEL/$HOSTNAME-fai-cd.iso"
echo "Run the following command to burn the image to a USB stick:"
echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/USB_DEVICE_NAME"
echo "USB device list:"
USB_DEVICES=`lsblk -n -o NAME,SIZE --nodeps`
echo "$USB_DEVICES" | while read -r USB_DEVICE; do
    DEVICE_NAME=$(echo $USB_DEVICE | awk '{print $1}')
    DEVICE_SIZE=$(echo $USB_DEVICE | awk '{print $2}')
    echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/$DEVICE_NAME # $DEVICE_SIZE"
done
exit 0
