#!/bin/bash
docker ps > /dev/null 2>&1 || curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
stat ~/.ssh/id_rsa.pub || ssh-keygen
set -xeo pipefail
rm time.log > /dev/null 2>&1 || true
rm fai-cd.log > /dev/null 2>&1 || true
rm fai-mirror.log > /dev/null 2>&1 || true
rm fai-setup.log > /dev/null 2>&1 || true
args=("$@")
HOSTNAME=${args[0]}
GITHUB_USERNAME=${args[1]}
IDENTITY_FILE=${args[2]}

if [ -z "$GITHUB_USERNAME" ]; then
    echo "In order to connect to machines, you need to add your public ssh key to github."
    echo "Visit https://github.com/settings/keys to add your public ssh key."
    echo "GITHUB_USERNAME is empty. Specify a github username for the new machine."
    echo "Usage: ./pic fai HOSTNAME GITHUB_USERNAME"
    exit 1
fi
if [ -z "$HOSTNAME" ]; then
    echo "HOSTNAME is empty. Specify a hostname for the new machine."
    echo "Usage: ./pic fai HOSTNAME"
    exit 1
fi
echo "HOSTNAME: $HOSTNAME"
#
# exit 0
rm ./dvd/$HOSTNAME-fai-cd.iso || true

docker rm -f fai-config || true
docker rm -f fai || true
docker rm -f apt-cacher-ng || true
# warp-cli && warp-cli connect || true
cp scripts/fai/Dockerfile.fai-config ./Dockerfile.fai-config || curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/fai/Dockerfile.fai-config -o ./Dockerfile.fai-config

(docker buildx ls | grep docker.sock) || docker buildx create --use
echo "Dockerfile.fai-config built"
rm Dockerfile.fai-config

# 
docker run --name fai-config \
    -e "DEBIAN_FRONTEND=noninteractive" \
    -v ./fai/fai-bookworm/:/etc/fai-bookworm \
    -v ./fai/fai-bookworm/fai.conf:/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/srv/fai/nfsroot/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/etc/fai-bookworm/fai.conf \
    --privileged --entrypoint /bin/bash -d \
    ghcr.io/qtvhao/fai-project-debian:main -c "/etc/init.d/apt-cacher-ng start && sleep 86400"

docker exec fai-config bash -c "apt install -y fai-client"

docker logs fai-config -f &

SNAPSHOT_NAME="fai-setup-snapshot"
docker image inspect $SNAPSHOT_NAME || \
    ( time docker exec fai-config bash -c "export RUNLEVEL=1 && echo N | fai-setup -vf" | tee fai-setup.log && \
    docker stop fai-config && \
    docker commit fai-config $SNAPSHOT_NAME)

docker stop fai-config || true
docker rm -f fai-config || true
docker stop fai-mirror || true
docker rm -f fai-mirror || true

docker run --name fai-mirror \
    -v ./fai/fai-bookworm/:/etc/fai-bookworm \
    -v ./fai/:/srv/fai/config/ \
    -v ./fai/fai-bookworm/fai.conf:/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/srv/fai/nfsroot/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/etc/fai-bookworm/fai.conf \
    --privileged --entrypoint /bin/bash -d \
    $SNAPSHOT_NAME -c "/etc/init.d/apt-cacher-ng start && sleep 86400"

# nice xz -q $NFSROOT/var/tmp/base.tar &  (wd: /srv/fai/nfsroot)
# END GLOBAL SETUP
# START CUSTOM SETUP
export cl="DEBIAN,DHCPC,DEMO,FAIBASE,BOOKWORM,ONE,FAIME,GRUB_PC,GRUB_EFI,AMD64"
# fai-mirror  -C /etc/fai-bookworm -m1 -c$cl /tmp/mirror
SNAPSHOT_NAME="fai-mirror-snapshot"
docker image inspect $SNAPSHOT_NAME || \
    ( time docker exec fai-mirror bash -c "fai-mirror -C /etc/fai-bookworm -m1 -c$cl /tmp/mirror || exit 1" | tee fai-mirror.log && \
    docker stop fai-mirror && \
    docker commit fai-mirror $SNAPSHOT_NAME)

docker stop fai-mirror || true
docker rm -f fai-mirror || true
docker stop fai-cd || true
docker rm -f fai-cd || true

touch tmp-dnsmasq.log
docker run --name fai-cd \
    -v ./fai/fai-bookworm/:/etc/fai-bookworm \
    -v ./fai/:/srv/fai/config/ \
    -v ./dvd/:/dvd/ \
    -v ./fai/pxelinux.cfg/:/srv/tftp/fai/pxelinux.cfg/ \
    -v ./dnsmasq.conf:/etc/dnsmasq.conf \
    -v ./fai/fai-bookworm/fai.conf:/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/srv/fai/nfsroot/etc/fai/fai.conf -v ./fai/fai-bookworm/fai.conf:/etc/fai-bookworm/fai.conf \
    --net=host \
    --cap-add=NET_ADMIN \
    --privileged --entrypoint /bin/bash -d \
    $SNAPSHOT_NAME -c "/etc/init.d/apt-cacher-ng start && sleep 86400"
# fai-cd -C /etc/fai-bookworm -g grub.cfg.install-only -m/tmp/mirror faime-LODYXLRE.iso
docker exec -it fai-cd bash -c "fai-cd -C /etc/fai-bookworm -g /srv/fai/config/grub.cfg.install-only -SJ -m/tmp/mirror -n/srv/fai/nfsroot /dvd/squash.img || exit 1" | tee fai-cd.log
mv ./dvd/squash.img /var/www/html/squash.img
# docker exec -it fai-cd bash -c "fai-cd -C /etc/fai-bookworm -g /srv/fai/config/grub.cfg.install-only -m/tmp/mirror -n/srv/fai/nfsroot /dvd/$HOSTNAME-fai-cd.iso || exit 1" | tee fai-cd.log

echo "Fai-cd started"
docker rm -f fai-nginx || true
docker run -d -p 8080:80 --name fai-nginx -v ./dvd/:/usr/share/nginx/html:ro nginx
docker rm -f tryc-fai || true;
ADDRESS_8080="ADDRESS=172.17.0.1:8080"
VOLUME_DOCKER_SOCK="/var/run/docker.sock:/var/run/docker.sock"
docker network create tryc_default || true
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
docker rm -f tryc-fai
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
TUNNEL=$(docker logs tryc-fai -f | head -n1 | tr -d '\r')
echo

echo
echo
echo "This image will do an unattended installation of Debian and the selected applications. No network connection is needed, since all packages are on the installation media. You can write this image to an USB stick or CD. Legacy BIOS and UEFI are supported."
echo "All data on the first disk will be overridden without any further confirmation."
echo "Ready to burn."
echo "Run following command to start PXE server and boot the machine from network."
echo "    ./pic pxe \$IDENTITY_FILE \$MAC_ADDRESS [\$IP_ADDRESS]"
if [ ! -z "$IDENTITY_FILE" ]; then
    ./pic list-nodename $IDENTITY_FILE | while read -r NODE; do
        if [ -z "$NODE" ]; then
            continue;
        fi
        IP_ADDRESS=$(echo $NODE | awk '{print $1}')
        PRODUCT_NAME=$(echo $NODE | awk '{print $3}')
        NETWORK_INTERFACES=$(ssh -i $IDENTITY_FILE $IP_ADDRESS "ip address | grep -E '^[0-9]+: ' | awk '{print \$2}' | sed 's/://g' | grep -v veth | grep -v lo | grep -v docker | grep -v br- | grep -v vnet | grep -v flannel | grep -v cni | grep -v tun")
        MAC_ADDRESS=$(./pic get-mac-address "$IP_ADDRESS" "$IDENTITY_FILE")
        echo "  - To start PXE server and boot the \"$PRODUCT_NAME\" ($IP_ADDRESS)."
        echo "      ./pic pxe \"$MAC_ADDRESS\" \"$IDENTITY_FILE\" \"$IP_ADDRESS\""
    done
fi
echo
echo "Download the iso file at:"
echo "    https://$TUNNEL/$HOSTNAME-fai-cd.iso"
echo "Run the following command to burn the image to a USB stick:"
echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/USB_DEVICE_NAME"
echo "USB device list:"
USB_DEVICES=`lsblk -n -o NAME,SIZE --nodeps`
echo "$USB_DEVICES" | while read -r USB_DEVICE; do
    DEVICE_NAME=$(echo $USB_DEVICE | awk '{print $1}')
    DEVICE_SIZE=$(echo $USB_DEVICE | awk '{print $2}')
    echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/$DEVICE_NAME # $DEVICE_SIZE"
done
exit 0
