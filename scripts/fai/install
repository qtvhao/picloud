#!/bin/bash
docker ps > /dev/null 2>&1 || curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
stat ~/.ssh/id_rsa.pub || ssh-keygen
set -e
rm time.log > /dev/null 2>&1 || true
rm fai-cd.log > /dev/null 2>&1 || true
rm fai-mirror.log > /dev/null 2>&1 || true
rm fai-setup.log > /dev/null 2>&1 || true
args=("$@")
HOSTNAME=${args[0]}
GITHUB_USERNAME=${args[1]}
if [ -z "$GITHUB_USERNAME" ]; then
    echo "In order to connect to machines, you need to add your public ssh key to github."
    echo "Visit https://github.com/settings/keys to add your public ssh key."
    echo "GITHUB_USERNAME is empty. Specify a github username for the new machine."
    echo "Usage: ./pic fai HOSTNAME GITHUB_USERNAME"
    exit 1
fi
if [ -z "$HOSTNAME" ]; then
    echo "HOSTNAME is empty. Specify a hostname for the new machine."
    echo "Usage: ./pic fai HOSTNAME"
    exit 1
fi
echo "HOSTNAME: $HOSTNAME"
#
rm ./dvd/$HOSTNAME-fai-cd.iso || true

docker rm -f fai-config || true
docker rm -f fai || true
export cl="DEBIAN,DHCPC,DEMO,FAIBASE,BOOKWORM,ONE,SSH_SERVER,HALT,GNOME,FAIME,GRUB_PC,GRUB_EFI,AMD64"
mkdir -p /var/cache/apt-cacher-ng
chmod -R 0777 /var/cache/apt-cacher-ng
docker rm -f apt-cacher-ng || true
warp-cli connect
cp scripts/fai/Dockerfile.fai-config ./Dockerfile.fai-config || curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/fai/Dockerfile.fai-config -o ./Dockerfile.fai-config
docker image inspect debian:bookworm > /dev/null 2>&1 || \
    docker pull debian:bookworm
docker tag debian:bookworm debian-bookworm
# 
time docker build -t fai-config -f Dockerfile.fai-config .
echo "Dockerfile.fai-config built"
rm Dockerfile.fai-config

# Grab your own configuration from https://fai-project.org/FAIme/
docker run --name fai-config \
    -v /var/cache/apt-cacher-ng:/var/cache/apt-cacher-ng \
    --privileged --entrypoint /bin/bash -d fai-config -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
FAI_CONFIG_IMAGE_ID=$(docker image inspect fai-config | jq -r ".[0].Id" | sed 's/^sha256://g')
FAI_SETUP_BASE="fai-setup-base-$FAI_CONFIG_IMAGE_ID"
docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || \
 time ( (docker exec -it fai-config bash -c "export RUNLEVEL=1 && fai-setup -v") > fai-setup.log )
echo "Fai-setup finished"
# docker stop fai-config || true
docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || time docker commit fai-config $FAI_SETUP_BASE
docker rm -f fai-config || true
echo "Fai-setup committed: $FAI_SETUP_BASE"
docker tag $FAI_SETUP_BASE fai-setup-base
# 
cp scripts/fai/Dockerfile.fai-setup ./Dockerfile.fai-setup || curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/fai/Dockerfile.fai-setup -o ./Dockerfile.fai-setup
time docker build -t fai-setup -f Dockerfile.fai-setup .
echo "Dockerfile.fai-setup built"
rm Dockerfile.fai-setup
docker run --name fai \
    -v /var/cache/apt-cacher-ng:/var/cache/apt-cacher-ng \
    --privileged --entrypoint /bin/bash -d fai-setup -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
FAI_MIRROR_IMAGE_ID=$(docker image inspect fai-setup | jq -r ".[0].Id" | sed 's/^sha256://g')
FAI_CD_BASE_FULL="$FAI_MIRROR_IMAGE_ID-$HOSTNAME-$cl"
FAI_CD_BASE="fai-cd-base-"$(echo $FAI_CD_BASE_FULL | md5sum | cut -c1-20)
docker image inspect $FAI_CD_BASE > /dev/null 2>&1 || \
    time ( (docker exec -it fai fai-mirror -C /srv/fai/config/fai-bookworm -m1 -c$cl /tmp/$HOSTNAME) > fai-mirror.log)
echo "Fai-mirror finished"
# docker stop fai || true
docker image inspect $FAI_CD_BASE > /dev/null 2>&1 || time docker commit fai $FAI_CD_BASE
docker rm -f fai || true
echo "Fai-mirror committed: $FAI_CD_BASE"
docker tag $FAI_CD_BASE fai-cd-base
# 
echo "Copying ssh key to fai container"
docker run --net host --name fai \
    -v ./dvd/:/dvd/ \
    -v ./fai/pxelinux.cfg/:/srv/tftp/fai/pxelinux.cfg/ \
    --cap-add=NET_ADMIN \
    -v ./dnsmasq.conf:/etc/dnsmasq.conf \
    -v /var/cache/apt-cacher-ng:/var/cache/apt-cacher-ng \
    --privileged --entrypoint /bin/bash -d fai-cd-base -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
GITHUB_KEYS_URL="https://github.com/$GITHUB_USERNAME.keys"
GITHUB_KEYS=$(curl -s $GITHUB_KEYS_URL)
mkdir -p /srv/fai/config/files/ || true
echo "$GITHUB_KEYS" > /srv/fai/config/files/root-ssh-key
docker cp /srv/fai/config/files/root-ssh-key fai:/srv/fai/config/files/root-ssh-key
docker cp ~/.ssh/id_rsa.pub fai:/srv/fai/nfsroot/root/.ssh/authorized_keys
echo "Fai-setup starting"

# cat fai-setup.log | tail -n50
# rm fai-setup.log

cat fai-mirror.log | tail -n50
rm fai-mirror.log || true
echo "Fai-mirror finished"
time ( (docker exec -it fai fai-cd -C /srv/fai/config/fai-bookworm -g /srv/fai/config/grub.cfg.install-only -m /tmp/$HOSTNAME /dvd/$HOSTNAME-fai-cd.iso) > fai-cd.log)
echo "====" >> fai-cd.log
time ( (docker exec -it fai fai-cd -C /srv/fai/config/fai-bookworm -m /tmp/$HOSTNAME -f -S /var/www/html/squash.img) >> fai-cd.log)
# Start validate
docker exec -it fai bash -c "stat -c '%s' /srv/fai/nfsroot/etc/resolv.conf-installserver"
docker exec -it fai bash -c "stat -c '%s' /srv/fai/nfsroot/usr/share/keyrings/cloudflare-main.gpg"
docker exec -it fai bash -c "stat -c '%s' /srv/fai/nfsroot/etc/systemd/sleep.conf.d/nosuspend.conf"
docker exec -it fai bash -c "stat -c '%s' /srv/fai/config/files/root-ssh-key"
# End validate
# docker exec -it fai cat /srv/fai/nfsroot/root/.ssh/authorized_keys
echo "Fai-cd started"
cat fai-cd.log | tail -n50
rm  fai-cd.log || true

echo
echo
# docker cp fai:/$HOSTNAME-fai-cd.iso $HOSTNAME-fai-cd.iso
echo "This image will do an unattended installation of Debian and the selected applications. No network connection is needed, since all packages are on the installation media. You can write this image to an USB stick or CD. Legacy BIOS and UEFI are supported."
echo "All data on the first disk will be overridden without any further confirmation."
echo "Ready to burn."
echo "Rung "./pic pxe ./dvd/$HOSTNAME-fai-cd.iso" to start PXE server and boot the machine from network."
# ./pic pxe 8c:dc:d4:34:0c:f0 id_rsa 192.168.1.226
echo "    ./pic pxe \$MAC_ADDRESS \$IDENTITY_FILE \$IP_ADDRESS"
echo "Run the following command to burn the image to a USB stick:"
echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/USB_DEVICE_NAME"
echo "USB device list:"
lsblk -n -o NAME --nodeps | awk '{print $1}' | sed 's/^/    .\/pic dd .\/dvd\/'$HOSTNAME'-fai-cd.iso \/dev\//'
exit 0
