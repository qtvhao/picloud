#!/bin/bash
docker ps > /dev/null 2>&1 || curl -fsSL https://get.docker.com -o install-docker.sh
docker ps > /dev/null 2>&1 || sh install-docker.sh
stat ~/.ssh/id_rsa.pub || ssh-keygen
set -e -o pipefail
rm time.log > /dev/null 2>&1 || true
rm fai-cd.log > /dev/null 2>&1 || true
rm fai-mirror.log > /dev/null 2>&1 || true
rm fai-setup.log > /dev/null 2>&1 || true
args=("$@")
HOSTNAME=${args[0]}
GITHUB_USERNAME=${args[1]}
IDENTITY_FILE=${args[2]}

if [ -z "$GITHUB_USERNAME" ]; then
    echo "In order to connect to machines, you need to add your public ssh key to github."
    echo "Visit https://github.com/settings/keys to add your public ssh key."
    echo "GITHUB_USERNAME is empty. Specify a github username for the new machine."
    echo "Usage: ./pic fai HOSTNAME GITHUB_USERNAME"
    exit 1
fi
if [ -z "$HOSTNAME" ]; then
    echo "HOSTNAME is empty. Specify a hostname for the new machine."
    echo "Usage: ./pic fai HOSTNAME"
    exit 1
fi
echo "HOSTNAME: $HOSTNAME"
#
# exit 0
rm ./dvd/$HOSTNAME-fai-cd.iso || true

docker rm -f fai-config || true
docker rm -f fai || true
export cl="DEBIAN,DHCPC,DEMO,FAIBASE,BOOKWORM,ONE,DEBIAN_DEVEL,SSH_SERVER,HALT,FAIME,GRUB_PC,GRUB_EFI,AMD64"
docker rm -f apt-cacher-ng || true
# warp-cli && warp-cli connect || true
cp scripts/fai/Dockerfile.fai-config ./Dockerfile.fai-config || curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/fai/Dockerfile.fai-config -o ./Dockerfile.fai-config

(docker buildx ls | grep docker.sock) || docker buildx create --use
notes=" (optional, you can skip this step if you don't want to push the image to docker.io, press Enter to skip)"
(cat /root/.docker/config.json | grep index.docker.io) || \
    ( echo "Login to docker.io as $GITHUB_USERNAME $notes: https://hub.docker.com/settings/security?generateToken=true" && \
    docker login -u $GITHUB_USERNAME) || true
# if .docker/config.json auths to index.docker.io exists
time ( docker buildx build \
    --push \
    --cache-from docker.io/$GITHUB_USERNAME/picloud:branch-cache \
    --cache-to type=registry,ref=docker.io/$GITHUB_USERNAME/picloud:branch-cache,mode=max \
    -t docker.io/$GITHUB_USERNAME/picloud:fai-config -f Dockerfile.fai-config . && \
    docker pull docker.io/$GITHUB_USERNAME/picloud:fai-config) || \
time ( docker buildx build \
    --load \
    --cache-from docker.io/$GITHUB_USERNAME/picloud:branch-cache \
    -t docker.io/$GITHUB_USERNAME/picloud:fai-config2 -f Dockerfile.fai-config .)
echo "Dockerfile.fai-config built"
rm Dockerfile.fai-config

# Grab your own configuration from https://fai-project.org/FAIme/
docker run --name fai-config \
    --privileged --entrypoint /bin/bash -d docker.io/$GITHUB_USERNAME/picloud:fai-config -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"

FAI_CONFIG_IMAGE_ID=$(docker image inspect docker.io/$GITHUB_USERNAME/picloud:fai-config | jq -r ".[0].Id" | sed 's/^sha256://g')
FAI_SETUP_BASE="docker.io/$GITHUB_USERNAME/picloud:fai-setup-base-$FAI_CONFIG_IMAGE_ID"
docker logs fai-config -f &
docker exec fai-config bash -c "apt update && timeout 30 apt-get install -y --no-install-recommends --download-only task-xfce-desktop && rm -rf /var/cache/apt/archives/* && rm -rf /var/cache/apt/*.bin && rm -rf /var/lib/apt/lists/* && apt-get clean" || \
    (echo "fai-config failed to start. Check the logs above." && exit 1)
docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || \
 time docker exec fai-config bash -c "export RUNLEVEL=1 && fai-setup -vf" | tee fai-setup.log
docker cp fai-config:/var/log/apt-cacher-ng/apt-cacher.log ./apt-cacher.log
echo "Fai-setup finished"

docker stop fai-config || true
docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || time docker commit fai-config $FAI_SETUP_BASE
IMAGE_SIZE=$(docker image inspect $FAI_SETUP_BASE | jq -r ".[0].Size")
echo "Fai-setup committed: $FAI_SETUP_BASE, size: $IMAGE_SIZE"
docker rm -f fai-config || true
echo "Fai-setup committed: $FAI_SETUP_BASE"
docker tag $FAI_SETUP_BASE fai-setup-base
# 
if [ -f "$HOME/.pic/fai-rootpw.json" ]; then
    FAI_ROOTPW=$(cat $HOME/.pic/fai-rootpw.json | jq -r ".FAI_ROOTPW")
else
    FAI_ROOTPW=$(openssl rand -hex 32)
    jq -n --arg FAI_ROOTPW "$FAI_ROOTPW" '{"FAI_ROOTPW":$FAI_ROOTPW}' > $HOME/.pic/fai-rootpw.json
fi
ENCRYPTED_FAI_ROOTPW=$(echo $FAI_ROOTPW | openssl passwd -stdin -6)
SANITIZED_FAI_ROOTPW=$(echo $ENCRYPTED_FAI_ROOTPW | sed 's/\//\\\//g')
FAIME_VAR_FILE="/srv/fai/config/class/FAIME.var"
FAIBASE_VAR_FILE="/srv/fai/config/class/FAIBASE.var"
NFS_ROOT_CONF_FILE="/srv/fai/config/fai-bookworm/nfsroot.conf"

docker rm -f fai-setup
docker run --name fai-setup \
    --privileged --entrypoint /bin/bash -d fai-setup-base -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
docker exec -i fai-setup bash -c "sed -i 's/FAI_ROOTPW=.*/FAI_ROOTPW=\"$SANITIZED_FAI_ROOTPW\"/g' $NFS_ROOT_CONF_FILE"
docker exec -i fai-setup bash -c "sed -i 's/USERPW=.*/USERPW=\"$SANITIZED_FAI_ROOTPW\"/g' $FAIME_VAR_FILE"
docker exec -i fai-setup bash -c "sed -i 's/ROOTPW=.*/ROOTPW=\"$SANITIZED_FAI_ROOTPW\"/g' $FAIBASE_VAR_FILE"
docker cp fai-setup:/var/log/apt-cacher-ng/apt-cacher.log ./apt-cacher-setup.log
(docker exec -i fai-setup bash -c "rm -rf /srv/fai/nfsroot")
FAI_SETUP_IMAGE_ID=$(docker image inspect fai-setup-base | jq -r ".[0].Id")
FAI_ROOTPW_MD5=$(echo "$FAI_ROOTPW""$FAI_SETUP_IMAGE_ID" | md5sum | cut -c1-20)
FAI_SETUP_BASE="fai-setup-base-$FAI_ROOTPW_MD5"

docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || time ( (docker exec -i fai-setup bash -c "export RUNLEVEL=1 && fai-setup -v") | tee fai-setup.log )
echo "Fai-setup finished"
docker image inspect $FAI_SETUP_BASE > /dev/null 2>&1 || time docker commit fai-setup $FAI_SETUP_BASE
docker tag $FAI_SETUP_BASE fai-setup-base
cp scripts/fai/Dockerfile.fai-setup ./Dockerfile.fai-setup || curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/fai/Dockerfile.fai-setup -o ./Dockerfile.fai-setup
time docker build -t fai-setup -f Dockerfile.fai-setup .
echo "Dockerfile.fai-setup built"
rm Dockerfile.fai-setup
docker run --name fai \
    --privileged --entrypoint /bin/bash -d fai-setup -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
docker cp fai:/var/log/apt-cacher-ng/apt-cacher.log ./apt-cacher-fai.log
FAI_MIRROR_IMAGE_ID=$(docker image inspect fai-setup | jq -r ".[0].Id" | sed 's/^sha256://g')
FAI_CD_BASE_FULL="$FAI_MIRROR_IMAGE_ID-$HOSTNAME-$cl"
FAI_CD_BASE="fai-cd-base-"$(echo $FAI_CD_BASE_FULL | md5sum | cut -c1-20)
docker image inspect $FAI_CD_BASE > /dev/null 2>&1 || \
    time ( (docker exec -i fai fai-mirror -C /srv/fai/config/fai-bookworm -m1 -c$cl /tmp/$HOSTNAME) | tee fai-mirror.log)
# 8907 lines
echo "Fai-mirror finished"
# docker stop fai || true
docker image inspect $FAI_CD_BASE > /dev/null 2>&1 || time docker commit fai $FAI_CD_BASE
docker rm -f fai || true
echo "Fai-mirror committed: $FAI_CD_BASE"
docker tag $FAI_CD_BASE fai-cd-base
# 
echo "Copying ssh key to fai container"
docker run --net host --name fai \
    -v ./dvd/:/dvd/ \
    -v /var/www/html/:/var/www/html/ \
    -v ./fai/pxelinux.cfg/:/srv/tftp/fai/pxelinux.cfg/ \
    --cap-add=NET_ADMIN \
    -v ./dnsmasq.conf:/etc/dnsmasq.conf \
    --privileged --entrypoint /bin/bash -d fai-cd-base -c "/etc/init.d/apt-cacher-ng start && wait-for-it 127.0.0.1:9999 && sleep 86400"
docker cp fai:/var/log/apt-cacher-ng/apt-cacher.log ./apt-cacher-fai-2.log
GITHUB_KEYS_URL="https://github.com/$GITHUB_USERNAME.keys"
GITHUB_KEYS=$(curl -s $GITHUB_KEYS_URL)
mkdir -p /srv/fai/config/files/ || true
echo "$GITHUB_KEYS" > /srv/fai/config/files/root-ssh-key
docker cp /srv/fai/config/files/root-ssh-key fai:/srv/fai/config/files/root-ssh-key
docker cp ~/.ssh/id_rsa.pub fai:/srv/fai/nfsroot/root/.ssh/authorized_keys
echo "Fai-setup starting"

rm fai-mirror.log || true
echo "Fai-mirror finished"
rm ./dvd/$HOSTNAME-fai-cd.iso || true
stat ./dvd/$HOSTNAME-$FAI_CD_BASE-fai-cd.iso || \
    time ( (docker exec -i fai fai-cd -C /srv/fai/config/fai-bookworm -g /srv/fai/config/grub.cfg.install-only -m /tmp/$HOSTNAME /dvd/$HOSTNAME-$FAI_CD_BASE-fai-cd.iso))

mv ./dvd/$HOSTNAME-$FAI_CD_BASE-fai-cd.iso ./dvd/$HOSTNAME-fai-cd.iso
echo "====" >> fai-cd.log

rm /var/www/html/squash.img || true
rm /var/www/html/squash-$FAI_CD_BASE.img || true
time ( (docker exec -i fai fai-cd -C /srv/fai/config/fai-bookworm -m /tmp/$HOSTNAME -f -S /var/www/html/squash-$FAI_CD_BASE.img))
cp /var/www/html/squash-$FAI_CD_BASE.img /var/www/html/squash.img
# Start validate
docker exec -i fai bash -c "stat -c '%s' /srv/fai/nfsroot/etc/resolv.conf-installserver"
docker exec -i fai bash -c "stat -c '%s' /srv/fai/nfsroot/usr/share/keyrings/cloudflare-main.gpg"
docker exec -i fai bash -c "stat -c '%s' /srv/fai/config/files/root-ssh-key"
# End validate
# docker exec -i fai cat /srv/fai/nfsroot/root/.ssh/authorized_keys
echo "Fai-cd started"
cat fai-cd.log | tail -n50
rm  fai-cd.log || true
docker rm -f fai-nginx || true
docker run -d -p 8080:80 --name fai-nginx -v ./dvd/:/usr/share/nginx/html:ro nginx
docker rm -f tryc-fai || true;
ADDRESS_8080="ADDRESS=172.17.0.1:8080"
VOLUME_DOCKER_SOCK="/var/run/docker.sock:/var/run/docker.sock"
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
docker rm -f tryc-fai
docker run -e $ADDRESS_8080 -i \
    --name tryc-fai \
    -v $VOLUME_DOCKER_SOCK \
    ghcr.io/qtvhao/trycloudflare-docker:main tryc-fai
TUNNEL=$(docker logs tryc-fai -f | head -n1 | tr -d '\r')
echo

echo
echo
echo "This image will do an unattended installation of Debian and the selected applications. No network connection is needed, since all packages are on the installation media. You can write this image to an USB stick or CD. Legacy BIOS and UEFI are supported."
echo "All data on the first disk will be overridden without any further confirmation."
echo "Ready to burn."
echo "Run following command to start PXE server and boot the machine from network."
echo "    ./pic pxe \$IDENTITY_FILE \$MAC_ADDRESS [\$IP_ADDRESS]"
if [ ! -z "$IDENTITY_FILE" ]; then
    ./pic list-nodename $IDENTITY_FILE | while read -r NODE; do
        if [ -z "$NODE" ]; then
            continue;
        fi
        IP_ADDRESS=$(echo $NODE | awk '{print $1}')
        PRODUCT_NAME=$(echo $NODE | awk '{print $3}')
        NETWORK_INTERFACES=$(ssh -i $IDENTITY_FILE $IP_ADDRESS "ip address | grep -E '^[0-9]+: ' | awk '{print \$2}' | sed 's/://g' | grep -v veth | grep -v lo | grep -v docker | grep -v br- | grep -v vnet | grep -v flannel | grep -v cni | grep -v tun")
        MAC_ADDRESS=$(./pic get-mac-address "$IP_ADDRESS" "$IDENTITY_FILE")
        echo "  - To start PXE server and boot the \"$PRODUCT_NAME\" ($IP_ADDRESS)."
        echo "      ./pic pxe \"$MAC_ADDRESS\" \"$IDENTITY_FILE\" \"$IP_ADDRESS\""
    done
fi
echo
echo "Download the iso file at:"
echo "    https://$TUNNEL/$HOSTNAME-fai-cd.iso"
echo "Run the following command to burn the image to a USB stick:"
echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/USB_DEVICE_NAME"
echo "USB device list:"
USB_DEVICES=`lsblk -n -o NAME,SIZE --nodeps`
echo "$USB_DEVICES" | while read -r USB_DEVICE; do
    DEVICE_NAME=$(echo $USB_DEVICE | awk '{print $1}')
    DEVICE_SIZE=$(echo $USB_DEVICE | awk '{print $2}')
    echo "    ./pic dd ./dvd/$HOSTNAME-fai-cd.iso /dev/$DEVICE_NAME # $DEVICE_SIZE"
done
exit 0
