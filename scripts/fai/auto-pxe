#!/bin/bash
set -xeo pipefail
args=("$@")
IDENTITY_FILE=${args[0]}
MACHINES=${args[1]}
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty. Specify a identify file for the new machine."
    echo "Usage: ./pic print-available-node IDENTIFY_FILE"
    exit 1
fi
if [ ! -f "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE does not exist. Specify a identify file for the new machine."
    echo "Usage: ./pic print-available-node IDENTIFY_FILE"
    exit 1
fi
hostnameI=$(./pic hostname)
if [ -z "$MACHINES" ]; then
    echo "MACHINES is empty. Specify a list of machines to provision."
    echo "Usage: ./pic auto-pxe IDENTIFY_FILE \"MACHINE1 MACHINE2 ...\""
    exit 1
fi
apt-get install sshpass
echo "Provisioning on metal machine"
MACHINES=$(echo $MACHINES | tr " " "\n")
echo "Machine list:"
echo "$MACHINES"

for MACHINE in $MACHINES; do
    MACHINE=`echo "$MACHINE" | tr "," " "`
    MAC_ADDRESS=`echo "$MACHINE" | awk '{print $1}'`
    IP_ADDRESS=`echo "$MACHINE" | awk '{print $2}'`
    HOSTNAME=`echo "$MACHINE" | awk '{print $3}'`
    timeout 30 ssh -i $IDENTITY_FILE -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@$IP_ADDRESS poweroff || true
    timeout 30 sshpass -p fai ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $IP_ADDRESS poweroff || true
    # 
    docker exec -i create-pxelinux-configuration bash -c "echo '"$IP_ADDRESS" "$HOSTNAME"' >> /etc/hosts; dhcp-edit $HOSTNAME $MAC_ADDRESS"
    cat /etc/hosts | grep "$HOSTNAME" || echo $IP_ADDRESS' '$HOSTNAME >> /etc/hosts
    docker exec -it create-pxelinux-configuration bash -c "fai-chboot -IFv -u nfs://`hostname -I | tr ' ' '\n' | head -n1`/srv/fai/config $HOSTNAME"
    wakeonlan $MAC_ADDRESS
done
# echo 'echo "AMD64 DHCPC FAIBASE DEBIAN DEMO GRUB_PC" ;;' > /srv/fai/config/class/50-host-classes
sleep 6
for MACHINE in $MACHINES; do
    sleep 1
    MACHINE=`echo "$MACHINE" | tr "," " "`
    MAC_ADDRESS=`echo "$MACHINE" | awk '{print $1}'`
    IP_ADDRESS=`echo "$MACHINE" | awk '{print $2}'`
    HOSTNAME=`echo "$MACHINE" | awk '{print $3}'`

    while true; do
        ping -c1 "$IP_ADDRESS" > /dev/null 2>&1 && break;
        wakeonlan $MAC_ADDRESS
        echo "Waiting for $HOSTNAME to be pingable"
        sleep 2
    done
    while true; do
       nc -z "$IP_ADDRESS" 22 && break || sleep 2
    done
    while true; do
        timeout 20 sshpass -p fai ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $IP_ADDRESS \
            "cat /tmp/fai/status.log; grep 'savelog.LAST.sh' /tmp/fai/status.log || exit 1; grep -q 'OK' /tmp/fai/status.log || exit 1" && break || sleep 2
    done
done

# All machine are provisioned
for MACHINE in $MACHINES; do
    MACHINE=`echo "$MACHINE" | tr "," " "`
    IP_ADDRESS=`echo "$MACHINE" | awk '{print $2}'`
    HOSTNAME=`echo "$MACHINE" | awk '{print $3}'`
    sshpass -p fai ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $IP_ADDRESS \
        "cat /tmp/fai/status.log | sed 's/^/$HOSTNAME: /'" && break || sleep 2
done
docker restart create-pxelinux-configuration
docker exec -it create-pxelinux-configuration bash -c "export RUNLEVEL=1; service apt-cacher-ng start"

# Reboot all machines
for MACHINE in $MACHINES; do
    MACHINE=`echo "$MACHINE" | tr "," " "`
    IP_ADDRESS=`echo "$MACHINE" | awk '{print $2}'`
    HOSTNAME=`echo "$MACHINE" | awk '{print $3}'`
    sshpass -p fai ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $IP_ADDRESS reboot
done
exit 0
echo;echo;
./pic list-nodename $IDENTITY_FILE
echo "Done"
