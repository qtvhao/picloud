#!/bin/bash
set -e
args=("$@")
MAC_ADDRESS=${args[0]}
if [ -z "$MAC_ADDRESS" ]; then
    echo "MAC_ADDRESS is empty"
    exit 1
fi
IDENTITY_FILE=${args[1]}
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty"
    exit 1
fi
warp-cli disconnect || true
# echo "ISO_FILE: $ISO_FILE"
echo "Provisioning on metal machine"
# docker exec -it fai bash -c "rm /etc/exports || true"
# hostnameI=$(hostname -I | awk '{print $1}')
# echo "/srv/fai/config $hostnameI/16(async,ro,no_subtree_check)" > ./exports
# echo "/srv/fai/nfsroot $hostnameI/16(async,ro,no_subtree_check,no_root_squash)" >> ./exports
# docker cp ./exports fai:/etc/exports
docker restart fai
docker exec -it fai bash -c "ln -s /srv/fai/config /var/www/html/" || true
docker exec -it fai bash -c "service nginx restart"
docker exec -it fai bash -c "touch /tmp/dnsmasq.log"
docker exec -it fai bash -c "rm /tmp/dnsmasq.log"
docker exec -it fai bash -c "dnsmasq"
# docker exec -it fai bash -c "touch /tmp/dnsmasq.log"
# docker exec -it fai bash -c "chmod 0777 /tmp/dnsmasq.log"
./pic wait-node-to-shutdown $MAC_ADDRESS $IDENTITY_FILE

exit 0
make -v || \
    apt install -y make
ansible-playbook --version > /dev/null 2>&1 || \
    apt install -y ansible
pip3 --version > /dev/null 2>&1 || \
    apt install -y python3-pip
python3 --version || apt install -y python3
xorriso -version > /dev/null 2>&1 || apt install -y xorriso
echo
stat venv > /dev/null 2>&1 || apt install python3.11-venv -y
(cd /root/picloud/metal/roles/pxe_server/files/ && docker compose down) || true;
rm -rf ./metal/roles/pxe_server/files/data/tftp/ || true
rm -rf ./metal/roles/pxe_server/files/data/os/ || true
stat venv > /dev/null 2>&1 || python3 -m venv venv
source ./venv/bin/activate
ansible --version
echo
(pip list | grep docker > /dev/null 2>&1) || \
    pip install docker
(pip list | grep ansible > /dev/null 2>&1) || \
    pip install ansible
(pip list | grep netaddr > /dev/null 2>&1) || \
    pip install netaddr
# pip install docker-compose
cp $ISO_FILE ./metal/roles/pxe_server/files/data/iso/image.iso
wget -nc http://ftp.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/netboot/netboot.tar.gz
# Unpack netboot.tar.gz to ./tftp
mkdir -p ./metal/roles/pxe_server/files/data/tftp/ || true
tar -xzvf netboot.tar.gz -C ./metal/roles/pxe_server/files/data/tftp
# tar -xzvf netboot.tar.gz > /dev/null 2>&1

echo
export env=prod

#   - 
#   - ./data/os/EFI/boot/pxelinux.0:/tftp/pxelinux.0
#   # - ./data/os/EFI/boot/grubx64.efi:/tftp/grubx64.efi
#   - ./data/os/images/pxeboot/vmlinuz:/tftp/vmlinuz
    # mv ./os/images/pxeboot/initrd.img ./tftp/initrd.img && \
    # mv ./os/images/pxeboot/vmlinuz ./tftp/vmlinuz && \
( cd ./metal/roles/pxe_server/files/data/ && \
    mv ./tftp/debian-installer/amd64/grubx64.efi ./tftp/grubx64.efi && \
    mv ./tftp/debian-installer/amd64/pxelinux.0 ./tftp/pxelinux.0 && \
    mv ./tftp/debian-installer/amd64/grub ./tftp/ && \
    mv ./tftp/grub/grub.cfg ./tftp/grub.cfg \
)
(cd ./metal/ && 	ansible-playbook \
		--inventory inventories/${env}.yml \
		boot.yml)

# ( cd ./metal/roles/pxe_server/files/data/os/EFI/boot/ && \
# ln -s ../../../tftp/debian-installer/amd64/grubx64.efi . && \
# ln -s ../../../tftp/debian-installer/amd64/pxelinux.0 . && \
# ln -s ../../../tftp/debian-installer/amd64/grub . )
# ln -s ../../../tftp/debian-installer/amd64/ldlinux.c32 . && \
# rm netboot.tar.gz
# mkdir -p ./metal/roles/pxe_server/files/data/os/EFI/BOOT/grub/ || true
# cp -r   debian-installer/amd64/grub/           ./metal/roles/pxe_server/files/data/os/EFI/BOOT/
# cp      debian-installer/amd64/grubx64.efi    ./metal/roles/pxe_server/files/data/os/EFI/BOOT/
echo "Provisioning on metal machine done"
(cd ./metal/roles/pxe_server/files/ && docker compose up)
