#!/bin/bash
set -x -e -o pipefail
args=("$@")
MAC_ADDRESS=${args[0]}
hostnameI=$(hostname -I | awk '{print $1}')
if [ -z "$MAC_ADDRESS" ]; then
    echo "MAC_ADDRESS is empty"
    docker rm -f fai-nginx || true
    docker run -d -p 8080:80 --name fai-nginx -v ./dvd/:/usr/share/nginx/html:ro nginx
    ISO_FILES=$(ls ./dvd/)
    echo
    for ISO_FILE in $ISO_FILES; do
        echo "You can download the iso file at http://$hostnameI:8080/$ISO_FILE"
    done
    exit 1
fi
IDENTITY_FILE=${args[1]}
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty"
    exit 1
fi
IP_ADDRESS_TO_TURN_OFF=${args[2]}
if [ -z "$IP_ADDRESS_TO_TURN_OFF" ]; then
    echo "IP_ADDRESS_TO_TURN_OFF is empty"
fi
if [ $IP_ADDRESS_TO_TURN_OFF == $hostnameI ]; then
    echo "IP_ADDRESS_TO_TURN_OFF is the same as PXE server. Exiting"
    exit 1
fi
warp-cli disconnect || true
# echo "ISO_FILE: $ISO_FILE"
echo "Provisioning on metal machine"
# docker exec -it fai bash -c "rm /etc/exports || true"
# hostnameI=$(hostname -I | awk '{print $1}')
# echo "/srv/fai/config $hostnameI/16(async,ro,no_subtree_check)" > ./exports
# echo "/srv/fai/nfsroot $hostnameI/16(async,ro,no_subtree_check,no_root_squash)" >> ./exports
# docker cp ./exports fai:/etc/exports
SQUASH_IMG_FILESIZE_HUMAN=$( docker exec fai bash -c "du -h /var/www/html/squash.img" | awk '{print $1}' )
if [ -f "./fai/pxelinux.cfg/01-$MAC_ADDRESS_SED_LOWER" ]; then
    mkdir -p ./fai/pxelinux.cfg/ || true
    URL="https://raw.githubusercontent.com/qtvhao/picloud/main/fai/pxelinux.cfg/default"
    curl $URL -o ./fai/pxelinux.cfg/01-$MAC_ADDRESS_SED_LOWER
fi
echo "  - squash.img size: $SQUASH_IMG_FILESIZE_HUMAN"
MAC_ADDRESS_SED=$(echo $MAC_ADDRESS | sed 's/:/-/g')
MAC_ADDRESS_SED_LOWER=$(echo $MAC_ADDRESS_SED | tr '[:upper:]' '[:lower:]')
# fai/pxelinux.cfg/01-2c-59-e5-04-c4-51
# replace http://\d+\.\d+\.\d+\.\d+/squash.img with http://$hostnameI/squash.img
# replace IP ADDRESS with hostnameI
hostnameI=$(hostname -I | awk '{print $1}')
sed -i "s/http:\/\/[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+:8085\/squash.img/http:\/\/$hostnameI:8085\/squash.img/g" ./fai/pxelinux.cfg/default
sed -i "s/[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+,proxy/$hostnameI,proxy/g" ./dnsmasq.conf
sed -i "s/pxeserver,[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/pxeserver,$hostnameI/g" ./dnsmasq.conf

docker restart fai
docker exec -it fai bash -c "ln -s /srv/fai/config /var/www/html/" || true
docker rm -f fai-nginx || true
(lsof -i:80 && echo "Port 80 is in use" && exit 1) || true
docker run --name fai-nginx -p 8085:80 -v /var/www/html/:/usr/share/nginx/html:ro -d nginx
# 
docker exec fai-nginx bash -c "du -h /usr/share/nginx/html/squash.img"
PXE_SERVER_IP_ADDRESS=$(hostname -I | awk '{print $1}')
echo "PXE_SERVER_IP_ADDRESS: $PXE_SERVER_IP_ADDRESS"
SQUASH_IMG_URL="http://$PXE_SERVER_IP_ADDRESS:8085/squash.img"
CURL_HEAD_SQUASH_IMG=$(curl -s -I $SQUASH_IMG_URL -X HEAD -w '%{http_code}' -o /dev/null)
echo "CURL_HEAD_SQUASH_IMG: $CURL_HEAD_SQUASH_IMG"
if [ "$CURL_HEAD_SQUASH_IMG" == "200" ]; then
    echo "Squash.img is ready. Starting to boot node: $SQUASH_IMG_URL"
else
    echo "Squash.img is not ready. Waiting for it to be ready: $SQUASH_IMG_URL"
    exit 1
fi
docker exec fai bash -c "rm /tmp/dnsmasq.log || true"
docker exec fai bash -c "dnsmasq"
echo "Shutting down node"
if [ -z "$IP_ADDRESS_TO_TURN_OFF" ]; then
    echo "IP_ADDRESS_TO_TURN_OFF is empty"
else
    echo "IP_ADDRESS_TO_TURN_OFF: $IP_ADDRESS_TO_TURN_OFF"
    while true; do
        (timeout 10 ssh \
            -o PasswordAuthentication=no \
            -o StrictHostKeyChecking=no \
            -i $IDENTITY_FILE root@$IP_ADDRESS_TO_TURN_OFF "poweroff") || true
        echo "Waiting for node to be shutdown"
        ping -c1 "$IP_ADDRESS_TO_TURN_OFF" > /dev/null 2>&1 || break;
        sleep 2
    done
fi
# 
wakeonlan || apt install wakeonlan -y
wakeonlan $MAC_ADDRESS
# docker exec -it fai bash -c "touch /tmp/dnsmasq.log"
# docker exec -it fai bash -c "chmod 0777 /tmp/dnsmasq.log"
./pic wait-node-to-shutdown $MAC_ADDRESS $IDENTITY_FILE
IP_ADDRESS_FILE="$HOME/.pic/$MAC_ADDRESS-IP_ADDRESS.txt"
IP_ADDRESS=$(cat $IP_ADDRESS_FILE)
REGISTRY_FOLDER="/var/lib/registry/"
ssh -i $IDENTITY_FILE $IP_ADDRESS "rm -rf $REGISTRY_FOLDER" || true
ssh -i $IDENTITY_FILE $IP_ADDRESS "mkdir -p $REGISTRY_FOLDER" || true
time rsync -avzP -e "ssh -i $IDENTITY_FILE" $REGISTRY_FOLDER $IP_ADDRESS:$REGISTRY_FOLDER

# with avP, the -P option is implied, which is --partial --progress ( --partial enables resuming partial transfers)
echo
ssh -i $IDENTITY_FILE root@$IP_ADDRESS "cat /etc/os-release"
echo "Now you can SSH to the node with this command:"
echo "  ssh -i $IDENTITY_FILE $IP_ADDRESS"

exit 0
