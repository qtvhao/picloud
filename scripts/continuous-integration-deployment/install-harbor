#!/bin/bash
set -e -o pipefail
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
if [ -z "$EMAIL" ]; then
    echo "Please set EMAIL in .env"
    exit 1
fi
set -e -o pipefail
args=("$@")
IDENTIFY_FILE=${args[0]}
helm repo add harbor https://helm.goharbor.io
GITLAB_ROOT_GENERATED_PASSWORD=$(jq -r '.gitlab_root_generated_password' "$HOME/.pic/gitlab.json")
# mount ~/.pic/harbor-registry-data
mkdir -p /harbor-registry-data
chown -R 1000:1000 /harbor-registry-data/
chmod -R 0777 /harbor-registry-data/
mkdir -p /harbor-database-data
chown -R 1000:1000 /harbor-database-data/
chmod -R 0777 /harbor-database-data/
mkdir -p /harbor-jobservice-data
chown -R 1000:1000 /harbor-jobservice-data/
chmod -R 0777 /harbor-jobservice-data/
mkdir -p /harbor-redis-data
chown -R 1000:1000 /harbor-redis-data/
chmod -R 0777 /harbor-redis-data/
mkdir -p /harbor-trivy-data
chown -R 1000:1000 /harbor-trivy-data/
chmod -R 0777 /harbor-trivy-data/

kubectl get namespace harbor-ns || kubectl create namespace harbor-ns
KUBERNETES_HOSTNAME=`kubectl get nodes -o json | jq -r '.items[0].metadata.labels."kubernetes.io/hostname"'`
# create pv and pvc for harbor-registry-data, so that it can be used by helm registry
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: harbor-registry-data
  namespace: harbor-ns
spec:
    storageClassName: local-path
    capacity:
        storage: 20Gi
    accessModes:
        - ReadWriteOnce
    hostPath:
        path: /harbor-registry-data
        type: DirectoryOrCreate
    nodeAffinity:
        required:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - $KUBERNETES_HOSTNAME
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-registry-data
  namespace: harbor-ns
spec:
    volumeName: harbor-registry-data
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
EOF
# create pv and pvc for harbor-database-data
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: harbor-database-data
  namespace: harbor-ns
spec:
    storageClassName: local-path
    capacity:
        storage: 20Gi
    accessModes:
        - ReadWriteOnce
    hostPath:
        path: /harbor-database-data
        type: DirectoryOrCreate
    nodeAffinity:
        required:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - $KUBERNETES_HOSTNAME
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-database-data
  namespace: harbor-ns
spec:
    volumeName: harbor-database-data
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
EOF
# create pv and pvc for harbor-jobservice-data
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: harbor-jobservice-data
  namespace: harbor-ns
spec:
    storageClassName: local-path
    capacity:
        storage: 20Gi
    accessModes:
        - ReadWriteOnce
    hostPath:
        path: /harbor-jobservice-data
        type: DirectoryOrCreate
    nodeAffinity:
        required:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - $KUBERNETES_HOSTNAME
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-jobservice-data
  namespace: harbor-ns
spec:
    volumeName: harbor-jobservice-data
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
EOF
# create pv and pvc for harbor-redis-data
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: harbor-redis-data
  namespace: harbor-ns
spec:
    storageClassName: local-path
    capacity:
        storage: 20Gi
    accessModes:
        - ReadWriteOnce
    hostPath:
        path: /harbor-redis-data
        type: DirectoryOrCreate
    nodeAffinity:
        required:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - $KUBERNETES_HOSTNAME
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-redis-data
  namespace: harbor-ns
spec:
    volumeName: harbor-redis-data
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
EOF
# create pv and pvc for harbor-trivy-data
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: harbor-trivy-data
  namespace: harbor-ns
spec:
    storageClassName: local-path
    capacity:
        storage: 20Gi
    accessModes:
        - ReadWriteOnce
    hostPath:
        path: /harbor-trivy-data
        type: DirectoryOrCreate
    nodeAffinity:
        required:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - $KUBERNETES_HOSTNAME
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-trivy-data
  namespace: harbor-ns
spec:
    volumeName: harbor-trivy-data
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 20Gi
EOF

# install harbor
helm upgrade --install harbor harbor/harbor  -n harbor-ns \
    --set persistence.persistentVolumeClaim.registry.existingClaim=harbor-registry-data \
    --set persistence.persistentVolumeClaim.database.existingClaim=harbor-database-data \
    --set persistence.persistentVolumeClaim.jobservice.existingClaim=harbor-jobservice-data \
    --set persistence.persistentVolumeClaim.redis.existingClaim=harbor-redis-data \
    --set persistence.persistentVolumeClaim.trivy.existingClaim=harbor-trivy-data \
    --set registry.credentials.username=root \
    --set registry.credentials.password=$GITLAB_ROOT_GENERATED_PASSWORD


./pic wait deployment harbor-registry harbor-ns Available

kubectl get secret regcred --namespace default || \
    kubectl create secret docker-registry regcred \
    --docker-server=http-harbor-registry-harbor-ns-5000.$DOMAIN --docker-username=root --docker-password=$GITLAB_ROOT_GENERATED_PASSWORD --namespace default

./pic expose http harbor-registry.harbor-ns 5000 "200"
