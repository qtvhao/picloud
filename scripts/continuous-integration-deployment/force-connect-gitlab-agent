#!/bin/bash
set -e -o pipefail
echo
source .env
FQDN_ADDRESS="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
args=("$@")
GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
echo "GITLAB_TOKEN: $GITLAB_TOKEN"
PROJECT_NAME=${args[0]}
PROJECT="root%2F"$PROJECT_NAME
echo "PROJECT: $PROJECT"
CLUSTER_AGENT=$(curl -s --request POST --header "Authorization: Bearer $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{"name":"gitlab-agent"}' \
    "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT/cluster_agents")
echo "CLUSTER_AGENT: $CLUSTER_AGENT"
ID=$(echo $CLUSTER_AGENT | jq -r '.id')
if [ -z "$ID" ]; then
    echo "ID is empty"
    CLUSTER_AGENT_MESSAGE=$(echo $CLUSTER_AGENT | jq -r '.message')
    if [ "400 Bad request - [\"Name has already been taken\"]" == "$CLUSTER_AGENT_MESSAGE" ]; then
        echo "Cluster agent already exists"
    else
        echo $CLUSTER_AGENT_MESSAGE
        exit 1
    fi
fi
EXISTS_AGENTS=$(curl -s --request GET --header "Authorization: Bearer $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT/cluster_agents")
echo "EXISTS_AGENT: $EXISTS_AGENTS"
FIRST_AGENT_ID=$(echo $EXISTS_AGENTS | jq -r '.[0].id')
echo "FIRST_AGENT_ID: $FIRST_AGENT_ID"
EXISTS_TOKENS=$(curl -s --request GET --header "Authorization: Bearer $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT/cluster_agents/$FIRST_AGENT_ID/tokens")
echo "EXISTS_TOKENS: $EXISTS_TOKENS"
TOKEN_IDS=$(echo $EXISTS_TOKENS | jq -r '.[].id' || echo "")
for TOKEN_ID in $TOKEN_IDS; do
    echo "TOKEN_ID: $TOKEN_ID"
    curl -s --request DELETE --header "Authorization: Bearer $GITLAB_TOKEN" \
        --header "Content-Type: application/json" \
        --data '{"name":"gitlab-agent-token-'$(date +%s)'"}' \
        "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT/cluster_agents/$FIRST_AGENT_ID/tokens/$TOKEN_ID"
done
TOKEN_CREATED=$(curl -s --request POST --header "Authorization: Bearer $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{"name":"gitlab-agent-token-'$(date +%s)'"}' \
    "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT/cluster_agents/$FIRST_AGENT_ID/tokens")
echo "TOKEN_CREATED: $TOKEN_CREATED"
TOKEN_STRING=$(echo $TOKEN_CREATED |  jq -r '.token')
if [ "null" == "$TOKEN_STRING" ]; then
    echo "TOKEN_STRING is null"
    exit 1
fi
echo "TOKEN_STRING: $TOKEN_STRING"
helm uninstall gitlab-agent-$PROJECT_NAME -n gitlab-agent-gitlab-agent || echo ""
VERSION_TO_CHECK="9"
while true; do
    helm search repo gitlab/gitlab --version "7.$VERSION_TO_CHECK.4" | grep "gitlab/gitlab" || break
    # 0, 1, 2, 3 is early version of gitlab
    # 4, 5, 6, 7 is stable version of gitlab
    LATEST_VERSION="$VERSION_TO_CHECK"
    VERSION_TO_CHECK=$((VERSION_TO_CHECK + 1))
    sleep 1
done

#
MINOR_VERSION_TO_CHECK="4"
while true; do
    helm search repo gitlab/gitlab --version "7.$LATEST_VERSION.$MINOR_VERSION_TO_CHECK" | grep "gitlab/gitlab" || break
    LATEST_MINOR_VERSION="$MINOR_VERSION_TO_CHECK"
    MINOR_VERSION_TO_CHECK=$((MINOR_VERSION_TO_CHECK + 1))
    sleep 1
done
#
export K8S_PROXY_URL="https://tcp-gitlab-kas-gitlab-ns-8154.$DOMAIN/k8s-proxy/"
echo "Latest version: 7.$LATEST_VERSION.$LATEST_MINOR_VERSION"

helm upgrade --install gitlab-agent-$PROJECT_NAME gitlab/gitlab-agent \
    --namespace gitlab-agent-gitlab-agent \
    --create-namespace \
    --set "image.tag=v16.$LATEST_VERSION.$LATEST_MINOR_VERSION" \
    --set config.token="$TOKEN_STRING" \
    --set config.kasAddress=wss://tcp-gitlab-kas-gitlab-ns-8150.$DOMAIN

./pic declare-project-variables $PROJECT K8S_PROXY_URL  "$K8S_PROXY_URL"  "production"       "false"
./pic declare-project-variables $PROJECT AGENT_ID       "$FIRST_AGENT_ID"  "production"       "false"

echo "gitlab-agent-$PROJECT_NAME installed"
