#!/bin/bash
set -e -o pipefail
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
if [ -z "$EMAIL" ]; then
    echo "Please set EMAIL in .env"
    exit 1
fi

args=("$@")
IDENTIFY_FILE=${args[0]}
PIC_DIR="$HOME/.pic"
stat "$PIC_DIR"/gitlab.json || \
    jq -n --arg GITLAB_ROOT_GENERATED_PASSWORD "$(openssl rand -hex 16)" '{"gitlab_root_generated_password":$GITLAB_ROOT_GENERATED_PASSWORD}' > "$PIC_DIR"/gitlab.json

PASSWORD=$(jq -r '.gitlab_root_generated_password' "$PIC_DIR"/gitlab.json)
echo "Setting password to $PASSWORD"
# helm repo add gitlab https://charts.gitlab.io/ || echo ""

kubectl get namespace gitlab-ns || kubectl create namespace gitlab-ns
helm uninstall gitlab --namespace gitlab-ns || true

NUM_SECRET=$(kubectl get secrets --namespace gitlab-ns -o name | wc -l)
if [ "$NUM_SECRET" -gt 0 ]; then
    kubectl get secrets --namespace gitlab-ns -o name | xargs kubectl delete --namespace gitlab-ns || true
fi

NUM_PVC=$(kubectl get pvc --namespace gitlab-ns -o name | wc -l)
if [ "$NUM_PVC" -gt 0 ]; then
    kubectl get pvc --namespace gitlab-ns -o name | xargs kubectl delete --namespace gitlab-ns || true
fi
# 
# kubectl get secret/redis -n default -o yaml > redis-secret.yaml
# sed -i 's/namespace: default/namespace: gitlab-ns/g' redis-secret.yaml
# kubectl delete secret --namespace gitlab-ns redis || true
# kubectl apply -f redis-secret.yaml
# rm redis-secret.yaml
# 
PIC_DIR="$HOME/.pic"
# 
RAILS_MINIO_YAML="$HOME/rails_minio.yaml"
echo "provider: AWS"                                                        >  $RAILS_MINIO_YAML
echo "region: minio"                                                        >> $RAILS_MINIO_YAML
ACCESS_KEY_ID=$(cat $PIC_DIR/s3.json | jq -r '.ACCESS_KEY_ID')
SECRET_ACCESS_KEY=$(cat $PIC_DIR/s3.json | jq -r '.SECRET_ACCESS_KEY')
echo "aws_access_key_id: $ACCESS_KEY_ID"                                    >> $RAILS_MINIO_YAML
echo "aws_secret_access_key: $SECRET_ACCESS_KEY"                            >> $RAILS_MINIO_YAML
# echo "endpoint: https://http-tenant-picloud-hl-tenant-ns-9000.$DOMAIN"     >> $RAILS_MINIO_YAML
echo "endpoint: http://tenant-picloud-hl.tenant-ns:9000"     >> $RAILS_MINIO_YAML
echo "path_style: true"                                                     >> $RAILS_MINIO_YAML
kubectl create secret generic gitlab-storage --from-file=connection=$RAILS_MINIO_YAML --namespace gitlab-ns
# 

REGISTRY_MINIO_YAML="$HOME/registry_minio.yaml"
echo "s3:"                                                                          >  $REGISTRY_MINIO_YAML
echo "  v4auth: true"                                                               >> $REGISTRY_MINIO_YAML
echo "  regionendpoint: http://tenant-picloud-hl.tenant-ns:9000"                    >> $REGISTRY_MINIO_YAML
echo "  secure: false"                                                              >> $REGISTRY_MINIO_YAML
echo "  pathstyle: true"                                                            >> $REGISTRY_MINIO_YAML
echo "  region: minio"                                                              >> $REGISTRY_MINIO_YAML
echo "  bucket: gitlab-registry"                                                    >> $REGISTRY_MINIO_YAML
echo "  accesskey: $ACCESS_KEY_ID"                                                  >> $REGISTRY_MINIO_YAML
echo "  secretkey: $SECRET_ACCESS_KEY"                                              >> $REGISTRY_MINIO_YAML
# 
kubectl create secret generic gitlab-registry-storage --from-file=connection=$REGISTRY_MINIO_YAML --namespace gitlab-ns

kubectl create secret generic gitlab-minioaccess \
    --from-literal=accesskey="$ACCESS_KEY_ID" \
    --from-literal=secretkey="$SECRET_ACCESS_KEY" \
    --namespace gitlab-ns

RUNNER_CACHE_YAML="$HOME/runner_cache.yaml"
echo "gitlab-runner:"                                                           >  $RUNNER_CACHE_YAML
echo "  runners:"                                                               >> $RUNNER_CACHE_YAML
echo "    config: |"                                                            >> $RUNNER_CACHE_YAML
echo "      [[runners]]"                                                        >> $RUNNER_CACHE_YAML
echo "        [runners.kubernetes]"                                             >> $RUNNER_CACHE_YAML
echo "          image = \"ubuntu:18.04\""                                       >> $RUNNER_CACHE_YAML
echo "          [runners.cache]"                                                >> $RUNNER_CACHE_YAML
echo "            Type = \"s3\""                                                >> $RUNNER_CACHE_YAML
echo "            Path = \"gitlab-runner\""                                     >> $RUNNER_CACHE_YAML
echo "            Shared = true"                                                >> $RUNNER_CACHE_YAML
echo "            [runners.cache.s3]"                                           >> $RUNNER_CACHE_YAML
echo "              ServerAddress = \"tenant-picloud-hl.tenant-ns:9000\""       >> $RUNNER_CACHE_YAML
echo "              BucketName = \"gitlab-cache\""                              >> $RUNNER_CACHE_YAML
echo "              Insecure = true"                                            >> $RUNNER_CACHE_YAML
echo "    cache:"                                                               >> $RUNNER_CACHE_YAML
echo "      secretName: gitlab-minioaccess"                                     >> $RUNNER_CACHE_YAML
# 


helm list -n gitlab-agent-gitlab-agent -o json | jq -r '.[].name' | grep gitlab | xargs helm uninstall -n gitlab-agent-gitlab-agent || true
kubectl get pods -n gitlab-ns -o json | jq -r '.items[].metadata.name' | xargs kubectl delete pod -n gitlab-ns || true
kubectl get jobs -n gitlab-ns -o json | jq -r '.items[].metadata.name' | xargs kubectl delete job -n gitlab-ns || true

kubectl create secret --namespace gitlab-ns generic gitlab-gitlab-initial-root-password --from-literal=password="$PASSWORD"
helm upgrade --install gitlab https://gitlab-charts.s3.amazonaws.com/gitlab-7.6.0.tgz \
    -f "$RUNNER_CACHE_YAML" \
    --namespace gitlab-ns \
    --set certmanager-issuer.email="$EMAIL",\
global.hosts.kas.name=tcp-gitlab-kas-gitlab-ns-8150."$DOMAIN",\
global.hosts.gitlab.name=http-gitlab-webservice-default-gitlab-ns-8181."$DOMAIN",\
global.hosts.registry.name=http-gitlab-registry-gitlab-ns-5000."$DOMAIN",\
global.hosts.ssh=tcp-gitlab-webservice-default-gitlab-ns-22."$DOMAIN",\
global.edition=ce,\
global.kas.enabled=true,\
gitlab.toolbox.enabled=true,\
gitlab-runner.install=true,\
runners.privileged=true,\
nginx-ingress.enabled=false,\
gitlab-runner.runners.privileged=true \
    --set gitlab.gitaly.persistence.storageClass=local-path \
    --set postgresql.persistence.storageClass=local-path \
    --set minio.persistence.storageClass=local-path \
    --set redis.persistence.storageClass=local-path \
    --set certmanager.install=false \
    --set prometheus.server.enabled=false \
    --set global.ingress.enabled=false \
    --set gitlab.gitlab-exporter.enabled=false \
    --set rbac.create=true \
    --set global.minio.enabled=false \
    --set global.registry.bucket=gitlab-registry \
    --set global.appConfig.terraformState.enabled=true \
    --set global.appConfig.object_store.enabled=true \
    --set global.appConfig.object_store.proxy_download=true \
    --set global.appConfig.object_store.connection.secret=gitlab-storage \
    --set global.appConfig.object_store.connection.key=connection \
    --set global.appConfig.lfs.bucket=gitlab-lfs-storage \
    --set global.appConfig.artifacts.bucket=gitlab-artifacts-storage \
    --set global.appConfig.uploads.bucket=gitlab-uploads-storage \
    --set global.appConfig.packages.bucket=gitlab-packages-storage \
    --set global.appConfig.externalDiffs.bucket=gitlab-external-diffs \
    --set global.appConfig.terraformState.bucket=gitlab-terraform-state \
    --set global.appConfig.dependencyProxy.bucket=gitlab-dependency-proxy \
    --set global.appConfig.backups.bucket=gitlab-backup-upload \
    --set global.appConfig.backups.tmpBucket=gitlab-tmp-storage \
    --set gitlab.toolbox.backups.objectStorage.config.secret=gitlab-storage \
    --set gitlab.toolbox.backups.objectStorage.config.key=connection \
    --set registry.enabled=false \
    --set registry.storage.secret=gitlab-registry-storage \
    --set registry.storage.key=connection &

time ./pic wait pod          gitlab-postgresql-0                 gitlab-ns Ready
# time ./pic logs job/gitlab-migrations-1 gitlab-ns gitlab-migrations-1.log certificates
# time ./pic logs job/gitlab-migrations-1 gitlab-ns gitlab-migrations-1.log configure
time ./pic logs job/gitlab-migrations-1 gitlab-ns gitlab-migrations-1.log migrations
rm gitlab-migrations-1.log
# 
time ./pic logs deployment/gitlab-webservice-default    gitlab-ns gitlab-webservice-default-dependencies.log dependencies
rm gitlab-webservice-default-dependencies.log
time ./pic logs deployment/gitlab-sidekiq-all-in-1-v2   gitlab-ns gitlab-webservice-default-dependencies.log dependencies
TUNNEL_NAMESPACE=gitlab-ns ./pic expose tcp     gitlab-webservice-default.gitlab-ns     22
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http    gitlab-webservice-default.gitlab-ns     8181

TUNNEL_NAMESPACE=default ./pic expose   tcp         gitlab-kas.gitlab-ns            8150 "503"
TUNNEL_NAMESPACE=default ./pic expose   http        gitlab-kas.gitlab-ns            8154 "503" "" "true"
TUNNEL_NAMESPACE=gitlab-ns ./pic expose tcp         gitlab-gitlab-shell.gitlab-ns   22
time ./pic wait deploy       gitlab-kas          gitlab-ns Available
time ./pic wait deploy       gitlab-sidekiq-all-in-1-v2      gitlab-ns Available
time ./pic wait deploy       gitlab-webservice-default       gitlab-ns Available
time ./pic wait deploy       gitlab-gitlab-runner          gitlab-ns Available

kubectl auth can-i '*' '*' --as=system:serviceaccount:gitlab-ns:default || \
    kubectl create clusterrolebinding gitlab-runner-binding --clusterrole=cluster-admin --serviceaccount=gitlab-ns:default

PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
echo "GitLab root password: $PASSWORD"
# 

if [ -z "$IDENTIFY_FILE" ]; then
    echo "IDENTIFY_FILE is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic recommended IDENTIFY_FILE"
fi

if [ -f $IDENTIFY_FILE ]; then
    SSH_PUB_KEY=$(ssh-keygen -f $IDENTIFY_FILE -y)
    ./pic add-ssh-key-gitlab "$SSH_PUB_KEY"
fi
./pic add-ssh-key-gitlab "$(cat ~/.ssh/id_rsa.pub)"
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns    8181    404
