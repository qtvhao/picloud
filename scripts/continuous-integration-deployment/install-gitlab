#!/bin/bash
set -e -o pipefail
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
if [ -z "$EMAIL" ]; then
    echo "Please set EMAIL in .env"
    exit 1
fi
set -e -o pipefail
args=("$@")
IDENTIFY_FILE=${args[0]}
PIC_DIR="$HOME/.pic"
stat "$PIC_DIR"/gitlab.json || \
    jq -n --arg GITLAB_ROOT_GENERATED_PASSWORD "$(openssl rand -hex 16)" '{"gitlab_root_generated_password":$GITLAB_ROOT_GENERATED_PASSWORD}' > "$PIC_DIR"/gitlab.json

PASSWORD=$(jq -r '.gitlab_root_generated_password' "$PIC_DIR"/gitlab.json)
echo "Setting password to $PASSWORD"

helm repo add gitlab https://charts.gitlab.io/ || echo ""
helm repo update
kubectl get namespace gitlab-ns || kubectl create namespace gitlab-ns
helm uninstall gitlab --namespace gitlab-ns || true
kubectl get secrets --namespace gitlab-ns -o name | xargs kubectl delete --namespace gitlab-ns || true
kubectl get pvc --namespace gitlab-ns -o name | xargs kubectl delete --namespace gitlab-ns || true
# 
kubectl get secret/redis -n default -o yaml > redis-secret.yaml
sed -i 's/namespace: default/namespace: gitlab-ns/g' redis-secret.yaml
kubectl delete secret --namespace gitlab-ns redis || true
kubectl apply -f redis-secret.yaml
rm redis-secret.yaml
# 
PIC_DIR="$HOME/.pic"
# 
RAILS_MINIO_YAML="$HOME/rails_minio.yaml"
echo "provider: AWS"                                                        >  $RAILS_MINIO_YAML
echo "region: minio"                                                        >> $RAILS_MINIO_YAML
ACCESS_KEY_ID=$(cat $PIC_DIR/s3.json | jq -r '.ACCESS_KEY_ID')
SECRET_ACCESS_KEY=$(cat $PIC_DIR/s3.json | jq -r '.SECRET_ACCESS_KEY')
echo "aws_access_key_id: $ACCESS_KEY_ID"                                    >> $RAILS_MINIO_YAML
echo "aws_secret_access_key: $SECRET_ACCESS_KEY"                            >> $RAILS_MINIO_YAML
echo "endpoint: https://https-tenant-picloud-hl-tenant-ns-9000.$DOMAIN"     >> $RAILS_MINIO_YAML
echo "path_style: true"                                                     >> $RAILS_MINIO_YAML
kubectl create secret generic gitlab-storage --from-file=connection=$RAILS_MINIO_YAML --namespace gitlab-ns

REGISTRY_MINIO_YAML="$HOME/registry_minio.yaml"
echo "s3:"                                                                          >  $REGISTRY_MINIO_YAML
echo "  v4auth: true"                                                               >> $REGISTRY_MINIO_YAML
echo "  regionendpoint: https://https-tenant-picloud-hl-tenant-ns-9000.$DOMAIN"     >> $REGISTRY_MINIO_YAML
echo "  secure: false"                                                              >> $REGISTRY_MINIO_YAML
echo "  pathstyle: true"                                                            >> $REGISTRY_MINIO_YAML
echo "  region: minio"                                                              >> $REGISTRY_MINIO_YAML
echo "  bucket: gitlab-registry"                                                    >> $REGISTRY_MINIO_YAML
echo "  accesskey: $ACCESS_KEY_ID"                                                  >> $REGISTRY_MINIO_YAML
echo "  secretkey: $SECRET_ACCESS_KEY"                                              >> $REGISTRY_MINIO_YAML
# 
kubectl create secret generic gitlab-registry-storage --from-file=connection=$REGISTRY_MINIO_YAML --namespace gitlab-ns


kubectl create secret generic gitlab-minioaccess \
    --from-literal=accesskey="$ACCESS_KEY_ID" \
    --from-literal=secretkey="$SECRET_ACCESS_KEY" \
    --namespace gitlab-ns

RUNNER_CACHE_YAML="$HOME/runner_cache.yaml"
echo "gitlab-runner:"                                                           >  $RUNNER_CACHE_YAML
echo "  runners:"                                                               >> $RUNNER_CACHE_YAML
echo "    config: |"                                                            >> $RUNNER_CACHE_YAML
echo "      [[runners]]"                                                        >> $RUNNER_CACHE_YAML
echo "        [runners.kubernetes]"                                             >> $RUNNER_CACHE_YAML
echo "          image = \"ubuntu:18.04\""                                       >> $RUNNER_CACHE_YAML
echo "          [runners.cache]"                                                >> $RUNNER_CACHE_YAML
echo "            Type = \"s3\""                                                >> $RUNNER_CACHE_YAML
echo "            Path = \"gitlab-runner\""                                     >> $RUNNER_CACHE_YAML
echo "            Shared = true"                                                >> $RUNNER_CACHE_YAML
echo "            [runners.cache.s3]"                                           >> $RUNNER_CACHE_YAML
echo "              ServerAddress = \"https-tenant-picloud-hl-tenant-ns-9000.$DOMAIN\""       >> $RUNNER_CACHE_YAML
echo "              BucketName = \"gitlab-cache\""                              >> $RUNNER_CACHE_YAML
# echo "              Insecure = true"                                            >> $RUNNER_CACHE_YAML
echo "    cache:"                                                               >> $RUNNER_CACHE_YAML
echo "      secretName: gitlab-minioaccess"                                     >> $RUNNER_CACHE_YAML

kubectl create secret --namespace gitlab-ns generic gitlab-gitlab-initial-root-password --from-literal=password="$PASSWORD"
helm upgrade --install gitlab gitlab/gitlab \
    -f "$RUNNER_CACHE_YAML" \
    --namespace gitlab-ns \
    --set certmanager-issuer.email="$EMAIL",\
global.hosts.kas.name=tcp-gitlab-kas-gitlab-ns-8150."$DOMAIN",\
global.hosts.gitlab.name=http-gitlab-webservice-default-gitlab-ns-8181."$DOMAIN",\
global.hosts.registry.name=http-gitlab-registry-gitlab-ns-5000."$DOMAIN",\
global.hosts.https=false,\
global.hosts.ssh=tcp-gitlab-webservice-default-gitlab-ns-22."$DOMAIN",\
global.edition=ce,\
global.kas.enabled=false,\
gitlab.toolbox.enabled=false,\
gitlab-runner.install=false,\
runners.privileged=true,\
redis.install=false,\
global.redis.host=redis-master.default.svc.cluster.local,\
global.redis.auth.secret=redis,\
global.redis.auth.key=redis-password,\
nginx-ingress.enabled=false,\
gitlab-runner.runners.privileged=true \
    --set rbac.create=true \
    --set global.minio.enabled=false \
    --set global.registry.bucket=gitlab-registry \
    --set global.appConfig.terraformState.enabled=true \
    --set global.appConfig.object_store.enabled=true \
    --set global.appConfig.object_store.proxy_download=true \
    --set global.appConfig.object_store.connection.secret=gitlab-storage \
    --set global.appConfig.object_store.connection.key=connection \
    --set global.appConfig.lfs.bucket=gitlab-lfs-storage \
    --set global.appConfig.artifacts.bucket=gitlab-artifacts-storage \
    --set global.appConfig.uploads.bucket=gitlab-uploads-storage \
    --set global.appConfig.packages.bucket=gitlab-packages-storage \
    --set global.appConfig.externalDiffs.bucket=gitlab-external-diffs \
    --set global.appConfig.terraformState.bucket=gitlab-terraform-state \
    --set global.appConfig.dependencyProxy.bucket=gitlab-dependency-proxy \
    --set global.appConfig.backups.bucket=gitlab-backup-upload \
    --set global.appConfig.backups.tmpBucket=gitlab-tmp-storage \
    --set gitlab.toolbox.backups.objectStorage.config.secret=gitlab-storage \
    --set gitlab.toolbox.backups.objectStorage.config.key=connection \
    --set registry.storage.secret=gitlab-registry-storage \
    --set registry.storage.key=connection \
    &

kubectl delete deployment cloudflared-default -n gitlab-ns || true
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns 8181   502
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-registry.gitlab-ns           5000   502
# ./pic wait deploy       gitlab-minio                    gitlab-ns Available
./pic wait deploy       gitlab-registry                 gitlab-ns Available
# ./pic wait deploy     gitlab-toolbox                  gitlab-ns Available
./pic wait jobs         gitlab-issuer-1                 gitlab-ns complete
./pic wait deploy       gitlab-sidekiq-all-in-1-v2      gitlab-ns Available
./pic wait pod          gitlab-gitaly-0                 gitlab-ns Ready
./pic wait jobs         gitlab-migrations-1             gitlab-ns complete
./pic wait deploy       gitlab-webservice-default       gitlab-ns Available
TUNNEL_NAMESPACE=gitlab-ns ./pic expose tcp     gitlab-gitlab-shell.gitlab-ns   22
TUNNEL_NAMESPACE=gitlab-ns ./pic expose tcp     gitlab-webservice-default.gitlab-ns    22
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns    8181    404
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-registry.gitlab-ns              5000    404 "" "true"
# 
export FQDN_RECORD="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
while true; do
    status_code=$(curl -s -o /dev/null -w "%{http_code}" https://$FQDN_RECORD/users/sign_in || true)
    echo "Waiting for $FQDN_RECORD/users/sign_in to be ready. Status code: $status_code. Expected status code: 200"
    if [ "$status_code" == "200" ]; then
        break
    fi
    sleep 5
done
while true; do
    kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password && break || sleep 5
done
helm upgrade --install gitlab gitlab/gitlab \
    -f "$RUNNER_CACHE_YAML" \
    --namespace gitlab-ns \
    --set certmanager-issuer.email="$EMAIL",\
global.hosts.kas.name=tcp-gitlab-kas-gitlab-ns-8150."$DOMAIN",\
global.hosts.gitlab.name=http-gitlab-webservice-default-gitlab-ns-8181."$DOMAIN",\
global.hosts.registry.name=http-gitlab-registry-gitlab-ns-5000."$DOMAIN",\
global.hosts.https=false,\
global.hosts.ssh=tcp-gitlab-webservice-default-gitlab-ns-22."$DOMAIN",\
global.edition=ce,\
global.kas.enabled=true,\
gitlab.toolbox.enabled=true,\
gitlab-runner.install=true,\
runners.privileged=true,\
redis.install=false,\
global.redis.host=redis-master.default.svc.cluster.local,\
global.redis.auth.secret=redis,\
global.redis.auth.key=redis-password,\
nginx-ingress.enabled=false,\
gitlab-runner.runners.privileged=true \
    --set rbac.create=true \
    --set global.minio.enabled=false \
    --set global.registry.bucket=gitlab-registry \
    --set global.appConfig.terraformState.enabled=true \
    --set global.appConfig.object_store.enabled=true \
    --set global.appConfig.object_store.proxy_download=true \
    --set global.appConfig.object_store.connection.secret=gitlab-storage \
    --set global.appConfig.object_store.connection.key=connection \
    --set global.appConfig.lfs.bucket=gitlab-lfs-storage \
    --set global.appConfig.artifacts.bucket=gitlab-artifacts-storage \
    --set global.appConfig.uploads.bucket=gitlab-uploads-storage \
    --set global.appConfig.packages.bucket=gitlab-packages-storage \
    --set global.appConfig.externalDiffs.bucket=gitlab-external-diffs \
    --set global.appConfig.terraformState.bucket=gitlab-terraform-state \
    --set global.appConfig.dependencyProxy.bucket=gitlab-dependency-proxy \
    --set global.appConfig.backups.bucket=gitlab-backup-upload \
    --set global.appConfig.backups.tmpBucket=gitlab-tmp-storage \
    --set gitlab.toolbox.backups.objectStorage.config.secret=gitlab-storage \
    --set gitlab.toolbox.backups.objectStorage.config.key=connection \
    --set registry.storage.secret=gitlab-registry-storage \
    --set registry.storage.key=connection \
    &

./pic wait deploy       gitlab-kas          gitlab-ns Available
./pic wait deploy       gitlab-sidekiq-all-in-1-v2      gitlab-ns Available
./pic wait jobs gitlab-migrations-2     gitlab-ns complete
./pic wait deploy       gitlab-webservice-default       gitlab-ns Available
./pic wait deploy       gitlab-gitlab-runner          gitlab-ns Available
TUNNEL_NAMESPACE=default ./pic expose tcp       gitlab-kas.gitlab-ns 8150
TUNNEL_NAMESPACE=default ./pic expose http      gitlab-kas.gitlab-ns 8154 404 "" "true"
kubectl auth can-i -A '*' '*' || \
    kubectl create clusterrolebinding gitlab-runner-binding --clusterrole=cluster-admin --serviceaccount=gitlab-ns:default

PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
echo "GitLab root password: $PASSWORD"
kubectl create secret docker-registry regcred --docker-server=http-gitlab-registry-5000.$DOMAIN --docker-username=root --docker-password=$PASSWORD --docker-email=$EMAIL || echo ""
# 
GITLAB_OAUTH_URL="https://$FQDN_RECORD/oauth/token"
while true; do
    status_code=$(curl -s -o /dev/null -w "%{http_code}" $GITLAB_OAUTH_URL || true)
    echo "Waiting for $GITLAB_OAUTH_URL to be ready. Status code: $status_code. Expected status code: 302"
    if [ "$status_code" == "302" ]; then
        break
    fi
    sleep 5
done
echo "GITLAB_OAUTH_URL: $GITLAB_OAUTH_URL"

GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
if [ -z "$IDENTIFY_FILE" ]; then
    echo "IDENTIFY_FILE is empty. Specify a node ip for the new machine."
    echo "Usage: ./pic recommended IDENTIFY_FILE"
fi

if [ -f $IDENTIFY_FILE ]; then
    SSH_PUB_KEY=$(ssh-keygen -f $IDENTIFY_FILE -y)
    ./pic add-ssh-key-gitlab "$SSH_PUB_KEY"
fi
./pic add-ssh-key-gitlab "$(cat ~/.ssh/id_rsa.pub)"
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns    8181    404
