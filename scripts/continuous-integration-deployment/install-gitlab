#!/bin/bash
set -e -o pipefail
source .env
if [ -z "$DOMAIN" ]; then
    echo "Please set DOMAIN in .env"
    exit 1
fi
if [ -z "$EMAIL" ]; then
    echo "Please set EMAIL in .env"
    exit 1
fi
set -e -o pipefail
args=("$@")
PASSWORD=${args[0]}
IDENTIFY_FILE=${args[1]}
echo "Setting password to $PASSWORD"

helm repo add gitlab https://charts.gitlab.io/ || echo ""
helm repo update
kubectl get namespace gitlab-ns || kubectl create namespace gitlab-ns
kubectl get secret/redis -n default -o yaml > redis-secret.yaml
sed -i 's/namespace: default/namespace: gitlab-ns/g' redis-secret.yaml
kubectl delete secret --namespace gitlab-ns redis || true
kubectl apply -f redis-secret.yaml
rm redis-secret.yaml
kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password && kubectl delete secret --namespace gitlab-ns gitlab-gitlab-initial-root-password || true
helm uninstall gitlab --namespace gitlab-ns || true
# remove all secrets from gitlab-ns
kubectl get secrets --namespace gitlab-ns -o name | xargs kubectl delete --namespace gitlab-ns || true
kubectl create secret --namespace gitlab-ns generic gitlab-gitlab-initial-root-password --from-literal=password="$PASSWORD"
helm upgrade --install gitlab gitlab/gitlab \
    --namespace gitlab-ns \
    --set certmanager-issuer.email="$EMAIL",\
global.hosts.gitlab.name=http-gitlab-webservice-default-gitlab-ns-8181."$DOMAIN",\
global.hosts.registry.name=http-gitlab-registry-gitlab-ns-5000."$DOMAIN",\
global.edition=ce,\
global.kas.enabled=false,\
gitlab.toolbox.enabled=false,\
gitlab-runner.install=false,\
runners.privileged=true,\
redis.install=false,\
global.redis.host=redis-master.default.svc.cluster.local,\
global.redis.auth.secret=redis,\
global.redis.auth.key=redis-password,\
nginx-ingress.enabled=false,\
gitlab-runner.runners.privileged=true &
#   --set global.ingress.tls.enabled=true,\
# 
# global.appConfig.certmanager.enabled=true,\
# global.edition=ce,\
# certmanager.install=true,\
# global.ingress.configureCertmanager=false,\
# global.kas.tls.enabled=true,\
# nginx-ingress.enabled=false,\
#  &
kubectl delete deployment cloudflared-default -n gitlab-ns || true
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns 8181 502
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-registry.gitlab-ns           5000 502
./pic wait deploy       gitlab-minio                  gitlab-ns Available
./pic wait deploy       gitlab-registry               gitlab-ns Available
# ./pic wait deploy       gitlab-toolbox                gitlab-ns Available
./pic wait deploy       gitlab-sidekiq-all-in-1-v2    gitlab-ns Available
./pic wait deploy       gitlab-webservice-default     gitlab-ns Available
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-webservice-default.gitlab-ns  8181 404
TUNNEL_NAMESPACE=gitlab-ns ./pic expose http gitlab-registry.gitlab-ns            5000 404
TUNNEL_NAMESPACE=gitlab-ns ./pic expose tcp gitlab-webservice-default   22
export FQDN_RECORD="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
while true; do
    status_code=$(curl -s -o /dev/null -w "%{http_code}" https://$FQDN_RECORD/users/sign_in || true)
    echo "Waiting for $FQDN_RECORD to be ready. Status code: $status_code. Expected status code: 200"
    if [ "$status_code" == "200" ]; then
        break
    fi
    sleep 5
done
while true; do
    kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password && break || sleep 5
done
helm upgrade --install gitlab gitlab/gitlab \
    --namespace gitlab-ns \
    --set certmanager-issuer.email="$EMAIL",\
global.hosts.gitlab.name=http-gitlab-webservice-default-gitlab-ns-8181."$DOMAIN",\
global.hosts.registry.name=http-gitlab-registry-gitlab-ns-5000."$DOMAIN",\
global.edition=ce,\
global.kas.enabled=false,\
gitlab.toolbox.enabled=false,\
gitlab-runner.install=true,\
runners.privileged=true,\
redis.install=false,\
global.redis.host=redis-master.default.svc.cluster.local,\
global.redis.auth.secret=redis,\
global.redis.auth.key=redis-password,\
nginx-ingress.enabled=false,\
gitlab-runner.runners.privileged=true &
./pic wait deploy       gitlab-gitlab-runner          gitlab-ns Available

PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
echo "GitLab root password: $PASSWORD"
kubectl create secret docker-registry regcred --docker-server=http-gitlab-registry-5000.$DOMAIN --docker-username=root --docker-password=$PASSWORD --docker-email=$EMAIL || echo ""
