#!/bin/bash

set -xeo pipefail
args=("$@")
ORG_NAME=${args[0]}
PAT=${args[1]}
if [ -z "$PAT" ]; then
    echo "PAT is required"
    exit 1
fi
IDENTITY_FILE=${args[2]}
if [ -z "$ORG_NAME" ]; then
    echo "ORG_NAME is required"
    exit 1
fi
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is required"
    exit 1
fi
if [ ! -f "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE does not exist"
    exit 1
fi
ENV_CREDS_FILE=".env.creds"
if [ ! -f "$ENV_CREDS_FILE" ]; then
    echo "ENV_CREDS_FILE does not exist. It should contain the following variable "PAT" in order to create a mirror push"
    exit 1
fi
EXCLUDES=${args[3]}
if [ -z "$EXCLUDES" ]; then
    EXCLUDES=""
fi
API_URL="https://api.github.com/orgs/$ORG_NAME/repos"
# curl -X GET -u "$ORG_NAME:$PAT" "$API_URL" | jq -r '.[]'
full_names=$(curl -s -X GET -u "$ORG_NAME:$PAT" "$API_URL")
full_names=$(echo $full_names | jq -r '.[] | select(.archived == false)')
#  | jq -r '.[] | .full_name'
full_names=$(echo $full_names | jq -r '.full_name')
THIS_REPO=$ORG_NAME"/"`(cd .. && basename $(git rev-parse --show-toplevel))` || true
FILTERED_FULL_NAMES=""
if [ ! -z "$THIS_REPO" ]; then
    GITHUB_PRIVATE=$ORG_NAME"/.github-private"
    # remove this repo from the list
    for REPO in $full_names; do
        if [ "$GITHUB_PRIVATE" == "$REPO" ]; then
            continue
        fi
        # if [ "$REPO" != "$THIS_REPO" ]; then
        FILTERED_FULL_NAMES="$FILTERED_FULL_NAMES $REPO"
        # fi
    done
fi
full_names=$FILTERED_FULL_NAMES
echo "full_names: $full_names"
ssh-keygen -R github.com
ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts
MSG=$(ssh -T -i "$IDENTITY_FILE" git@github.com 2>&1 || true)
if [[ "$MSG" != *"successfully authenticated"* ]]; then
    echo "ERROR: $MSG"
    exit 1
fi
echo "MSG: $MSG"
# 
GITHUB_AUTH="git:$PAT"
for REPO in  $full_names;
do
    REPO_NAME=$(basename $REPO)
    if [ -d "../$REPO_NAME" ]; then
        echo "REPO_NAME: $REPO_NAME"
    fi
    PROJECT_NAME=$(echo $REPO_NAME)
    # if PROJECT_NAME is starts with dot, skip
    if [[ "$PROJECT_NAME" == .* ]]; then
        echo "Skip $PROJECT_NAME"
        continue
    fi
    echo "PROJECT_NAME: $PROJECT_NAME"
    PIPELINE_OPTIONS=""
    for EXCLUDE in $EXCLUDES; do
        PATH_TO_EXCLUDE="$ORG_NAME/$EXCLUDE"
        if [ "$PATH_TO_EXCLUDE" == "$REPO" ]; then
            PIPELINE_OPTIONS="no-create-pipelibe"
        fi
    done
    
    if [ "$REPO" != "$THIS_REPO" ]; then
        CLONE_DIR=".."
    else
        CLONE_DIR=""
    fi
    while ! ./pic git-folk git@github.com:$REPO.git "$IDENTITY_FILE" "$CLONE_DIR" "$PIPELINE_OPTIONS"; do
        echo "Retrying..."
        sleep 60
    done
done
echo "Mirror org $ORG_NAME successfully"
