#!/bin/bash
set -xe -o pipefail
echo
source .env
args=("$@")
REPO_URL=${args[0]}
IDENTITY_FILE=${args[1]}
CLONE_DIR=${args[2]}
PIPELINE_OPTIONS=${args[3]}
if [ -z "$PIPELINE_OPTIONS" ]; then
    PIPELINE_OPTIONS=""
fi
if [ -z "$REPO_URL" ]; then
    echo "REPO_URL is empty"
    exit 1
fi
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty"
    exit 1
fi
if [ ! -f $IDENTITY_FILE ]; then
    echo "$IDENTITY_FILE does not exist"
    exit 1
fi
REPO_NAME=$(echo $REPO_URL | sed 's/.*\///')
REPO_NAME_IN_LOWER_CASE=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')
REPO_URL_ENDS_WITH_GIT="x"$(echo $REPO_URL | grep '\.git$' | wc -l) || true
if [ "x0" != "$REPO_URL_ENDS_WITH_GIT" ]; then
    REPO_NAME=$(echo $REPO_URL | sed 's/.*\///' | sed 's/\.git$//')
else
    echo "REPO_URL does not end with .git"
    exit 1
fi
FQDN_ADDRESS="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION=$(echo $REPO_NAME_IN_LOWER_CASE | sed 's/\.git$//')
PAYLOAD=$(jq --null-input \
    --arg path "$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION" \
    '{path: $path}')

echo "PAYLOAD: $PAYLOAD"
kubectl rollout restart statefulset/gitlab-gitaly -n gitlab-ns
# 
while true; do
    HTTP_CODE_API_V4_PROJECTS=$(curl -X GET --url https://$FQDN_ADDRESS/api/v4/projects/ --write-out "%{http_code}\n" --silent --output /dev/null)
    echo "HTTP_CODE_API_V4_PROJECTS: $HTTP_CODE_API_V4_PROJECTS"
    if [ "200" == "$HTTP_CODE_API_V4_PROJECTS" ]; then
        break;
    fi
    sleep 2
done
while true; do
    POST_PROJECT=$(curl --request POST \
        --header "Authorization: Bearer $GITLAB_TOKEN" \
        --header "Content-Type: application/json" \
        --data "$PAYLOAD" \
        --silent \
        --url "https://$FQDN_ADDRESS/api/v4/projects/")
    echo "POST_PROJECT: $POST_PROJECT"
    MESSAGE=$(echo $POST_PROJECT | jq -r ".message")
    MESSAGE_BASE=$(echo $MESSAGE | jq -r ".base")
    MESSAGES_NAME=$(echo $MESSAGE | jq -r ".name")
    if [ "null" != "$MESSAGES_NAME" ]; then
        echo "MESSAGES_NAME: $MESSAGES_NAME"
        echo "MESSAGE: $MESSAGE"
        # if [ "has already been taken" == "$MESSAGES_NAME" ]; then
        if [ "has already been taken" == "$(echo $MESSAGES_NAME | jq -r ".[0]")" ]; then
            echo "Project $REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION already exists"
        else
            continue;
        fi
    fi
    if [ "null" != "$MESSAGE_BASE" ]; then
        echo "MESSAGE_BASE: $MESSAGE_BASE"
        echo "MESSAGE: $MESSAGE"
        continue;
    fi
    if [ "403 Forbidden" == "$MESSAGE" ]; then
        echo "You need to create a personal access token with api scope in order to create a project"
        echo "https://$FQDN_ADDRESS/profile/personal_access_tokens"
        continue;
    fi
    break;
done
(kubectl logs statefulset/gitlab-gitaly -n gitlab-ns -f > ./gitlab-gitaly.log) &

PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
echo "GitLab root password: $PASSWORD"
rm -rf pic-repos || true
mkdir pic-repos
echo "Cloning $REPO_NAME from $REPO_URL"
HEAD=$(git rev-parse --abbrev-ref HEAD)
# export GIT_SSH_COMMAND="ssh -o ProxyCommand=\"cloudflared access ssh --hostname %h\""
REMOTE_REPO="https://root:$PASSWORD@$FQDN_ADDRESS/root/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION.git"
# echo "HEAD: $HEAD"
IDENTITY_FILE=$(realpath $IDENTITY_FILE)
SSH_FQDN_ADDRESS="tcp-gitlab-gitlab-shell-gitlab-ns-22.$DOMAIN"
IS_GITHUB_OR_BITBUCKET_OR_CODECOMMIT="x"$(echo $REPO_URL | grep -E "github|bitbucket|codecommit" | wc -l) || true
if [ "x0" != "$IS_GITHUB_OR_BITBUCKET_OR_CODECOMMIT" ]; then
    echo "IS_GITHUB_OR_BITBUCKET_OR_CODECOMMIT: $IS_GITHUB_OR_BITBUCKET_OR_CODECOMMIT"
    REMOTE_DOMAIN=$(echo $REPO_URL | sed 's/.*@//' | sed 's/\/.*//' | sed 's/:.*//') # which return github.com
    echo "REMOTE_DOMAIN: $REMOTE_DOMAIN"
    if [ "https" == "$REMOTE_DOMAIN" ]; then
        echo "Using https"
    else
        ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$REMOTE_DOMAIN"
        ssh-keyscan -H "$REMOTE_DOMAIN" >> ~/.ssh/known_hosts
    fi
fi
while true; do
    echo "Cloning $REPO_NAME from $REPO_URL"
    if [ -d "pic-repos/$REPO_NAME" ]; then
        rm -rf "pic-repos/$REPO_NAME"
    fi
    (cd pic-repos && \
        GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git clone $REPO_URL $REPO_NAME \
    ) && break || true
    sleep 5
done
(cd "pic-repos/$REPO_NAME" && \
    git remote get-url origintemp || git remote add origintemp $REPO_URL )

# 
current_branch=$(cd pic-repos/$REPO_NAME && git rev-parse --abbrev-ref HEAD)
max=$(cd "pic-repos/$REPO_NAME" && git rev-list --count HEAD)
(cd pic-repos/$REPO_NAME && GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git fetch --all)
for branch in `cd pic-repos/$REPO_NAME && GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git branch -r | grep -vE "HEAD"`; do
    echo "Checkout $branch"
    branch=$(echo $branch | sed 's/origin\///')
    (cd pic-repos/$REPO_NAME && GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git checkout -b $branch origin/$branch) || true
done

echo "current_branch: $current_branch"
echo "max: $max"
# max=$((max-1))
for i in $(seq 1 +10 $max); do
    echo "Checking out $i (increasing 1 to $max)"
    (cd pic-repos/$REPO_NAME && git checkout $current_branch~$i) > /dev/null 2>&1 || true
done;
i=$((i-10))
echo
(cd pic-repos/$REPO_NAME && git remote get-url gitlab || git remote add gitlab $REMOTE_REPO)
wait_http_code_remote_repo() {
    EXPECTED_HTTP_CODE_REMOTE_REPO=$1
    while true; do
        HTTP_CODE_REMOTE_REPO=$(curl --write-out "%{http_code}\n" --silent --output /dev/null $REMOTE_REPO)
        echo "HTTP_CODE_REMOTE_REPO: $HTTP_CODE_REMOTE_REPO"
        if [ "$EXPECTED_HTTP_CODE_REMOTE_REPO" == "$HTTP_CODE_REMOTE_REPO" ]; then
            echo "HTTP_CODE_REMOTE_REPO: $HTTP_CODE_REMOTE_REPO"
            break;
        fi
        sleep 8
    done
}
for i in $(seq $i -50 1) ""; do
    wait_http_code_remote_repo 302
    if [ -z "$i" ]; then
        refspec="$current_branch"
    else
        refspec="$current_branch~$i"
    fi
    (cd pic-repos/$REPO_NAME && git checkout "$refspec" && timeout 60 git push gitlab HEAD:refs/heads/$current_branch -o ci.skip) || true
    echo "Checking out $i (decreasing $max to 1) and pushing to gitlab"
done;

while true; do
    wait_http_code_remote_repo 302
    echo "Pushing $REPO_NAME to gitlab"
    (cd pic-repos/$REPO_NAME && git checkout $current_branch && \
        GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git pull --set-upstream origin $current_branch && \
        git pull gitlab $current_branch && \
        timeout 60 git push --set-upstream gitlab --all -o ci.skip) && break || true
done
CI_REGISTRY="harbor-registry.harbor-ns:5000"
CI_REGISTRY_IMAGE="$CI_REGISTRY/root/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION"
./pic declare-project-variables root%2F$REPO_NAME CI_REGISTRY           "$CI_REGISTRY"
./pic declare-project-variables root%2F$REPO_NAME CI_REGISTRY_IMAGE     "$CI_REGISTRY_IMAGE"
./pic declare-project-variables root%2F$REPO_NAME CI_REGISTRY_PASSWORD  "$PASSWORD"
./pic declare-project-variables root%2F$REPO_NAME CI_REGISTRY_USER      "root" "*" false
rm -rf pic-repos

if [ "no-create-pipeline" != "$PIPELINE_OPTIONS" ]; then
    ./pic create-pipeline root%2F$REPO_NAME main "wait-for-success" || \
        ./pic create-pipeline root%2F$REPO_NAME master "wait-for-success"
    ./pic create-pipeline root%2F$REPO_NAME develop "wait-for-success" || true
fi

./pic force-connect-gitlab-agent $REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION

export GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE \
    -o StrictHostKeyChecking=no \
    -o ProxyCommand=\"cloudflared access ssh --hostname %h\" -o StrictHostKeyChecking=no"
if [ ! -z "$CLONE_DIR" ]; then
    echo "CLONE_DIR: $CLONE_DIR/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "$SSH_FQDN_ADDRESS"
    git clone $REMOTE_REPO $CLONE_DIR/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION || \
        (cd $CLONE_DIR/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION && \
            echo "Updating $CLONE_DIR/$REPO_NAME_IN_LOWER_CASE_WITHOUT_EXTENSION" && \
            git config pull.rebase false && git pull)
fi
./pic create-remote-mirrors "$REPO_URL"
kubectl rollout restart statefulset/gitlab-gitaly -n gitlab-ns
