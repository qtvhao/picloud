#!/bin/bash
set -e -o pipefail
echo
source .env
args=("$@")
REPO_URL=${args[0]}
IDENTITY_FILE=${args[1]}
CLONE_DIR=${args[2]}
if [ -z "$REPO_URL" ]; then
    echo "REPO_URL is empty"
    exit 1
fi
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty"
    exit 1
fi
if [ ! -f $IDENTITY_FILE ]; then
    echo "$IDENTITY_FILE does not exist"
    exit 1
fi
REPO_NAME=$(echo $REPO_URL | sed 's/.*\///')
REPO_URL_ENDS_WITH_GIT="x"$(echo $REPO_URL | grep '\.git$' | wc -l) || true
if [ "x0" != "$REPO_URL_ENDS_WITH_GIT" ]; then
    REPO_NAME=$(echo $REPO_URL | sed 's/.*\///' | sed 's/\.git$//')
else
    echo "REPO_URL does not end with .git"
    exit 1
fi
PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
# echo "GitLab root password: $PASSWORD"
rm -rf pic-repos || true
mkdir pic-repos
echo "Cloning $REPO_NAME from $REPO_URL"
HEAD=$(git rev-parse --abbrev-ref HEAD)
# export GIT_SSH_COMMAND="ssh -o ProxyCommand=\"cloudflared access ssh --hostname %h\""
REPO_NAME_IN_LOWER_CASE=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')
FQDN_ADDRESS="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
REMOTE_REPO="https://root:$PASSWORD@$FQDN_ADDRESS/root/$REPO_NAME_IN_LOWER_CASE.git"
# echo "REMOTE_REPO: $REMOTE_REPO"
# echo "HEAD: $HEAD"
WORK_DIR=$(pwd)
IDENTITY_FILE="$WORK_DIR/$IDENTITY_FILE"
while true; do
    (cd pic-repos && pwd && GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git clone $REPO_URL $REPO_NAME && break) || true
    sleep 5
done
# 
while true; do
    (cd pic-repos && cd $REPO_NAME && git push --set-upstream $REMOTE_REPO && break) || true
    sleep 5
done
# if $CLONE_DIR is not empty, then clone the repo in $CLONE_DIR/$REPO_NAME
SSH_FQDN_ADDRESS="tcp-gitlab-gitlab-shell-gitlab-ns-22.$DOMAIN"
SSH_REMOTE_REPO="git@$SSH_FQDN_ADDRESS:root/$REPO_NAME_IN_LOWER_CASE.git"
if [ ! -z "$CLONE_DIR" ]; then
    echo "CLONE_DIR: $CLONE_DIR/$REPO_NAME"
    GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE -o ProxyCommand=\"cloudflared access ssh --hostname %h\" -o StrictHostKeyChecking=no" \
        git clone $SSH_REMOTE_REPO $CLONE_DIR/$REPO_NAME
fi
rm -rf pic-repos