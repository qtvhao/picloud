#!/bin/bash
set -e -o pipefail
echo
source .env
args=("$@")
REPO_URL=${args[0]}
IDENTITY_FILE=${args[1]}
if [ -z "$REPO_URL" ]; then
    echo "REPO_URL is empty"
    exit 1
fi
if [ -z "$IDENTITY_FILE" ]; then
    echo "IDENTITY_FILE is empty"
    exit 1
fi
REPO_NAME=$(echo $REPO_URL | sed 's/.*\///')
REPO_URL_ENDS_WITH_GIT=$(echo $REPO_URL | grep -c "\.git$")
if [ $REPO_URL_ENDS_WITH_GIT -eq 0 ]; then
    echo "REPO_URL does not end with .git"
else
    REPO_NAME=$(echo $REPO_URL | sed 's/.*\///' | sed 's/\.git$//')
fi
echo "REPO_NAME: $REPO_NAME"
PASSWORD=$(kubectl get secret --namespace gitlab-ns gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 --decode)
echo "GitLab root password: $PASSWORD"
rm -rf pic-repos || true
mkdir pic-repos
echo "Cloning $REPO_NAME from $REPO_URL"
HEAD=$(git rev-parse --abbrev-ref HEAD)
# export GIT_SSH_COMMAND="ssh -o ProxyCommand=\"cloudflared access ssh --hostname %h\""
REPO_NAME_IN_LOWER_CASE=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')
REMOTE_REPO="https://root:$PASSWORD@http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN/root/$REPO_NAME_IN_LOWER_CASE.git"
echo "REMOTE_REPO: $REMOTE_REPO"
echo "HEAD: $HEAD"
WORK_DIR=$(pwd)
IDENTITY_FILE="$WORK_DIR/$IDENTITY_FILE"
( \
    cd pic-repos && pwd && GIT_SSH_COMMAND="ssh -i $IDENTITY_FILE" git clone $REPO_URL $REPO_NAME && \
    cd $REPO_NAME && echo "ssh -i" && \
    git push --set-upstream $REMOTE_REPO \
)
rm -rf pic-repos