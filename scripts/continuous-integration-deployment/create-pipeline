set -xe -o pipefail
source .env
GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
FQDN_ADDRESS="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
args=("$@")
PROJECT_NAME=${args[0]}
ref=${args[1]}
option2=${args[2]}
URL="https://$FQDN_ADDRESS/api/v4/projects/$PROJECT_NAME/pipeline"
PAYLOAD=$(jq --arg ref $ref '.ref = $ref' <<<'{}')
echo "PAYLOAD: $PAYLOAD"
PROJECT_ID=""
PIPELINE_ID=""
while true; do
    echo "Retrying to create pipeline"
    sleep 12
    PIPELINE=`curl -s --request POST \
        --data "$PAYLOAD" \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer $GITLAB_TOKEN" \
        $URL` || continue;
    echo "PIPELINE: $PIPELINE"
    PIPELINE_MESSAGE_BASE_0=$(echo $PIPELINE | jq -r ".message.base[0]") || true;
    if [ "Reference not found" == "$PIPELINE_MESSAGE_BASE_0" ]; then
        echo "Reference not found"
        exit 0
    fi
    PIPELINE_ID=$(echo $PIPELINE | jq -r ".id")
    PROJECT_ID=$(echo $PIPELINE | jq -r ".project_id")
    # check if $PROJECT_ID is null
    if [ "null" == "$PROJECT_ID" ]; then
        echo "PROJECT_ID is null"
        sleep 2
        exit 1
    fi
    echo "PROJECT_ID: $PROJECT_ID"
    if [ -z "$PROJECT_ID" ]; then
        echo "PROJECT_ID is empty"
        exit 1
    fi
    InternalServerErrorMessage="500 Internal Server Error"
    ProjectNotFoundMessage="404 Project Not Found"
    PIPELINE_MESSAGE=$(echo $PIPELINE | jq -r ".message")
    if [ "$ProjectNotFoundMessage" == "$PIPELINE_MESSAGE" ]; then
        echo "Project not found"
        sleep 2
        continue
    fi
    if [ "$InternalServerErrorMessage" == "$PIPELINE_MESSAGE" ]; then
        echo "Internal Server Error"
        sleep 2
        continue
    fi
    break;
done
if [ "wait-for-success" == "$option2" ]; then
    while true; do
        sleep 8
        echo "Waiting for pipeline to succeed"
        PIPELINE=`curl -s --request GET \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $GITLAB_TOKEN" \
            $URL"s/"$PIPELINE_ID`
        PIPELINE_STATUS=$(echo $PIPELINE | jq -r ".status")
        PIPELINE_ERROR=$(echo $PIPELINE | jq -r ".error")
        if [ "invalid_token" == "$PIPELINE_ERROR" ]; then
            echo "Invalid token"
            GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
            continue
        fi
        echo "PIPELINE_STATUS: $PIPELINE_STATUS"
        if [ "success" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline succeeded"
            break
        fi
        if [ "manual" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline requires manual action"
            break
        fi
        if [ "running" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline is running"
                CONDITIONS='.items[] | select(.metadata.annotations."project.runner.gitlab.com/id" == "'$PROJECT_ID'") | .metadata.name'
                PODS=$(kubectl get pods -n gitlab-ns -o json | jq -r "$CONDITIONS")
                echo "PODS: $PODS"
                for pod in $PODS; do
                    IS_PodInitializing=$(kubectl get pod -n gitlab-ns $pod -o jsonpath='{.status.conditions[?(@.type=="PodInitializing")].status}')
                    if [ "PodInitializing" == "$IS_PodInitializing" ]; then
                        echo "Pod $pod is initializing"
                        continue
                    fi
                    echo "===================="
                    kubectl logs -n gitlab-ns $pod -c build --tail 12 || true
                done
            continue
        fi
        if [ "failed" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline failed"
            exit 1
        fi
        sleep 6
    done
fi
