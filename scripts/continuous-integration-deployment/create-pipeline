set -xe -o pipefail
source .env
GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
FQDN_ADDRESS="http-gitlab-webservice-default-gitlab-ns-8181.$DOMAIN"
args=("$@")
PROJECT_NAME=${args[0]}
ref=${args[1]}
option2=${args[2]}
URL="https://$FQDN_ADDRESS/api/v4/projects/$PROJECT_NAME/pipeline"
PAYLOAD=$(jq --arg ref $ref '.ref = $ref' <<<'{}')
echo "PAYLOAD Pipeline: $PAYLOAD"
STARTED_AT=$(date +%s)
PROJECT_ID=""
PIPELINE_ID=""
is_pipeline_is_up_to_date() {
    AUTHORIZATION="$1"
    REF="$2"
    PROJECT_URL="$3"
    LAST_COMMIT_ID=`curl -s --request GET \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer $AUTHORIZATION" \
        "$PROJECT_URL/repository/commits?ref=$REF" \
            | jq -r ".[0].id"`

    PAYLOAD=$(jq --arg ref $REF '.ref = $ref' <<<'{}')

    LAST_PIPELINE_SHA=`curl -s --request GET --data "$PAYLOAD" \
        --header 'Content-Type: application/json' \
        --header "Authorization: Bearer $AUTHORIZATION" \
        "$PROJECT_URL/pipelines?ref=$REF&status=success" \
            | jq -r ".[0].sha"`
    if [ "$LAST_COMMIT_ID" == "$LAST_PIPELINE_SHA" ]; then
        echo "Last commit and last pipeline are the same. That means the pipeline is up to date."
    fi
}
# is_pipeline_is_up_to_date "$GITLAB_TOKEN" "$ref" "https://$FQDN_ADDRESS/api/v4/projects/$PROJECT_NAME" | grep "Last commit and last pipeline are the same" && exit 0 || true

while true; do
    echo "Retrying to create pipeline"
    PIPELINE=`curl -s --request POST \
        --data "$PAYLOAD" \
        --header "Content-Type: application/json" \
        --header "Authorization: Bearer $GITLAB_TOKEN" \
        $URL` || {
            sleep 12 && continue
        }
    echo "PIPELINE: $PIPELINE"
    PIPELINE_MESSAGE_BASE_0=$(echo $PIPELINE | jq -r ".message.base[0]") || true;
    if [ "Commit not found" == "$PIPELINE_MESSAGE_BASE_0" ]; then
        echo "Commit not found"
        continue;
    fi
    if [ "Missing CI config file" == "$PIPELINE_MESSAGE_BASE_0" ]; then
        echo "Missing CI config file"
        exit 0
    fi
    if [ "Pipeline filtered out by workflow rules." == "$PIPELINE_MESSAGE_BASE_0" ]; then
        echo "Pipeline filtered out by workflow rules. This is a normal behavior if the pipeline is not supposed to run. Please check the .gitlab-ci.yml file. Skipping..."
        exit 0
    fi
    if [ "Reference not found" == "$PIPELINE_MESSAGE_BASE_0" ]; then
        echo "Reference not found"
        exit 0
    fi
    PIPELINE_ID=$(echo $PIPELINE | jq -r ".id")
    PROJECT_ID=$(echo $PIPELINE | jq -r ".project_id")
    # check if $PROJECT_ID is null
    if [ "null" == "$PROJECT_ID" ]; then
        echo "PROJECT_ID is null"
        continue;
    fi
    echo "PROJECT_ID: $PROJECT_ID"
    if [ -z "$PROJECT_ID" ]; then
        echo "PROJECT_ID is empty"
        exit 1
    fi
    InternalServerErrorMessage="500 Internal Server Error"
    ProjectNotFoundMessage="404 Project Not Found"
    PIPELINE_MESSAGE=$(echo $PIPELINE | jq -r ".message")
    if [ "$ProjectNotFoundMessage" == "$PIPELINE_MESSAGE" ]; then
        echo "Project not found"
        sleep 2
        continue
    fi
    if [ "$InternalServerErrorMessage" == "$PIPELINE_MESSAGE" ]; then
        echo "Internal Server Error"
        sleep 2
        continue
    fi
    break;
done
if [ "wait-for-success" == "$option2" ]; then
    PODS_CREATED=""
    PENDING_COUNT=0
    RUNNING_COUNT=0
    while true; do
        echo "Waiting for pipeline to succeed"
        echo "RUNNING_COUNT: $RUNNING_COUNT"
        ELAPSED_TIME=$((`date +%s` - $STARTED_AT))
        echo "ELAPSED_TIME: $ELAPSED_TIME"
        sleep 8
        PIPELINE=`curl -s --request GET \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer $GITLAB_TOKEN" \
            $URL"s/"$PIPELINE_ID`
        PIPELINE_STATUS=$(echo $PIPELINE | jq -r ".status")
        PIPELINE_ERROR=$(echo $PIPELINE | jq -r ".error") || true
        if [ "invalid_token" == "$PIPELINE_ERROR" ]; then
            echo "Invalid token"
            GITLAB_TOKEN=$(./pic get-refresh-token-gitlab)
            continue
        fi
        echo "PIPELINE_STATUS: $PIPELINE_STATUS"
        if [ "pending" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline is pending"
            PENDING_COUNT=$((PENDING_COUNT+1))
            if [ "$PENDING_COUNT" -gt 5 ]; then
                echo "Pipeline is stuck in pending state"
                exit 1
            fi
            continue
        fi
        if [ "success" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline succeeded"
            break
        fi
        if [ "manual" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline requires manual action"
            break
        fi
        if [ "canceled" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline was canceled"
            break
        fi
        if [ "running" == "$PIPELINE_STATUS" ]; then
            RUNNING_COUNT=$((RUNNING_COUNT+1))
            if [ "$RUNNING_COUNT" -gt 30 ]; then
                curl --request POST \
                    --header "Content-Type: application/json" \
                    --header "Authorization: Bearer $GITLAB_TOKEN" \
                    $URL"s/$PIPELINE_ID/cancel"
                echo "Pipeline is stuck in running state"
                exit 1
            fi
            echo "Pipeline is running"
            CONDITIONS='.items[] | select(.metadata.name | startswith("runner-")) | select(.metadata.annotations."project.runner.gitlab.com/id" == "'$PROJECT_ID'") | .metadata.name'
            kubectl get pods -n gitlab-ns -o json | jq -r "$CONDITIONS" | head -n 1 | xargs -I {} timeout 15 kubectl logs -n gitlab-ns {} -c build -f || true
            continue
        fi
        if [ "failed" == "$PIPELINE_STATUS" ]; then
            echo "Pipeline failed"
            exit 1
        fi
        sleep 16
    done
fi
