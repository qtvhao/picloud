#! /bin/bash
isRoot=$(whoami)
if [ "$isRoot" != "root" ]; then
    echo "Please run as root"
    exit 1
fi
args=("$@")
arg1=${args[0]}
if [ "$arg1" == "update" ]; then
    echo "Updating PiCloud"
    curl "https://raw.githubusercontent.com/qtvhao/picloud/main/pic?$(date +%s)" -o pic && chmod +x pic
    exit 0
fi
if [ "$arg1" == "install" ]; then
    echo "Installing Docker"
    curl -fsSL https://get.docker.com -o install-docker.sh
    chmod +x install-docker.sh
    docker version || ./install-docker.sh
    echo "Installed Docker"
    rm install-docker.sh
    ./pic expose
    ./pic reinstall-k3s
    exit 0
fi
if [ "$arg1" == "expose" ]; then
    (cat scripts/cloudflared/expose && cp scripts/cloudflared/expose expose && chmod +x expose) ||
        curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/cloudflared/expose -o expose && chmod +x expose
    ./expose "$1" "$2" "$3" "$4"
    rm ./expose
    exit 0
fi
if [ "$arg1" == "remove" ]; then
    echo "Removing PiCloud"
    docker rm -f picloud-k3s-server
    apt remove docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin -y >/dev/null
    exit 0
fi
if [ "$arg1" == "start" ]; then
    echo "Starting PiCloud"
    exit 0
fi
if [ "$arg1" == "stop" ]; then
    echo "Stopping PiCloud"
    exit 0
fi
if [ "$arg1" == "restart" ]; then
    echo "Restarting PiCloud"
    exit 0
fi
if [ "$arg1" == "status" ]; then
    echo "Status of PiCloud"
    kubectl create deployment test-connectivity --image=rancher/curl -- sleep 86400
    while true; do
        kubectl exec -it $(kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}') -- curl http://example.com && break ||
            echo "Waiting for test-connectivity pod to be ready"
        sleep 5
    done
    kubectl exec -it $(kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}') -- curl http://example.com
    exit 0
fi
if [ "$arg1" == "reinstall-k3s" ]; then
    set -e
    (cat scripts/k3s/reinstall-k3s && cp scripts/k3s/reinstall-k3s reinstall-k3s && chmod +x reinstall-k3s) ||
        curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/k3s/reinstall-k3s -o ./reinstall-k3s && chmod +x reinstall-k3s
    ./reinstall-k3s
    rm ./reinstall-k3s
    exit 0
fi
if [ "$arg1" == "s3" ]; then
    set -e
    (cat scripts/storage/install-minio && cp scripts/storage/install-minio install-minio && chmod +x install-minio) ||
    curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/storage/install-minio -o ./install-minio && chmod +x install-minio
    ./install-minio "$1" "$2" "$3" "$4"
    exit 0
fi
if [ "$arg1" == "redis" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/database" \
    "install-redis" "$1" "$2" "$3" "$4"
    exit 0
fi
if [ "$arg1" == "exec-local-or-remote" ]; then
    set -e
    scriptFile="./$3"
    remoteUrl="https://raw.githubusercontent.com/qtvhao/picloud/main/$2/$3"
    echo "scriptFile: $scriptFile"
    echo "scriptFile exists: $(test -f "$scriptFile" && echo "true" || echo "false")"
    echo "remoteUrl: $remoteUrl"
    "$scriptFile" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" || \
        curl $remoteUrl -o $scriptFile && \
        chmod +x $scriptFile && \
        $scriptFile "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    rm $scriptFile
    exit 0
fi
fi
if [ "$arg1" == "csi-s3" ]; then
    (cat scripts/storage/install-minio-csi-driver && cp scripts/storage/install-minio-csi-driver install-minio-csi-driver && chmod +x install-minio-csi-driver) ||
    curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/storage/install-minio-csi-driver -o ./install-minio-csi-driver && chmod +x install-minio-csi-driver
    ./install-minio-csi-driver "$1" "$2" "$3" "$4"
    exit 0
fi
if [ "$arg1" == "cilium" ]; then
    echo "Installing Cilium"
    helm repo add cilium https://helm.cilium.io/
    helm install cilium cilium/cilium --namespace=kube-system
    exit 0
fi
if [ "$arg1" == "registry-as-a-pull-through-cache" ]; then
    echo "Installing registry-as-a-pull-through-cache"
fi
if [ "$arg1" == "gitlab" ]; then
    ./scripts/continuous-integration-deployment/gitlab "$1" "$2" "$3" "$4"
    exit 0
fi
if [ "$arg1" == "grafana-promtail-loki" ]; then
    ./scripts/logging-monitoring/grafana-promtail-loki "$1" "$2" "$3" "$4"
    exit 0
fi
if [ "$arg1" == "join-k3s" ]; then
    (cat scripts/k3s/join-k3s && cp scripts/k3s/join-k3s join-k3s && chmod +x join-k3s) ||
        curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/k3s/join-k3s -o ./join-k3s && chmod +x join-k3s
    ./scripts/k3s/join-k3s "$1" "$2" "$3" "$4"
    rm ./join-k3s
    exit 0
fi
if [ "$arg1" == "help" ]; then
    ./scripts/help
    exit 0
fi
./pic help
