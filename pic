#! /bin/bash
isRoot=$(whoami)
if [ "$isRoot" != "root" ]; then
    echo "Please run as root"
    exit 1
fi
args=("$@")
arg1=${args[0]}
if [ "$arg1" == "update" ]; then
    echo "Updating PiCloud"
    curl "https://raw.githubusercontent.com/qtvhao/picloud/main/pic?$(date +%s)" -o pic && chmod +x pic
    exit 0
fi
if [ "$arg1" == "recommended" ]; then
    set -e
    ./pic exec-local-or-remote "scripts" \
    "recommended" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "install" ]; then
    echo "Installing Docker"
    curl -fsSL https://get.docker.com -o install-docker.sh
    chmod +x install-docker.sh
    docker version || ./install-docker.sh
    echo "Installed Docker"
    rm install-docker.sh
    ./pic expose
    ./pic reinstall-k3s
    exit 0
fi
if [ "$arg1" == "expose" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/cloudflared" \
    "expose" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "remove" ]; then
    echo "Removing PiCloud"
    docker rm -f picloud-k3s-server
    apt remove docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin -y >/dev/null
    exit 0
fi
if [ "$arg1" == "start" ]; then
    echo "Starting PiCloud"
    exit 0
fi
if [ "$arg1" == "stop" ]; then
    echo "Stopping PiCloud"
    exit 0
fi
if [ "$arg1" == "restart" ]; then
    echo "Restarting PiCloud"
    exit 0
fi
if [ "$arg1" == "status" ]; then
    echo "Status of PiCloud"
    echo "PiCloud is running"
    exit 0
fi
if [ "$arg1" == "reinstall-k3s" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/k3s" \
    "reinstall-k3s" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "wait" ]; then
    set -e
    RESOURCE_TYPE=$2
    DEPLOYMENT=$3
    NAMESPACE=$4
    CONDITION=$5
    while true; do
        kubectl wait --for=condition=$CONDITION $RESOURCE_TYPE/$DEPLOYMENT -n $NAMESPACE --timeout 10s && break || sleep 5
    done
    exit 0
fi
if [ "$arg1" == "s3" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/storage" \
    "install-minio" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "redis" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/database" \
    "install-redis" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "exec-local-or-remote" ]; then
    set -e
    scriptFile="./$3"
    remoteUrl="https://raw.githubusercontent.com/qtvhao/picloud/main/$2/$3"
    # echo "scriptFile: $scriptFile"
    # echo "scriptFile exists: $(test -f "$scriptFile" && echo "true" || echo "false")"
    # echo "remoteUrl: $remoteUrl"
    # echo "arg \$4: $4"
    # echo "arg \$5: $5"
    # echo "arg \$6: $6"
    # echo "arg \$7: $7"
    # echo "arg \$8: $8"
    scriptFileExists=$(test -f "$2/$3" && echo "true" || echo "false")
    if [ "$scriptFileExists" == "true" ]; then
        cp "$2/$3" "$scriptFile"
    else
        curl $remoteUrl -o $scriptFile
    fi
    chmod +x $scriptFile
    "$scriptFile" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    rm $scriptFile || true
    exit 0
fi
if [ "$arg1" == "csi-s3" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/storage" \
    "install-minio-csi-driver" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "pxe-boot" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/infrastructure" \
    "pxe-boot" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    # for example ./pic pxe-boot 192.168.1.110 8c:dc:d4:34:0c:f0 sda eno1
    exit 0
fi
if [ "$arg1" == "cilium" ]; then
    echo "Installing Cilium"
    helm repo add cilium https://helm.cilium.io/
    helm install cilium cilium/cilium --namespace=kube-system
    exit 0
fi
if [ "$arg1" == "registry-as-a-pull-through-cache" ]; then
    echo "Installing registry-as-a-pull-through-cache"
fi
if [ "$arg1" == "gitlab" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/continuous-integration-deployment" \
    "install-gitlab" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "grafana-promtail-loki" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/logging-monitoring" \
    "grafana-promtail-loki" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "join-k3s" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/k3s" \
    "join-k3s" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "git-folk" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/continuous-integration-deployment" \
    "git-folk" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "init-terraform" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/infrastructure" \
    "init-terraform" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "fai" ]; then
    set -e
    time ./pic exec-local-or-remote "scripts/fai" \
    "install" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "dd" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/fai" \
    "dd" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
    # status=progress
fi
if [ "$arg1" == "pxe" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/fai" \
    "pxe" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
    # status=progress
fi
if [ "$arg1" == "wait-node-to-shutdown" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/fai" \
    "wait-node-to-shutdown" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "list-mass-storage" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/fai" \
    "list-mass-storage" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "list-nodename" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/fai" \
    "list-nodename" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "wait-nodename" ]; then
    set -e
    CHECK_AT=$(date +%s)
    echo "Waiting for new node to be ready"
    echo "CHECK_AT: $CHECK_AT"
    while true; do
        nodes=$(./pic list-nodename)
        # loop through lines in $nodes, echo
        while IFS= read -r line; do
            if [ -z "$line" ]; then
                continue
            fi
            echo "line: $line"
            IP_ADDRESS=$(echo $line | awk '{print $1}')
            # echo "IP_ADDRESS: $IP_ADDRESS"
            LAST_BOOT=$(echo $line | awk '{print $2}')
            if [ -z "$LAST_BOOT" ]; then
                continue
            fi
            if [ -z "$IP_ADDRESS" ]; then
                continue
            fi
            if [ "$LAST_BOOT" -gt "$CHECK_AT" ]; then
                echo "IP_ADDRESS: $IP_ADDRESS"
                echo "LAST_BOOT: $LAST_BOOT"
                echo "CHECK_AT: $CHECK_AT"
                echo 
                echo "  Node $IP_ADDRESS is ready"
                exit 0
            fi
        done <<< "$nodes"
        
        sleep 5
    done
fi
if [ "$arg1" == "help" ]; then
    ./pic exec-local-or-remote "scripts" \
    "help"
    exit 0
fi
if [ "$arg1" == "local-registry" ]; then
    set -e
    docker rm -f docker-registry || true
    docker run -d --name docker-registry -p 5000:5000 \
        -v ./k8s/.docker-registry-data:/var/lib/registry \
        -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
        --restart always \
        registry:2
    REGISTRY_IP_ADDRESS=$(hostname -I | head -n1 | awk '{print $1}')
    cat <<EOF > /etc/docker/daemon.json
{
    "insecure-registries":["$REGISTRY_IP_ADDRESS:5000"],
    "registry-mirrors": ["http://$REGISTRY_IP_ADDRESS:5000"],
    "runtimes": {
        "nvidia": {
            "path": "nvidia-container-runtime",
            "runtimeArgs": []
        }
    }
}
EOF
    service docker restart
    docker pull alpine
exit 0
fi
./pic help
