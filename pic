#! /bin/bash
isRoot=$(whoami)
if [ "$isRoot" != "root" ]; then
    echo "Please run as root"
    exit 1
fi
args=("$@")
arg1=${args[0]}
if [ "$arg1" == "update" ]; then
    echo "Updating PiCloud"
    curl "https://raw.githubusercontent.com/qtvhao/picloud/main/pic?$(date +%s)" -o pic && chmod +x pic
    exit 0
fi
if [ "$arg1" == "install" ]; then
    echo "Installing Docker"
    curl -fsSL https://get.docker.com -o install-docker.sh
    chmod +x install-docker.sh
    docker version || ./install-docker.sh
    echo "Installed Docker"
    rm install-docker.sh
    ./pic expose
    ./pic reinstall-k3s
    exit 0
fi
if [ "$arg1" == "expose" ]; then
    (cat scripts/cloudflared/expose && cp scripts/cloudflared/expose expose && chmod +x expose) ||
        curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/cloudflared/expose -o expose && chmod +x expose
    ./expose "$1" "$2" "$3" "$4"
    rm ./expose
    exit 0
fi
if [ "$arg1" == "remove" ]; then
    echo "Removing PiCloud"
    docker rm -f picloud-k3s-server
    apt remove docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin -y >/dev/null
    exit 0
fi
if [ "$arg1" == "start" ]; then
    echo "Starting PiCloud"
    exit 0
fi
if [ "$arg1" == "stop" ]; then
    echo "Stopping PiCloud"
    exit 0
fi
if [ "$arg1" == "restart" ]; then
    echo "Restarting PiCloud"
    exit 0
fi
if [ "$arg1" == "status" ]; then
    echo "Status of PiCloud"
    kubectl create deployment test-connectivity --image=rancher/curl -- sleep 86400
    while true; do
        kubectl exec -it $(kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}') -- curl http://example.com && break ||
            echo "Waiting for test-connectivity pod to be ready"
        sleep 5
    done
    kubectl exec -it $(kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}') -- curl http://example.com
    exit 0
fi
if [ "$arg1" == "reinstall-k3s" ]; then
    set -e
    (cat scripts/k3s/reinstall-k3s && cp scripts/k3s/reinstall-k3s reinstall-k3s && chmod +x reinstall-k3s) ||
        curl https://raw.githubusercontent.com/qtvhao/picloud/main/scripts/k3s/reinstall-k3s -o ./reinstall-k3s && chmod +x reinstall-k3s
    ./reinstall-k3s
    rm ./reinstall-k3s
    exit 0
fi
if [ "$arg1" == "cilium" ]; then
    echo "Installing Cilium"
    helm repo add cilium https://helm.cilium.io/
    helm install cilium cilium/cilium --namespace=kube-system
    exit 0
fi
if [ "$arg1" == "gitlab" ]; then
    source .env
    if [ -z "$DOMAIN" ]; then
        echo "Please set DOMAIN in .env"
        exit 1
    fi
    helm repo add gitlab https://charts.gitlab.io/ || echo ""
    helm repo update
    kubectl get namespace gitlab-ns || kubectl create namespace gitlab-ns
    helm upgrade --install gitlab gitlab/gitlab \
        --namespace gitlab-ns \
        --set global.ingress.tls.enabled=false,global.ingress.enabled=false,global.edition=ce,global.appConfig.certmanager.enabled=true,gitlab-runner.runners.privileged=true,runners.privileged=true,certmanager-issuer.email=qtvhao@gmail.com,global.edition=ce,certmanager.install=false,global.ingress.configureCertmanager=false,gitlab-runner.install=true,global.kas.tls.enabled=false,nginx-ingress.enabled=false,global.hosts.domain=$DOMAIN
    ./pic expose http gitlab-webservice-default.gitlab-ns 8181
    exit 0
fi
if [ "$arg1" == "grafana-promtail-loki" ]; then
    args=("$@")
    USERNAME=${args[1]}
    PASSWORD=${args[2]}
    echo "Installing Grafana"
    helm repo add grafana https://grafana.github.io/helm-charts
    helm install grafana grafana/grafana --namespace=loki
    kubectl get namespace loki || kubectl create namespace loki
    helm upgrade --install --namespace loki promtail grafana/promtail
    helm upgrade --install --namespace loki loki grafana/loki
    kubectl get secret --namespace loki grafana && kubectl delete secret --namespace loki grafana
    kubectl create secret generic grafana --namespace loki --from-literal=admin-password=$PASSWORD --from-literal=admin-user=$USERNAME --from-literal=ldap-toml=""
    helm upgrade --install --set "admin.existingSecret=grafana" --namespace loki grafana grafana/grafana
    kubectl get secret --namespace loki grafana -o jsonpath="{.data.admin-password}" | base64 --decode
    echo
    exit 0
fi
if [ "$arg1" == "join-k3s" ]; then
    args=("$@")
    NODE_IP=${args[1]}
    echo "Connecting to $NODE_IP"
    ssh "$NODE_IP" "hostname" || exit 1
    echo "Connected to $NODE_IP"
    docker cp picloud-k3s-server:/var/lib/rancher/k3s/server/tls/server-ca.crt /usr/local/share/ca-certificates/kubernetes.crt
    scp /usr/local/share/ca-certificates/kubernetes.crt "$NODE_IP":/usr/local/share/ca-certificates/kubernetes.crt
    ssh "$NODE_IP" "update-ca-certificates"
    set -e
    K3S_URL=$(jq -r '.k3s_url' k3s.json)
    K3S_TOKEN=$(jq -r '.k3s_token' k3s.json)
    echo "K3S_URL: $K3S_URL"
    echo "K3S_TOKEN: $K3S_TOKEN"
    NODE_COMMAND="curl -sfL https://get.k3s.io | K3S_URL=$K3S_URL K3S_TOKEN=$K3S_TOKEN sh -"
    echo "Joining worker node to this cluster"
    echo "NODE_IP: $NODE_IP"
    ssh -o ConnectTimeout=5 "$NODE_IP" "ip link delete cilium_host" || echo ""
    ssh -o ConnectTimeout=5 "$NODE_IP" "ip link delete cilium_net" || echo ""
    ssh -o ConnectTimeout=5 "$NODE_IP" "ip link delete cilium_vxlan" || echo ""
    ssh $NODE_IP "$NODE_COMMAND"
    ssh "$NODE_IP" "sudo systemctl restart k3s-agent"
    echo "Joined worker node to this cluster"
    kubectl get nodes
    exit 0
fi
if [ "$arg1" == "help" ]; then
    echo "Help for PiCloud"
    echo "Usage: ./pic [command]"
    echo "Commands:"
    echo "  update"
    echo "  expose [protocol] [hostname] [port]"
    echo "  install"
    echo "  remove"
    echo "  start"
    echo "  stop"
    echo "  restart"
    echo "  status"
    echo "  install-k3s"
    echo "  help"

    exit 0
fi
./pic help
