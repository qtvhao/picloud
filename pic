#! /bin/bash
isRoot=$(whoami)
if [ "$isRoot" != "root" ]; then
    echo "Please run as root"
    exit 1
fi
args=("$@")
arg1=${args[0]}
if [ "$arg1" == "update" ]; then
    echo "Updating PiCloud"
    curl "https://raw.githubusercontent.com/qtvhao/picloud/main/pic?$(date +%s)" -o pic && chmod +x pic
    exit 0
fi
if [ "$arg1" == "install" ]; then
    echo "Installing Docker"
    curl -fsSL https://get.docker.com -o install-docker.sh
    chmod +x install-docker.sh
    docker version || ./install-docker.sh
    echo "Installed Docker"
    rm install-docker.sh
    ./pic expose
    ./pic reinstall-k3s
    exit 0
fi
if [ "$arg1" == "expose" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/cloudflared" \
    "expose" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "remove" ]; then
    echo "Removing PiCloud"
    docker rm -f picloud-k3s-server
    apt remove docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin -y >/dev/null
    exit 0
fi
if [ "$arg1" == "start" ]; then
    echo "Starting PiCloud"
    exit 0
fi
if [ "$arg1" == "stop" ]; then
    echo "Stopping PiCloud"
    exit 0
fi
if [ "$arg1" == "restart" ]; then
    echo "Restarting PiCloud"
    exit 0
fi
if [ "$arg1" == "status" ]; then
    echo "Status of PiCloud"
    kubectl get deployment test-connectivity >/dev/null 2>&1 || \
        kubectl create deployment test-connectivity --image=rancher/curl -- sleep 86400
    while true; do
        sleep 5
        echo "Waiting for test-connectivity pod to be ready"
        kubectl get pods -l app=test-connectivity >/dev/null 2>&1 || continue;
        kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}' >/dev/null 2>&1 || continue;
        kubectl exec -it $(kubectl get pods -l app=test-connectivity -o jsonpath='{.items[0].metadata.name}') -- curl http://example.com >/dev/null 2>&1 && break || continue;
    done
    echo "PiCloud is running"
    exit 0
fi
if [ "$arg1" == "reinstall-k3s" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/k3s" \
    "reinstall-k3s"
    exit 0
fi
if [ "$arg1" == "wait" ]; then
    set -e
    RESOURCE_TYPE=$2
    DEPLOYMENT=$3
    NAMESPACE=$4
    CONDITION=$5
    while true; do
        kubectl wait --for=condition=$CONDITION $RESOURCE_TYPE/$DEPLOYMENT -n $NAMESPACE --timeout 10s && break || sleep 5
    done
    exit 0
fi
if [ "$arg1" == "s3" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/storage" \
    "install-minio" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "redis" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/database" \
    "install-redis" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "exec-local-or-remote" ]; then
    set -e
    scriptFile="./$3"
    remoteUrl="https://raw.githubusercontent.com/qtvhao/picloud/main/$2/$3"
    echo "scriptFile: $scriptFile"
    echo "scriptFile exists: $(test -f "$scriptFile" && echo "true" || echo "false")"
    echo "remoteUrl: $remoteUrl"
    echo "arg \$4: $4"
    echo "arg \$5: $5"
    echo "arg \$6: $6"
    echo "arg \$7: $7"
    echo "arg \$8: $8"
    scriptFileExists=$(test -f "$2/$3" && echo "true" || echo "false")
    if [ "$scriptFileExists" == "true" ]; then
        cp "$2/$3" "$scriptFile"
    else
        curl $remoteUrl -o $scriptFile
    fi
    chmod +x $scriptFile
    "$scriptFile" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    rm $scriptFile
    exit 0
fi
if [ "$arg1" == "csi-s3" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/storage" \
    "install-minio-csi-driver" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "cilium" ]; then
    echo "Installing Cilium"
    helm repo add cilium https://helm.cilium.io/
    helm install cilium cilium/cilium --namespace=kube-system
    exit 0
fi
if [ "$arg1" == "registry-as-a-pull-through-cache" ]; then
    echo "Installing registry-as-a-pull-through-cache"
fi
if [ "$arg1" == "gitlab" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/continuous-integration-deployment" \
    "install-gitlab" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "grafana-promtail-loki" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/logging-monitoring" \
    "grafana-promtail-loki" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "join-k3s" ]; then
    set -e
    ./pic exec-local-or-remote "scripts/k3s" \
    "join-k3s" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
    exit 0
fi
if [ "$arg1" == "help" ]; then
    ./scripts/help
    exit 0
fi
./pic help
